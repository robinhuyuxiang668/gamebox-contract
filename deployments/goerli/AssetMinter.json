{
  "address": "0x6D32b5041364d67464492Dd3Cd02B4769b5B9F8D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAssetAttributesRegistry",
          "name": "registry",
          "type": "address"
        },
        {
          "internalType": "contract IAssetToken",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "contract GemsCatalystsRegistry",
          "name": "gemsCatalystsRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "quantitiesByCatalystId_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantitiesByAssetTypeId_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addressModified",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isAddressCustomMintingAllowed",
          "type": "bool"
        }
      ],
      "name": "CustomMintingAllowanceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTrustedForwarderAddress",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "index1Based",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "newQuantity",
          "type": "uint256"
        }
      ],
      "name": "addOrReplaceAssetTypeQuantity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "catalystId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "newQuantity",
          "type": "uint256"
        }
      ],
      "name": "addOrReplaceQuantitiyByCatalystId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "catalystsFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "customMinterAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gemsFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "packId",
              "type": "uint40"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAssetMinter.MintData",
          "name": "mintData",
          "type": "tuple"
        },
        {
          "internalType": "uint16",
          "name": "catalystId",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "gemIds",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "mintCustomNumberWithCatalyst",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "packId",
              "type": "uint40"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAssetMinter.MintData",
          "name": "mintData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint16[]",
              "name": "gemIds",
              "type": "uint16[]"
            },
            {
              "internalType": "uint16",
              "name": "catalystId",
              "type": "uint16"
            }
          ],
          "internalType": "struct IAssetMinter.AssetData[]",
          "name": "assets",
          "type": "tuple[]"
        }
      ],
      "name": "mintMultipleWithCatalyst",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "assetIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "packId",
              "type": "uint40"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAssetMinter.MintData",
          "name": "mintData",
          "type": "tuple"
        },
        {
          "internalType": "uint16",
          "name": "catalystId",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "gemIds",
          "type": "uint16[]"
        }
      ],
      "name": "mintWithCatalyst",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "packId",
              "type": "uint40"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAssetMinter.MintData",
          "name": "mintData",
          "type": "tuple"
        },
        {
          "internalType": "uint16",
          "name": "typeAsset1Based",
          "type": "uint16"
        }
      ],
      "name": "mintWithoutCatalyst",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfCatalystBurnPerAsset",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfGemsBurnPerAsset",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "quantitiesByAssetTypeId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "quantitiesByCatalystId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newQuantity",
          "type": "uint256"
        }
      ],
      "name": "setCatalystsFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addressToModify",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isAddressAllowed",
          "type": "bool"
        }
      ],
      "name": "setCustomMintingAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newQuantity",
          "type": "uint256"
        }
      ],
      "name": "setGemsFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newQuantity",
          "type": "uint32"
        }
      ],
      "name": "setNumberOfCatalystsBurnPerAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newQuantity",
          "type": "uint32"
        }
      ],
      "name": "setNumberOfGemsBurnPerAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3aba3a693c5c6653b349a8d3ca7bd24639a267ce96684c35b9ac2ebd40eb20a1",
  "receipt": {
    "to": null,
    "from": "0xA796AE911621E00809E0E7C8f0AD6BF118E5139e",
    "contractAddress": "0x6D32b5041364d67464492Dd3Cd02B4769b5B9F8D",
    "transactionIndex": 63,
    "gasUsed": "2691598",
    "logsBloom": "0x
    "blockHash": "0x28fdc863a89aaec4c02c105c4b693a5967f86207509c33d8bcf61e0ca60a7f3b",
    "transactionHash": "0x3aba3a693c5c6653b349a8d3ca7bd24639a267ce96684c35b9ac2ebd40eb20a1",
    "logs": [
      {
        "transactionIndex": 63,
        "blockNumber": 6344031,
        "transactionHash": "0x3aba3a693c5c6653b349a8d3ca7bd24639a267ce96684c35b9ac2ebd40eb20a1",
        "address": "0x6D32b5041364d67464492Dd3Cd02B4769b5B9F8D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a796ae911621e00809e0e7c8f0ad6bf118e5139e"
        ],
        "data": "0x",
        "logIndex": 127,
        "blockHash": "0x28fdc863a89aaec4c02c105c4b693a5967f86207509c33d8bcf61e0ca60a7f3b"
      },
      {
        "transactionIndex": 63,
        "blockNumber": 6344031,
        "transactionHash": "0x3aba3a693c5c6653b349a8d3ca7bd24639a267ce96684c35b9ac2ebd40eb20a1",
        "address": "0x6D32b5041364d67464492Dd3Cd02B4769b5B9F8D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000a796ae911621e00809e0e7c8f0ad6bf118e5139e",
          "0x00000000000000000000000039d01ecc951c2c1f20ba0549e62212659c4d1e06"
        ],
        "data": "0x",
        "logIndex": 128,
        "blockHash": "0x28fdc863a89aaec4c02c105c4b693a5967f86207509c33d8bcf61e0ca60a7f3b"
      }
    ],
    "blockNumber": 6344031,
    "cumulativeGasUsed": "9430626",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x29B6261A4244d2a7AAB0B3EDaa1159700C9A93Ae",
    "0xf050cDB34C8f39d24eD12678Dc5Ab32BE8672AfE",
    "0x9B1DBB930fd1E60dc1C6A2beec025106a7AFd65E",
    "0x39D01ecc951C2c1f20ba0549e62212659c4d1e06",
    "0x96E8789B195713B279c163847A7a0A107CDf6FCf",
    [
      1000,
      100,
      10,
      1
    ],
    [
      1,
      10000
    ]
  ],
  "solcInputHash": "0505d301d083cfaa512ecb9b03150aa2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAssetAttributesRegistry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"contract IAssetToken\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"contract GemsCatalystsRegistry\",\"name\":\"gemsCatalystsRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"quantitiesByCatalystId_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantitiesByAssetTypeId_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addressModified\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isAddressCustomMintingAllowed\",\"type\":\"bool\"}],\"name\":\"CustomMintingAllowanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTrustedForwarderAddress\",\"type\":\"address\"}],\"name\":\"TrustedForwarderChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"index1Based\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"newQuantity\",\"type\":\"uint256\"}],\"name\":\"addOrReplaceAssetTypeQuantity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"newQuantity\",\"type\":\"uint256\"}],\"name\":\"addOrReplaceQuantitiyByCatalystId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"catalystsFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customMinterAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gemsFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"packId\",\"type\":\"uint40\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAssetMinter.MintData\",\"name\":\"mintData\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mintCustomNumberWithCatalyst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"packId\",\"type\":\"uint40\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAssetMinter.MintData\",\"name\":\"mintData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"}],\"internalType\":\"struct IAssetMinter.AssetData[]\",\"name\":\"assets\",\"type\":\"tuple[]\"}],\"name\":\"mintMultipleWithCatalyst\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"assetIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"packId\",\"type\":\"uint40\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAssetMinter.MintData\",\"name\":\"mintData\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"catalystId\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"gemIds\",\"type\":\"uint16[]\"}],\"name\":\"mintWithCatalyst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"packId\",\"type\":\"uint40\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAssetMinter.MintData\",\"name\":\"mintData\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"typeAsset1Based\",\"type\":\"uint16\"}],\"name\":\"mintWithoutCatalyst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfCatalystBurnPerAsset\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfGemsBurnPerAsset\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"quantitiesByAssetTypeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"quantitiesByCatalystId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newQuantity\",\"type\":\"uint256\"}],\"name\":\"setCatalystsFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToModify\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAddressAllowed\",\"type\":\"bool\"}],\"name\":\"setCustomMintingAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newQuantity\",\"type\":\"uint256\"}],\"name\":\"setGemsFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newQuantity\",\"type\":\"uint32\"}],\"name\":\"setNumberOfCatalystsBurnPerAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newQuantity\",\"type\":\"uint32\"}],\"name\":\"setNumberOfGemsBurnPerAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"asset\":\": Asset Token Contract (dual ERC1155/ERC721)\",\"gemsCatalystsRegistry\":\": that track the canonical catalyst and gems and provide batch burning facility\",\"registry\":\": AssetAttributesRegistry for recording catalyst and gems used\",\"trustedForwarder\":\": address of the trusted forwarder (used for metaTX)\"}},\"mintCustomNumberWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[],uint256)\":{\"params\":{\"catalystId\":\"Id of the Catalyst ERC20 token to burn (1, 2, 3 or 4).\",\"gemIds\":\"list of gem ids to burn in the catalyst.\",\"mintData\":\"(-from address creating the Asset, need to be the tx sender or meta tx signer.  -packId unused packId that will let you predict the resulting tokenId. - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata. - to destination address receiving the minted tokens. - data extra data)\",\"quantity\":\"number of token to mint\"},\"returns\":{\"assetId\":\"The new token Id.\"}},\"mintMultipleWithCatalyst((address,address,uint40,bytes32,bytes),(uint16[],uint16)[])\":{\"params\":{\"assets\":\"data (gems and catalyst data)\",\"mintData\":\"contains (-from address creating the Asset, need to be the tx sender or meta tx signer -packId unused packId that will let you predict the resulting tokenId -metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata)\"}},\"mintWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[])\":{\"params\":{\"catalystId\":\"Id of the Catalyst ERC20 token to burn (1, 2, 3 or 4).\",\"gemIds\":\"list of gem ids to burn in the catalyst.\",\"mintData\":\": (-from address creating the Asset, need to be the tx sender or meta tx signer.  -packId unused packId that will let you predict the resulting tokenId. - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata. - to destination address receiving the minted tokens. - data extra data)\"},\"returns\":{\"assetId\":\"The new token Id.\"}},\"mintWithoutCatalyst((address,address,uint40,bytes32,bytes),uint16)\":{\"params\":{\"mintData\":\": (-from address creating the Asset, need to be the tx sender or meta tx signer.  -packId unused packId that will let you predict the resulting tokenId. - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata. - to destination address receiving the minted tokens. - data extra data)\",\"typeAsset1Based\":\"(art, prop...) decide how many asset will be minted (start at 1)\"},\"returns\":{\"assetId\":\"The new token Id.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"AssetMinter depends on\"},\"mintCustomNumberWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[],uint256)\":{\"notice\":\"mint \\\"quantity\\\" number of Asset token using one catalyst.\"},\"mintMultipleWithCatalyst((address,address,uint40,bytes32,bytes),(uint16[],uint16)[])\":{\"notice\":\"mint multiple Asset tokens.\"},\"mintWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[])\":{\"notice\":\"mint multiple Asset tokens using one catalyst.\"},\"mintWithoutCatalyst((address,address,uint40,bytes32,bytes),uint16)\":{\"notice\":\"mint one Asset token with no catalyst.\"}},\"notice\":\"Allow to mint Asset with Catalyst, Gems and Sand, giving the assets attributes through AssetAttributeRegistry\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/asset/AssetMinter.sol\":\"AssetMinter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x44300341eb97e8790e56e0823e8c3d09695fc2ee80555a83a9585f307381f324\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"src/solc_0.8/asset/AssetMinter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\nimport \\\"../common/BaseWithStorage/ERC2771Handler.sol\\\";\\nimport \\\"../common/interfaces/IAssetMinter.sol\\\";\\nimport \\\"../catalyst/GemsCatalystsRegistry.sol\\\";\\nimport \\\"../common/interfaces/IAssetToken.sol\\\";\\n\\n/// @notice Allow to mint Asset with Catalyst, Gems and Sand, giving the assets attributes through AssetAttributeRegistry\\ncontract AssetMinter is ERC2771Handler, IAssetMinter, Ownable {\\n    uint256 private constant NFT_SUPPLY = 1;\\n\\n    uint32 public numberOfGemsBurnPerAsset = 1;\\n    uint32 public numberOfCatalystBurnPerAsset = 1;\\n    uint256 public gemsFactor = 1000000000000000000;\\n    uint256 public catalystsFactor = 1000000000000000000;\\n\\n    IAssetAttributesRegistry internal immutable _registry;\\n    IAssetToken internal immutable _asset;\\n    GemsCatalystsRegistry internal immutable _gemsCatalystsRegistry;\\n\\n    mapping(uint16 => uint256) public quantitiesByCatalystId;\\n    mapping(uint16 => uint256) public quantitiesByAssetTypeId; // quantities for asset that don't use catalyst to burn (art, prop...)\\n    mapping(address => bool) public customMinterAllowance;\\n\\n    event CustomMintingAllowanceChanged(address indexed addressModified, bool indexed isAddressCustomMintingAllowed);\\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\\n\\n    /// @notice AssetMinter depends on\\n    /// @param registry: AssetAttributesRegistry for recording catalyst and gems used\\n    /// @param asset: Asset Token Contract (dual ERC1155/ERC721)\\n    /// @param gemsCatalystsRegistry: that track the canonical catalyst and gems and provide batch burning facility\\n    /// @param trustedForwarder: address of the trusted forwarder (used for metaTX)\\n    constructor(\\n        IAssetAttributesRegistry registry,\\n        IAssetToken asset,\\n        GemsCatalystsRegistry gemsCatalystsRegistry,\\n        address admin,\\n        address trustedForwarder,\\n        uint256[] memory quantitiesByCatalystId_,\\n        uint256[] memory quantitiesByAssetTypeId_\\n    ) {\\n        _registry = registry;\\n        _asset = asset;\\n        _gemsCatalystsRegistry = gemsCatalystsRegistry;\\n        transferOwnership(admin);\\n        __ERC2771Handler_initialize(trustedForwarder);\\n\\n        require(quantitiesByCatalystId_.length > 0, \\\"AssetMinter: quantitiesByCatalystID length cannot be 0\\\");\\n        require(quantitiesByAssetTypeId_.length > 0, \\\"AssetMinter: quantitiesByAssetTypeId length cannot be 0\\\");\\n\\n        for (uint16 i = 0; i < quantitiesByCatalystId_.length; i++) {\\n            quantitiesByCatalystId[i + 1] = quantitiesByCatalystId_[i];\\n        }\\n\\n        for (uint16 i = 0; i < quantitiesByAssetTypeId_.length; i++) {\\n            quantitiesByAssetTypeId[i + 1] = quantitiesByAssetTypeId_[i];\\n        }\\n    }\\n\\n    function addOrReplaceQuantitiyByCatalystId(uint16 catalystId, uint256 newQuantity) external override onlyOwner {\\n        quantitiesByCatalystId[catalystId] = newQuantity;\\n    }\\n\\n    function addOrReplaceAssetTypeQuantity(uint16 index1Based, uint256 newQuantity) external override onlyOwner {\\n        quantitiesByAssetTypeId[index1Based] = newQuantity;\\n    }\\n\\n    function setNumberOfGemsBurnPerAsset(uint32 newQuantity) external override onlyOwner {\\n        numberOfGemsBurnPerAsset = newQuantity;\\n    }\\n\\n    function setNumberOfCatalystsBurnPerAsset(uint32 newQuantity) external override onlyOwner {\\n        numberOfCatalystBurnPerAsset = newQuantity;\\n    }\\n\\n    function setGemsFactor(uint256 newQuantity) external override onlyOwner {\\n        gemsFactor = newQuantity;\\n    }\\n\\n    function setCatalystsFactor(uint256 newQuantity) external override onlyOwner {\\n        catalystsFactor = newQuantity;\\n    }\\n\\n    function setCustomMintingAllowance(address addressToModify, bool isAddressAllowed) external override onlyOwner {\\n        customMinterAllowance[addressToModify] = isAddressAllowed;\\n\\n        emit CustomMintingAllowanceChanged(addressToModify, isAddressAllowed);\\n    }\\n\\n    /// @notice mint \\\"quantity\\\" number of Asset token using one catalyst.\\n    /// @param mintData (-from address creating the Asset, need to be the tx sender or meta tx signer.\\n    ///  -packId unused packId that will let you predict the resulting tokenId.\\n    /// - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata.\\n    /// - to destination address receiving the minted tokens.\\n    /// - data extra data)\\n    /// @param catalystId Id of the Catalyst ERC20 token to burn (1, 2, 3 or 4).\\n    /// @param gemIds list of gem ids to burn in the catalyst.\\n    /// @param quantity number of token to mint\\n    /// @return assetId The new token Id.\\n    function mintCustomNumberWithCatalyst(\\n        MintData calldata mintData,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds,\\n        uint256 quantity\\n    ) external override returns (uint256 assetId) {\\n        require(\\n            customMinterAllowance[_msgSender()] == true || _msgSender() == owner(),\\n            \\\"AssetyMinter: custom minting unauthorized\\\"\\n        );\\n        assetId = _burnAndMint(\\n            mintData.from,\\n            mintData.packId,\\n            mintData.metadataHash,\\n            catalystId,\\n            gemIds,\\n            quantity,\\n            mintData.to,\\n            mintData.data\\n        );\\n    }\\n\\n    /// @notice mint one Asset token with no catalyst.\\n    /// @param mintData : (-from address creating the Asset, need to be the tx sender or meta tx signer.\\n    ///  -packId unused packId that will let you predict the resulting tokenId.\\n    /// - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata.\\n    /// - to destination address receiving the minted tokens.\\n    /// - data extra data)\\n    /// @param typeAsset1Based (art, prop...) decide how many asset will be minted (start at 1)\\n    /// @return assetId The new token Id.\\n    function mintWithoutCatalyst(MintData calldata mintData, uint16 typeAsset1Based)\\n        external\\n        override\\n        returns (uint256 assetId)\\n    {\\n        uint256 quantity = quantitiesByAssetTypeId[typeAsset1Based];\\n\\n        _mintRequirements(mintData.from, quantity, mintData.to);\\n        assetId = _asset.mint(\\n            mintData.from,\\n            mintData.packId,\\n            mintData.metadataHash,\\n            quantity,\\n            0,\\n            mintData.to,\\n            mintData.data\\n        );\\n    }\\n\\n    /// @notice mint multiple Asset tokens using one catalyst.\\n    /// @param mintData : (-from address creating the Asset, need to be the tx sender or meta tx signer.\\n    ///  -packId unused packId that will let you predict the resulting tokenId.\\n    /// - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata.\\n    /// - to destination address receiving the minted tokens.\\n    /// - data extra data)\\n    /// @param catalystId Id of the Catalyst ERC20 token to burn (1, 2, 3 or 4).\\n    /// @param gemIds list of gem ids to burn in the catalyst.\\n    /// @return assetId The new token Id.\\n    function mintWithCatalyst(\\n        MintData calldata mintData,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external override returns (uint256 assetId) {\\n        uint256 quantity = quantitiesByCatalystId[catalystId];\\n\\n        assetId = _burnAndMint(\\n            mintData.from,\\n            mintData.packId,\\n            mintData.metadataHash,\\n            catalystId,\\n            gemIds,\\n            quantity,\\n            mintData.to,\\n            mintData.data\\n        );\\n    }\\n\\n    /// @notice mint multiple Asset tokens.\\n    /// @param mintData contains (-from address creating the Asset, need to be the tx sender or meta tx signer\\n    /// -packId unused packId that will let you predict the resulting tokenId\\n    /// -metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata)\\n    /// @param assets data (gems and catalyst data)\\n    function mintMultipleWithCatalyst(MintData calldata mintData, AssetData[] memory assets)\\n        external\\n        override\\n        returns (uint256[] memory assetIds)\\n    {\\n        require(assets.length != 0, \\\"INVALID_0_ASSETS\\\");\\n        require(mintData.to != address(0), \\\"INVALID_TO_ZERO_ADDRESS\\\");\\n\\n        require(_msgSender() == mintData.from, \\\"AUTH_ACCESS_DENIED\\\");\\n\\n        uint256[] memory supplies = _handleMultipleAssetRequirements(mintData.from, assets);\\n        assetIds = _asset.mintMultiple(\\n            mintData.from,\\n            mintData.packId,\\n            mintData.metadataHash,\\n            supplies,\\n            \\\"\\\",\\n            mintData.to,\\n            mintData.data\\n        );\\n        for (uint256 i = 0; i < assetIds.length; i++) {\\n            require(assets[i].catalystId != 0, \\\"AssetMinter: catalystID can't be 0\\\");\\n            _registry.setCatalyst(assetIds[i], assets[i].catalystId, assets[i].gemIds);\\n        }\\n        return assetIds;\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyOwner {\\n        _trustedForwarder = trustedForwarder;\\n\\n        emit TrustedForwarderChanged(trustedForwarder);\\n    }\\n\\n    /// @dev Handler for dealing with assets when minting multiple at once.\\n    /// @param from The original address that signed the transaction.\\n    /// @param assets An array of AssetData structs to define how the total gems and catalysts are to be allocated.\\n    /// @return supplies An array of the quantities for each asset being minted.\\n    function _handleMultipleAssetRequirements(address from, AssetData[] memory assets)\\n        internal\\n        returns (uint256[] memory supplies)\\n    {\\n        supplies = new uint256[](assets.length);\\n        uint256[] memory catalystsToBurn = new uint256[](_gemsCatalystsRegistry.getNumberOfCatalystContracts());\\n        uint256[] memory gemsToBurn = new uint256[](_gemsCatalystsRegistry.getNumberOfGemContracts());\\n\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            require(\\n                assets[i].catalystId > 0 && assets[i].catalystId <= catalystsToBurn.length,\\n                \\\"AssetMinter: catalystID out of bound\\\"\\n            );\\n            catalystsToBurn[assets[i].catalystId - 1]++;\\n            for (uint256 j = 0; j < assets[i].gemIds.length; j++) {\\n                require(\\n                    assets[i].gemIds[j] > 0 && assets[i].gemIds[j] <= gemsToBurn.length,\\n                    \\\"AssetMinter: gemId out of bound\\\"\\n                );\\n                gemsToBurn[assets[i].gemIds[j] - 1]++;\\n            }\\n\\n            uint16 maxGems = _gemsCatalystsRegistry.getMaxGems(assets[i].catalystId);\\n            require(assets[i].gemIds.length <= maxGems, \\\"AssetMinter: too many gems\\\");\\n            supplies[i] = quantitiesByCatalystId[assets[i].catalystId];\\n        }\\n        _batchBurnCatalysts(from, catalystsToBurn);\\n        _batchBurnGems(from, gemsToBurn);\\n    }\\n\\n    /// @dev Burn a batch of catalysts in one tx.\\n    /// @param from The original address that signed the tx.\\n    /// @param catalystsQuantities An array of quantities for each type of catalyst to burn.\\n    function _batchBurnCatalysts(address from, uint256[] memory catalystsQuantities) internal {\\n        uint16[] memory ids = new uint16[](catalystsQuantities.length);\\n        for (uint16 i = 0; i < ids.length; i++) {\\n            ids[i] = i + 1;\\n        }\\n        _gemsCatalystsRegistry.batchBurnCatalysts(from, ids, _scaleCatalystQuantities(catalystsQuantities));\\n    }\\n\\n    /// @dev Burn a batch of gems in one tx.\\n    /// @param from The original address that signed the tx.\\n    /// @param gemsQuantities An array of quantities for each type of gems to burn.\\n    function _batchBurnGems(address from, uint256[] memory gemsQuantities) internal {\\n        uint16[] memory ids = new uint16[](gemsQuantities.length);\\n        for (uint16 i = 0; i < ids.length; i++) {\\n            ids[i] = i + 1;\\n        }\\n        _gemsCatalystsRegistry.batchBurnGems(from, ids, _scaleGemQuantities(gemsQuantities));\\n    }\\n\\n    /// @dev Burn an array of gems.\\n    /// @param from The original signer of the tx.\\n    /// @param gemIds The array of gems to burn.\\n    /// @param numTimes Amount of gems to burn.\\n    function _burnGems(\\n        address from,\\n        uint16[] memory gemIds,\\n        uint32 numTimes\\n    ) internal {\\n        _gemsCatalystsRegistry.burnDifferentGems(from, gemIds, numTimes * gemsFactor);\\n    }\\n\\n    /// @dev Burn a single type of catalyst.\\n    /// @param from The original signer of the tx.\\n    /// @param catalystId The type of catalyst to burn.\\n    /// @param numTimes Amount of catalysts of this type to burn.\\n    function _burnCatalyst(\\n        address from,\\n        uint16 catalystId,\\n        uint32 numTimes\\n    ) internal {\\n        _gemsCatalystsRegistry.burnCatalyst(from, catalystId, numTimes * catalystsFactor);\\n    }\\n\\n    /// @dev Scale up each number in an array of quantities by a factor of gemsUnits.\\n    /// @param quantities The array of numbers to scale.\\n    /// @return scaledQuantities The scaled-up values.\\n    function _scaleGemQuantities(uint256[] memory quantities)\\n        internal\\n        view\\n        returns (uint256[] memory scaledQuantities)\\n    {\\n        scaledQuantities = new uint256[](quantities.length);\\n        for (uint256 i = 0; i < quantities.length; i++) {\\n            scaledQuantities[i] = quantities[i] * gemsFactor * numberOfGemsBurnPerAsset;\\n        }\\n    }\\n\\n    /// @dev Scale up each number in an array of quantities by a factor of gemsUnits.\\n    /// @param quantities The array of numbers to scale.\\n    /// @return scaledQuantities The scaled-up values.\\n    function _scaleCatalystQuantities(uint256[] memory quantities)\\n        internal\\n        view\\n        returns (uint256[] memory scaledQuantities)\\n    {\\n        scaledQuantities = new uint256[](quantities.length);\\n        for (uint256 i = 0; i < quantities.length; i++) {\\n            scaledQuantities[i] = quantities[i] * catalystsFactor * numberOfCatalystBurnPerAsset;\\n        }\\n    }\\n\\n    function _msgSender() internal view override(Context, ERC2771Handler) returns (address sender) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    function _msgData() internal view override(Context, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n\\n    function _mintRequirements(\\n        address from,\\n        uint256 quantity,\\n        address to\\n    ) internal view {\\n        require(to != address(0), \\\"INVALID_TO_ZERO_ADDRESS\\\");\\n        require(_msgSender() == from, \\\"AUTH_ACCESS_DENIED\\\");\\n        require(quantity != 0, \\\"AssetMinter: quantity cannot be 0\\\");\\n    }\\n\\n    function _burnAndMint(\\n        address from,\\n        uint40 packId,\\n        bytes32 metadataHash,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds,\\n        uint256 quantity,\\n        address to,\\n        bytes calldata data\\n    ) internal returns (uint256 assetId) {\\n        _mintRequirements(from, quantity, to);\\n\\n        _burnCatalyst(from, catalystId, numberOfCatalystBurnPerAsset);\\n        _burnGems(from, gemIds, numberOfGemsBurnPerAsset);\\n\\n        assetId = _asset.mint(from, packId, metadataHash, quantity, 0, to, data);\\n        _registry.setCatalyst(assetId, catalystId, gemIds);\\n    }\\n}\\n\",\"keccak256\":\"0x0597e07f9d592803690256571c3db24d7e3f06ace5f1603427e410498659a454\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/Catalyst.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../common/interfaces/IAssetAttributesRegistry.sol\\\";\\nimport \\\"../common/BaseWithStorage/ERC20/ERC20Token.sol\\\";\\nimport \\\"../common/interfaces/IAttributes.sol\\\";\\n\\ncontract Catalyst is ERC20Token, IAttributes {\\n    uint16 public immutable catalystId;\\n    uint8 internal immutable _maxGems;\\n\\n    IAttributes internal _attributes;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address admin,\\n        uint8 maxGems,\\n        uint16 _catalystId,\\n        IAttributes attributes,\\n        address operator\\n    ) ERC20Token(name, symbol, admin, operator) {\\n        _maxGems = maxGems;\\n        catalystId = _catalystId;\\n        _attributes = attributes;\\n    }\\n\\n    /// @notice Used by Admin to update the attributes contract.\\n    /// @param attributes The new attributes contract.\\n    function changeAttributes(IAttributes attributes) external onlyAdmin {\\n        _attributes = attributes;\\n    }\\n\\n    /// @notice Get the value of _maxGems(the max number of gems that can be embeded in this type of catalyst).\\n    /// @return The value of _maxGems.\\n    function getMaxGems() external view returns (uint8) {\\n        return _maxGems;\\n    }\\n\\n    /// @notice Get the attributes for each gem in an asset.\\n    /// See DefaultAttributes.getAttributes for more.\\n    /// @return values An array of values representing the \\\"level\\\" of each gem. ie: Power=14, speed=45, etc...\\n    function getAttributes(uint256 assetId, IAssetAttributesRegistry.GemEvent[] calldata events)\\n        external\\n        view\\n        override\\n        returns (uint32[] memory values)\\n    {\\n        return _attributes.getAttributes(assetId, events);\\n    }\\n}\\n\",\"keccak256\":\"0x4d0519720a7fd25ec0c521fe10d2be1f2a096e4ec20c3b94bbe777b872fe89b8\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/Gem.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../common/BaseWithStorage/ERC20/ERC20Token.sol\\\";\\n\\ncontract Gem is ERC20Token {\\n    uint16 public immutable gemId;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address admin,\\n        uint16 _gemId,\\n        address operator\\n    ) ERC20Token(name, symbol, admin, operator) {\\n        gemId = _gemId;\\n    }\\n}\\n\",\"keccak256\":\"0xbea6af4978fff25c9d3a0b0398d79752e9bb221353e1f499dfcd861f09acb158\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/GemsCatalystsRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\nimport \\\"./Gem.sol\\\";\\nimport \\\"./Catalyst.sol\\\";\\nimport \\\"./interfaces/IGemsCatalystsRegistry.sol\\\";\\nimport \\\"../common/BaseWithStorage/WithSuperOperators.sol\\\";\\nimport \\\"../common/BaseWithStorage/ERC2771Handler.sol\\\";\\n\\n/// @notice Contract managing the Gems and Catalysts\\n/// Each Gems and Catalyst must be registered here.\\n/// Each new Gem get assigned a new id (starting at 1)\\n/// Each new Catalyst get assigned a new id (starting at 1)\\ncontract GemsCatalystsRegistry is WithSuperOperators, ERC2771Handler, IGemsCatalystsRegistry, Ownable {\\n    uint256 private constant MAX_GEMS_AND_CATALYSTS = 256;\\n    uint256 internal constant MAX_UINT256 = ~uint256(0);\\n\\n    Gem[] internal _gems;\\n    Catalyst[] internal _catalysts;\\n\\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\\n\\n    constructor(address admin, address trustedForwarder) {\\n        _admin = admin;\\n        __ERC2771Handler_initialize(trustedForwarder);\\n    }\\n\\n    /// @notice Returns the values for each gem included in a given asset.\\n    /// @param catalystId The catalyst identifier.\\n    /// @param assetId The asset tokenId.\\n    /// @param events An array of GemEvents. Be aware that only gemEvents from the last CatalystApplied event onwards should be used to populate a query. If gemEvents from multiple CatalystApplied events are included the output values will be incorrect.\\n    /// @return values An array of values for each gem present in the asset.\\n    function getAttributes(\\n        uint16 catalystId,\\n        uint256 assetId,\\n        IAssetAttributesRegistry.GemEvent[] calldata events\\n    ) external view override returns (uint32[] memory values) {\\n        Catalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != Catalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        return catalyst.getAttributes(assetId, events);\\n    }\\n\\n    /// @notice Returns the maximum number of gems for a given catalyst\\n    /// @param catalystId catalyst identifier\\n    function getMaxGems(uint16 catalystId) external view override returns (uint8) {\\n        Catalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != Catalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        return catalyst.getMaxGems();\\n    }\\n\\n    /// @notice Burns one gem unit from each gem id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param gemIds list of gems to burn one gem from each\\n    /// @param amount amount units to burn\\n    function burnDifferentGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256 amount\\n    ) external override {\\n        for (uint256 i = 0; i < gemIds.length; i++) {\\n            burnGem(from, gemIds[i], amount);\\n        }\\n    }\\n\\n    /// @notice Burns one catalyst unit from each catalyst id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param catalystIds list of catalysts to burn one catalyst from each\\n    /// @param amount amount to burn\\n    function burnDifferentCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256 amount\\n    ) external override {\\n        for (uint256 i = 0; i < catalystIds.length; i++) {\\n            burnCatalyst(from, catalystIds[i], amount);\\n        }\\n    }\\n\\n    /// @notice Burns few gem units from each gem id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param gemIds list of gems to burn gem units from each\\n    /// @param amounts list of amounts of units to burn\\n    function batchBurnGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256[] calldata amounts\\n    ) public override {\\n        for (uint256 i = 0; i < gemIds.length; i++) {\\n            if (gemIds[i] != 0 && amounts[i] != 0) {\\n                burnGem(from, gemIds[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Burns few catalyst units from each catalyst id on behalf of a beneficiary\\n    /// @param from address of the beneficiary to burn on behalf of\\n    /// @param catalystIds list of catalysts to burn catalyst units from each\\n    /// @param amounts list of amounts of units to burn\\n    function batchBurnCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256[] calldata amounts\\n    ) public override {\\n        for (uint256 i = 0; i < catalystIds.length; i++) {\\n            if (catalystIds[i] != 0 && amounts[i] != 0) {\\n                burnCatalyst(from, catalystIds[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Adds both arrays of gems and catalysts to registry\\n    /// @param gems array of gems to be added\\n    /// @param catalysts array of catalysts to be added\\n    function addGemsAndCatalysts(Gem[] calldata gems, Catalyst[] calldata catalysts) external override {\\n        require(_msgSender() == _admin, \\\"NOT_AUTHORIZED\\\");\\n\\n        require(\\n            uint256(_gems.length + _catalysts.length + gems.length + catalysts.length) < MAX_GEMS_AND_CATALYSTS,\\n            \\\"GemsCatalystsRegistry: Too many gem and catalyst contracts\\\"\\n        );\\n\\n        for (uint256 i = 0; i < gems.length; i++) {\\n            Gem gem = gems[i];\\n            uint16 gemId = gem.gemId();\\n            require(gemId == _gems.length + 1, \\\"GEM_ID_NOT_IN_ORDER\\\");\\n            _gems.push(gem);\\n        }\\n\\n        for (uint256 i = 0; i < catalysts.length; i++) {\\n            Catalyst catalyst = catalysts[i];\\n            uint16 catalystId = catalyst.catalystId();\\n            require(catalystId == _catalysts.length + 1, \\\"CATALYST_ID_NOT_IN_ORDER\\\");\\n            _catalysts.push(catalyst);\\n        }\\n    }\\n\\n    /// @notice Query whether a given gem exists.\\n    /// @param gemId The gem being queried.\\n    /// @return Whether the gem exists.\\n    function doesGemExist(uint16 gemId) external view override returns (bool) {\\n        return getGem(gemId) != Gem(address(0));\\n    }\\n\\n    /// @notice Query whether a giving catalyst exists.\\n    /// @param catalystId The catalyst being queried.\\n    /// @return Whether the catalyst exists.\\n    function doesCatalystExist(uint16 catalystId) external view returns (bool) {\\n        return getCatalyst(catalystId) != Catalyst(address(0));\\n    }\\n\\n    /// @notice Burn a catalyst.\\n    /// @param from The signing address for the tx.\\n    /// @param catalystId The id of the catalyst to burn.\\n    /// @param amount The number of catalyst tokens to burn.\\n    function burnCatalyst(\\n        address from,\\n        uint16 catalystId,\\n        uint256 amount\\n    ) public override {\\n        _checkAuthorization(from);\\n        Catalyst catalyst = getCatalyst(catalystId);\\n        require(catalyst != Catalyst(address(0)), \\\"CATALYST_DOES_NOT_EXIST\\\");\\n        catalyst.burnFor(from, amount);\\n    }\\n\\n    /// @notice Burn a gem.\\n    /// @param from The signing address for the tx.\\n    /// @param gemId The id of the gem to burn.\\n    /// @param amount The number of gem tokens to burn.\\n    function burnGem(\\n        address from,\\n        uint16 gemId,\\n        uint256 amount\\n    ) public override {\\n        _checkAuthorization(from);\\n        Gem gem = getGem(gemId);\\n        require(gem != Gem(address(0)), \\\"GEM_DOES_NOT_EXIST\\\");\\n        gem.burnFor(from, amount);\\n    }\\n\\n    function getNumberOfCatalystContracts() external view returns (uint256 number) {\\n        number = _catalysts.length;\\n    }\\n\\n    function getNumberOfGemContracts() external view returns (uint256 number) {\\n        number = _gems.length;\\n    }\\n\\n    function revokeGemsandCatalystsMaxAllowance() external {\\n        _setGemsAndCatalystsAllowance(0);\\n    }\\n\\n    function setGemsandCatalystsMaxAllowance() external {\\n        _setGemsAndCatalystsAllowance(MAX_UINT256);\\n    }\\n\\n    // //////////////////// INTERNALS ////////////////////\\n\\n    function _setGemsAndCatalystsAllowance(uint256 allowanceValue) internal {\\n        for (uint256 i = 0; i < _gems.length; i++) {\\n            _gems[i].approveFor(_msgSender(), address(this), allowanceValue);\\n        }\\n\\n        for (uint256 i = 0; i < _catalysts.length; i++) {\\n            _catalysts[i].approveFor(_msgSender(), address(this), allowanceValue);\\n        }\\n    }\\n\\n    /// @dev Get the catalyst contract corresponding to the id.\\n    /// @param catalystId The catalyst id to use to retrieve the contract.\\n    /// @return The requested Catalyst contract.\\n    function getCatalyst(uint16 catalystId) internal view returns (Catalyst) {\\n        if (catalystId > 0 && catalystId <= _catalysts.length) {\\n            return _catalysts[catalystId - 1];\\n        } else {\\n            return Catalyst(address(0));\\n        }\\n    }\\n\\n    /// @dev Get the gem contract corresponding to the id.\\n    /// @param gemId The gem id to use to retrieve the contract.\\n    /// @return The requested Gem contract.\\n    function getGem(uint16 gemId) internal view returns (Gem) {\\n        if (gemId > 0 && gemId <= _gems.length) {\\n            return _gems[gemId - 1];\\n        } else {\\n            return Gem(address(0));\\n        }\\n    }\\n\\n    /// @dev verify that the caller is authorized for this function call.\\n    /// @param from The original signer of the transaction.\\n    function _checkAuthorization(address from) internal view {\\n        require(_msgSender() == from || isSuperOperator(_msgSender()), \\\"AUTH_ACCESS_DENIED\\\");\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyOwner {\\n        _trustedForwarder = trustedForwarder;\\n\\n        emit TrustedForwarderChanged(trustedForwarder);\\n    }\\n\\n    function _msgSender() internal view override(Context, ERC2771Handler) returns (address sender) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    function _msgData() internal view override(Context, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xc4e3fff50d93cb9a0def8f930a36102d17b83f946dd9f248ce3d59b68e483499\",\"license\":\"MIT\"},\"src/solc_0.8/catalyst/interfaces/IGemsCatalystsRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../common/interfaces/IAssetAttributesRegistry.sol\\\";\\nimport \\\"../Gem.sol\\\";\\nimport \\\"../Catalyst.sol\\\";\\n\\ninterface IGemsCatalystsRegistry {\\n    function getAttributes(\\n        uint16 catalystId,\\n        uint256 assetId,\\n        IAssetAttributesRegistry.GemEvent[] calldata events\\n    ) external view returns (uint32[] memory values);\\n\\n    function getMaxGems(uint16 catalystId) external view returns (uint8);\\n\\n    function burnDifferentGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256 amount\\n    ) external;\\n\\n    function burnDifferentCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256 amount\\n    ) external;\\n\\n    function batchBurnGems(\\n        address from,\\n        uint16[] calldata gemIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function batchBurnCatalysts(\\n        address from,\\n        uint16[] calldata catalystIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    function addGemsAndCatalysts(Gem[] calldata gems, Catalyst[] calldata catalysts) external;\\n\\n    function doesGemExist(uint16 gemId) external view returns (bool);\\n\\n    function burnCatalyst(\\n        address from,\\n        uint16 catalystId,\\n        uint256 amount\\n    ) external;\\n\\n    function burnGem(\\n        address from,\\n        uint16 gemId,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x684a504006c07a3cd1624d837421b1dad38ceed6666c8c8c277c335c41585965\",\"license\":\"MIT\"},\"src/solc_0.8/common/Base/TheSandbox712.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ncontract TheSandbox712 {\\n    bytes32 internal constant EIP712DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,address verifyingContract)\\\");\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 public immutable _DOMAIN_SEPARATOR;\\n\\n    constructor() {\\n        _DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(EIP712DOMAIN_TYPEHASH, keccak256(\\\"The Sandbox\\\"), keccak256(\\\"1\\\"), address(this))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x4721edc45cad9d6049e9404b178f4f4e93f5871eb5533a0c48fc353ae178d659\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC20/ERC20BaseToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/Context.sol\\\";\\nimport \\\"./extensions/ERC20Internal.sol\\\";\\nimport \\\"../../interfaces/IERC20Extended.sol\\\";\\nimport \\\"../WithSuperOperators.sol\\\";\\n\\nabstract contract ERC20BaseToken is WithSuperOperators, IERC20, IERC20Extended, ERC20Internal, Context {\\n    string internal _name;\\n    string internal _symbol;\\n    address internal immutable _operator;\\n    uint256 internal _totalSupply;\\n    mapping(address => uint256) internal _balances;\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        address admin,\\n        address operator\\n    ) {\\n        _name = tokenName;\\n        _symbol = tokenSymbol;\\n        _admin = admin;\\n        _operator = operator;\\n    }\\n\\n    /// @notice Transfer `amount` tokens to `to`.\\n    /// @param to The recipient address of the tokens being transfered.\\n    /// @param amount The number of tokens being transfered.\\n    /// @return success Whether or not the transfer succeeded.\\n    function transfer(address to, uint256 amount) external override returns (bool success) {\\n        _transfer(_msgSender(), to, amount);\\n        return true;\\n    }\\n\\n    /// @notice Transfer `amount` tokens from `from` to `to`.\\n    /// @param from The origin address  of the tokens being transferred.\\n    /// @param to The recipient address of the tokensbeing  transfered.\\n    /// @param amount The number of tokens transfered.\\n    /// @return success Whether or not the transfer succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external override returns (bool success) {\\n        if (_msgSender() != from && !_superOperators[_msgSender()] && _msgSender() != _operator) {\\n            uint256 currentAllowance = _allowances[from][_msgSender()];\\n            if (currentAllowance != ~uint256(0)) {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                require(currentAllowance >= amount, \\\"NOT_AUTHORIZED_ALLOWANCE\\\");\\n                _allowances[from][_msgSender()] = currentAllowance - amount;\\n            }\\n        }\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /// @notice Burn `amount` tokens.\\n    /// @param amount The number of tokens to burn.\\n    function burn(uint256 amount) external override {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /// @notice Burn `amount` tokens from `owner`.\\n    /// @param from The address whose token to burn.\\n    /// @param amount The number of tokens to burn.\\n    function burnFor(address from, uint256 amount) external override {\\n        _burn(from, amount);\\n    }\\n\\n    /// @notice Approve `spender` to transfer `amount` tokens.\\n    /// @param spender The address to be given rights to transfer.\\n    /// @param amount The number of tokens allowed.\\n    /// @return success Whether or not the call succeeded.\\n    function approve(address spender, uint256 amount) external override returns (bool success) {\\n        _approveFor(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /// @notice Get the name of the token collection.\\n    /// @return The name of the token collection.\\n    function name() external view virtual returns (string memory) {\\n        //added virtual\\n        return _name;\\n    }\\n\\n    /// @notice Get the symbol for the token collection.\\n    /// @return The symbol of the token collection.\\n    function symbol() external view virtual returns (string memory) {\\n        //added virtual\\n        return _symbol;\\n    }\\n\\n    /// @notice Get the total number of tokens in existence.\\n    /// @return The total number of tokens in existence.\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @notice Get the balance of `owner`.\\n    /// @param owner The address to query the balance of.\\n    /// @return The amount owned by `owner`.\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        return _balances[owner];\\n    }\\n\\n    /// @notice Get the allowance of `spender` for `owner`'s tokens.\\n    /// @param owner The address whose token is allowed.\\n    /// @param spender The address allowed to transfer.\\n    /// @return remaining The amount of token `spender` is allowed to transfer on behalf of `owner`.\\n    function allowance(address owner, address spender) external view override returns (uint256 remaining) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /// @notice Get the number of decimals for the token collection.\\n    /// @return The number of decimals.\\n    function decimals() external pure virtual returns (uint8) {\\n        return uint8(18);\\n    }\\n\\n    /// @notice Approve `spender` to transfer `amount` tokens from `owner`.\\n    /// @param owner The address whose token is allowed.\\n    /// @param spender The address to be given rights to transfer.\\n    /// @param amount The number of tokens allowed.\\n    /// @return success Whether or not the call succeeded.\\n    function approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) public override returns (bool success) {\\n        require(_msgSender() == owner || _superOperators[_msgSender()] || _msgSender() == _operator, \\\"NOT_AUTHORIZED\\\");\\n        _approveFor(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /// @notice Increase the allowance for the spender if needed\\n    /// @param owner The address of the owner of the tokens\\n    /// @param spender The address wanting to spend tokens\\n    /// @param amountNeeded The amount requested to spend\\n    /// @return success Whether or not the call succeeded.\\n    function addAllowanceIfNeeded(\\n        address owner,\\n        address spender,\\n        uint256 amountNeeded\\n    ) public returns (bool success) {\\n        require(_msgSender() == owner || _superOperators[_msgSender()] || _msgSender() == _operator, \\\"INVALID_SENDER\\\");\\n        _addAllowanceIfNeeded(owner, spender, amountNeeded);\\n        return true;\\n    }\\n\\n    /// @dev See addAllowanceIfNeeded.\\n    function _addAllowanceIfNeeded(\\n        address owner,\\n        address spender,\\n        uint256 amountNeeded /*(ERC20Internal, ERC20ExecuteExtension, ERC20BasicApproveExtension)*/\\n    ) internal virtual override {\\n        if (amountNeeded > 0 && !isSuperOperator(spender) && spender != _operator) {\\n            uint256 currentAllowance = _allowances[owner][spender];\\n            if (currentAllowance < amountNeeded) {\\n                _approveFor(owner, spender, amountNeeded);\\n            }\\n        }\\n    }\\n\\n    /// @dev See approveFor.\\n    function _approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount /*(ERC20BasicApproveExtension, ERC20Internal)*/\\n    ) internal virtual override {\\n        require(owner != address(0) && spender != address(0), \\\"INVALID_OWNER_||_SPENDER\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /// @dev See transfer.\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount /*(ERC20Internal, ERC20ExecuteExtension)*/\\n    ) internal virtual override {\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(to != address(this), \\\"NOT_TO_THIS\\\");\\n        uint256 currentBalance = _balances[from];\\n        require(currentBalance >= amount, \\\"INSUFFICIENT_FUNDS\\\");\\n        _balances[from] = currentBalance - amount;\\n        _balances[to] += amount;\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /// @dev Mint tokens for a recipient.\\n    /// @param to The recipient address.\\n    /// @param amount The number of token to mint.\\n    function _mint(address to, uint256 amount) internal {\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(amount > 0, \\\"MINT_O_TOKENS\\\");\\n        uint256 currentTotalSupply = _totalSupply;\\n        uint256 newTotalSupply = currentTotalSupply + amount;\\n        require(newTotalSupply > currentTotalSupply, \\\"OVERFLOW\\\");\\n        _totalSupply = newTotalSupply;\\n        _balances[to] += amount;\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    /// @dev Burn tokens from an address.\\n    /// @param from The address whose tokens to burn.\\n    /// @param amount The number of token to burn.\\n    function _burn(address from, uint256 amount) internal {\\n        require(amount > 0, \\\"BURN_O_TOKENS\\\");\\n        if (_msgSender() != from && !_superOperators[_msgSender()] && _msgSender() != _operator) {\\n            uint256 currentAllowance = _allowances[from][_msgSender()];\\n            if (currentAllowance != ~uint256(0)) {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                require(currentAllowance >= amount, \\\"INSUFFICIENT_ALLOWANCE\\\");\\n                _allowances[from][_msgSender()] = currentAllowance - amount;\\n            }\\n        }\\n\\n        uint256 currentBalance = _balances[from];\\n        require(currentBalance >= amount, \\\"INSUFFICIENT_FUNDS\\\");\\n        _balances[from] = currentBalance - amount;\\n        _totalSupply -= amount;\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x21abee15baa9d3ba0016b24e3dce6eb47020edc57cfcc92eb24bc554939eaad9\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC20/ERC20Token.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./ERC20BaseToken.sol\\\";\\nimport \\\"./extensions/ERC20BasicApproveExtension.sol\\\";\\nimport \\\"../WithPermit.sol\\\";\\nimport \\\"../ERC677/extensions/ERC677Extension.sol\\\";\\nimport \\\"../../interfaces/IERC677Receiver.sol\\\";\\n\\ncontract ERC20Token is ERC20BasicApproveExtension, ERC677Extension, WithPermit, ERC20BaseToken {\\n    // /////////////////// CONSTRUCTOR ////////////////////\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address admin,\\n        address operator\\n    )\\n        ERC20BaseToken(name, symbol, admin, operator) // solhint-disable-next-line no-empty-blocks\\n    {}\\n\\n    function mint(address to, uint256 amount) external onlyAdmin {\\n        _mint(to, amount);\\n    }\\n\\n    /// @notice Function to permit the expenditure of ERC20 token by a nominated spender\\n    /// @param owner The owner of the ERC20 tokens\\n    /// @param spender The nominated spender of the ERC20 tokens\\n    /// @param value The value (allowance) of the ERC20 tokens that the nominated spender will be allowed to spend\\n    /// @param deadline The deadline for granting permission to the spender\\n    /// @param v The final 1 byte of signature\\n    /// @param r The first 32 bytes of signature\\n    /// @param s The second 32 bytes of signature\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public override {\\n        checkApproveFor(owner, spender, value, deadline, v, r, s);\\n        _approveFor(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xafef8c26511c0f31c959b85808ea1bb6e9473ffb06c5875635af54823732b657\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC20/extensions/ERC20BasicApproveExtension.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/Context.sol\\\";\\nimport \\\"./ERC20Internal.sol\\\";\\nimport \\\"../../../Libraries/BytesUtil.sol\\\";\\n\\nabstract contract ERC20BasicApproveExtension is ERC20Internal, Context {\\n    /// @notice Approve `target` to spend `amount` and call it with data.\\n    /// @param target The address to be given rights to transfer and destination of the call.\\n    /// @param amount The number of tokens allowed.\\n    /// @param data The bytes for the call.\\n    /// @return The data of the call.\\n    function approveAndCall(\\n        address target,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external payable returns (bytes memory) {\\n        require(BytesUtil.doFirstParamEqualsAddress(data, _msgSender()), \\\"FIRST_PARAM_NOT_SENDER\\\");\\n\\n        _approveFor(_msgSender(), target, amount);\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returnData) = target.call{value: msg.value}(data);\\n        require(success, string(returnData));\\n        return returnData;\\n    }\\n\\n    /// @notice Temporarily approve `target` to spend `amount` and call it with data.\\n    /// Previous approvals remains unchanged.\\n    /// @param target The destination of the call, allowed to spend the amount specified\\n    /// @param amount The number of tokens allowed to spend.\\n    /// @param data The bytes for the call.\\n    /// @return The data of the call.\\n    function paidCall(\\n        address target,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external payable returns (bytes memory) {\\n        require(BytesUtil.doFirstParamEqualsAddress(data, _msgSender()), \\\"FIRST_PARAM_NOT_SENDER\\\");\\n\\n        if (amount > 0) {\\n            _addAllowanceIfNeeded(_msgSender(), target, amount);\\n        }\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returnData) = target.call{value: msg.value}(data);\\n        require(success, string(returnData));\\n\\n        return returnData;\\n    }\\n}\\n\",\"keccak256\":\"0x6c61a828b720af37167a9ca7f914a5ba3fd02d6846ac2304f1a844f12032ba2a\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC20/extensions/ERC20Internal.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nabstract contract ERC20Internal {\\n    function _approveFor(\\n        address owner,\\n        address target,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function _addAllowanceIfNeeded(\\n        address owner,\\n        address spender,\\n        uint256 amountNeeded\\n    ) internal virtual;\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x016db35dc3c8fad3cedc08f3152e3b90b7adb4d961c5ac08c03106e18535d10e\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down.\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\n\\ncontract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b78a86fc419fc78e618cb6c7892c2c66c4d4a9cac7848d33d91d68aab755caa\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC677/extensions/ERC677Extension.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../../../interfaces/IERC677.sol\\\";\\nimport \\\"../../../interfaces/IERC677Receiver.sol\\\";\\nimport \\\"../../ERC20/extensions/ERC20Internal.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/utils/Address.sol\\\";\\n\\nabstract contract ERC677Extension is ERC20Internal, IERC677 {\\n    using Address for address;\\n\\n    /// @notice Transfers tokens to an address with _data if the recipient is a contact.\\n    /// @param _to The address to transfer to.\\n    /// @param _value The amount to be transferred.\\n    /// @param _data The extra data to be passed to the receiving contract.\\n    function transferAndCall(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external override returns (bool success) {\\n        _transfer(msg.sender, _to, _value);\\n        if (_to.isContract()) {\\n            IERC677Receiver receiver = IERC677Receiver(_to);\\n            receiver.onTokenTransfer(msg.sender, _value, _data);\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xb3182f6f36b12aaa9c11c862835436c0ebdd6e578f7b73c30a1c52a94be62bad\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithAdmin.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\ncontract WithAdmin {\\n    address internal _admin;\\n\\n    /// @dev Emits when the contract administrator is changed.\\n    /// @param oldAdmin The address of the previous administrator.\\n    /// @param newAdmin The address of the new administrator.\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /// @dev Get the current administrator of this contract.\\n    /// @return The current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"ADMIN_ACCESS_DENIED\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n}\\n\",\"keccak256\":\"0xf2ce40f1b23052a50a5b2d5ad61fbc04ab6c9fb2e5b1dba17ccddf4507e4649f\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithPermit.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../common/interfaces/IERC20Extended.sol\\\";\\nimport \\\"../../common/Base/TheSandbox712.sol\\\";\\n\\n/// @title Permit contract\\n/// @notice This contract manages approvals of SAND via signature\\nabstract contract WithPermit is TheSandbox712, IERC20Permit {\\n    mapping(address => uint256) public _nonces;\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @notice Function to permit the expenditure of ERC20 token by a nominated spender\\n    /// @param owner The owner of the ERC20 tokens\\n    /// @param spender The nominated spender of the ERC20 tokens\\n    /// @param value The value (allowance) of the ERC20 tokens that the nominated spender will be allowed to spend\\n    /// @param deadline The deadline for granting permission to the spender\\n    /// @param v The final 1 byte of signature\\n    /// @param r The first 32 bytes of signature\\n    /// @param s The second 32 bytes of signature\\n    function checkApproveFor(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        require(deadline >= block.timestamp, \\\"PAST_DEADLINE\\\");\\n        bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    _DOMAIN_SEPARATOR,\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _nonces[owner]++, deadline))\\n                )\\n            );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNATURE\\\");\\n    }\\n\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _DOMAIN_SEPARATOR;\\n    }\\n\\n    function nonces(address owner) external view override returns (uint256) {\\n        return _nonces[owner];\\n    }\\n}\\n\",\"keccak256\":\"0xae30f1345fee6d0e3bb94859773639068cba0bc2c4bfceb3aa75986150eeb5ba\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithSuperOperators.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport \\\"./WithAdmin.sol\\\";\\n\\ncontract WithSuperOperators is WithAdmin {\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address superOperator, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external {\\n        require(msg.sender == _admin, \\\"only admin is allowed to add super operators\\\");\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0xa0d9b0e08ccae5e6b1f56e41ef750a68686d8958bc398369ac283aa4440f87ab\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/BytesUtil.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nlibrary BytesUtil {\\n    uint256 private constant DATA_MIN_LENGTH = 68;\\n\\n    /// @dev Check if the data == _address.\\n    /// @param data The bytes passed to the function.\\n    /// @param _address The address to compare to.\\n    /// @return Whether the first param == _address.\\n    function doFirstParamEqualsAddress(bytes memory data, address _address) internal pure returns (bool) {\\n        if (data.length < DATA_MIN_LENGTH) {\\n            return false;\\n        }\\n        uint256 value;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            value := mload(add(data, 36))\\n        }\\n        return value == uint256(uint160(_address));\\n    }\\n}\\n\",\"keccak256\":\"0x3a7bfc1ad1fb8d784691a344ba752ca5591136bec45c63065256a9332ddd5cee\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetAttributesRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAssetAttributesRegistry {\\n    struct GemEvent {\\n        uint16[] gemIds;\\n        bytes32 blockHash;\\n    }\\n\\n    struct AssetGemsCatalystData {\\n        uint256 assetId;\\n        uint16 catalystContractId;\\n        uint16[] gemContractIds;\\n    }\\n\\n    function getRecord(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            bool exists,\\n            uint16 catalystId,\\n            uint16[] memory gemIds\\n        );\\n\\n    function getAttributes(uint256 assetId, GemEvent[] calldata events) external view returns (uint32[] memory values);\\n\\n    function setCatalyst(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external;\\n\\n    function setCatalystWhenDepositOnOtherLayer(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external;\\n\\n    function setCatalystWithBlockNumber(\\n        uint256 assetId,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds,\\n        uint64 blockNumber\\n    ) external;\\n\\n    function addGems(uint256 assetId, uint16[] calldata gemIds) external;\\n\\n    function setMigrationContract(address _migrationContract) external;\\n\\n    function getCatalystRegistry() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7f12fa565160d7598f702dcae0e511943be9c6eaa4dc338f3439a36f0a6086c9\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetMinter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAssetMinter {\\n    struct AssetData {\\n        uint16[] gemIds;\\n        uint16 catalystId;\\n    }\\n\\n    // use only to fix stack too deep\\n    struct MintData {\\n        address from;\\n        address to;\\n        uint40 packId;\\n        bytes32 metadataHash;\\n        bytes data;\\n    }\\n\\n    function mintWithoutCatalyst(MintData calldata mintData, uint16 typeAsset1Based) external returns (uint256 assetId);\\n\\n    function mintWithCatalyst(\\n        MintData calldata mintData,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds\\n    ) external returns (uint256 assetId);\\n\\n    function mintMultipleWithCatalyst(MintData calldata mintData, AssetData[] memory assets)\\n        external\\n        returns (uint256[] memory assetIds);\\n\\n    function mintCustomNumberWithCatalyst(\\n        MintData calldata mintData,\\n        uint16 catalystId,\\n        uint16[] calldata gemIds,\\n        uint256 quantity\\n    ) external returns (uint256 assetId);\\n\\n    function addOrReplaceQuantitiyByCatalystId(uint16 catalystId, uint256 newQuantity) external;\\n\\n    function addOrReplaceAssetTypeQuantity(uint16 index1Based, uint256 newQuantity) external;\\n\\n    function setNumberOfGemsBurnPerAsset(uint32 newQuantity) external;\\n\\n    function setNumberOfCatalystsBurnPerAsset(uint32 newQuantity) external;\\n\\n    function setGemsFactor(uint256 newQuantity) external;\\n\\n    function setCatalystsFactor(uint256 newQuantity) external;\\n\\n    function setCustomMintingAllowance(address addressToModify, bool isAddressAllowed) external;\\n}\\n\",\"keccak256\":\"0xe0ae407f47592393729e7c95f6dce8978fde33adc6acde295519506d699a9934\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\ninterface IAssetToken {\\n    function mint(\\n        address creator,\\n        uint40 packId,\\n        bytes32 hash,\\n        uint256 supply,\\n        uint8 rarity,\\n        address owner,\\n        bytes calldata data\\n    ) external returns (uint256 id);\\n\\n    function mintMultiple(\\n        address creator,\\n        uint40 packId,\\n        bytes32 hash,\\n        uint256[] calldata supplies,\\n        bytes calldata rarityPack,\\n        address owner,\\n        bytes calldata data\\n    ) external returns (uint256[] memory ids);\\n\\n    // fails on non-NFT or nft who do not have collection (was a mistake)\\n    function collectionOf(uint256 id) external view returns (uint256);\\n\\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\\n\\n    // return true for Non-NFT ERC1155 tokens which exists\\n    function isCollection(uint256 id) external view returns (bool);\\n\\n    function collectionIndexOf(uint256 id) external view returns (uint256);\\n\\n    function extractERC721From(\\n        address sender,\\n        uint256 id,\\n        address to\\n    ) external returns (uint256 newId);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n\\n    function isSuperOperator(address who) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb031abbf5d18794cc8f466bda0d029f61d507ac08be2a14aa57a704e3c7d6563\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAttributes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IAssetAttributesRegistry.sol\\\";\\n\\ninterface IAttributes {\\n    function getAttributes(uint256 assetId, IAssetAttributesRegistry.GemEvent[] calldata events)\\n        external\\n        view\\n        returns (uint32[] memory values);\\n}\\n\",\"keccak256\":\"0x4cbdba9ad3fae8334fe614ae28fb3136454eada28f13f911ffce9c8c701c56a7\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\n/// @dev see https://eips.ethereum.org/EIPS/eip-20\\ninterface IERC20 {\\n    /// @notice emitted when tokens are transfered from one address to another.\\n    /// @param from address from which the token are transfered from (zero means tokens are minted).\\n    /// @param to destination address which the token are transfered to (zero means tokens are burnt).\\n    /// @param value amount of tokens transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice emitted when owner grant transfer rights to another address\\n    /// @param owner address allowing its token to be transferred.\\n    /// @param spender address allowed to spend on behalf of `owner`\\n    /// @param value amount of tokens allowed.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice return the current total amount of tokens owned by all holders.\\n    /// @return supply total number of tokens held.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice return the number of tokens held by a particular address.\\n    /// @param who address being queried.\\n    /// @return balance number of token held by that address.\\n    function balanceOf(address who) external view returns (uint256 balance);\\n\\n    /// @notice transfer tokens to a specific address.\\n    /// @param to destination address receiving the tokens.\\n    /// @param value number of tokens to transfer.\\n    /// @return success whether the transfer succeeded.\\n    function transfer(address to, uint256 value) external returns (bool success);\\n\\n    /// @notice transfer tokens from one address to another.\\n    /// @param from address tokens will be sent from.\\n    /// @param to destination address receiving the tokens.\\n    /// @param value number of tokens to transfer.\\n    /// @return success whether the transfer succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool success);\\n\\n    /// @notice approve an address to spend on your behalf.\\n    /// @param spender address entitled to transfer on your behalf.\\n    /// @param value amount allowed to be transfered.\\n    /// @param success whether the approval succeeded.\\n    function approve(address spender, uint256 value) external returns (bool success);\\n\\n    /// @notice return the current allowance for a particular owner/spender pair.\\n    /// @param owner address allowing spender.\\n    /// @param spender address allowed to spend.\\n    /// @return amount number of tokens `spender` can spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x9fe745d44fdcd7987682221d68b7a66d0784fbd81ae1d4e43a6c766347733a96\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Extended is IERC20 {\\n    function burnFor(address from, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function approveFor(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xf02074902aff81db019aac8808c524d2ab77e1cb216f5327992ed7db95fee919\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC677.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface IERC677 {\\n    function transferAndCall(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool success);\\n    //TODO: decide whether we use that event, as it collides with ERC20 Transfer event\\n    //event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\\n}\\n\",\"keccak256\":\"0xc262cf7c3df1aa7253e228c53e74c78309fac149f73502b1c75e1f92fccb74ae\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC677Receiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface IERC677Receiver {\\n    function onTokenTransfer(\\n        address _sender,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbcb1803cae41333e55f92df0fd392afe073f5ef455ec482df0b6062cecb03720\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040526001805463ffffffff60c01b1963ffffffff60a01b19909116600160a01b1716600160c01b179055670de0b6b3a764000060028190556003553480156200004a57600080fd5b5060405162003243380380620032438339810160408190526200006d9162000519565b600062000079620002f9565b600180546001600160a01b0319166001600160a01b0383169081179091556040519192509060009060008051602062003223833981519152908290a3506001600160601b0319606088811b821660805287811b821660a05286901b1660c052620000e38462000316565b600080546001600160a01b0319166001600160a01b03851617905560008251116200017b5760405162461bcd60e51b815260206004820152603660248201527f41737365744d696e7465723a207175616e7469746965734279436174616c797360448201527f744944206c656e6774682063616e6e6f7420626520300000000000000000000060648201526084015b60405180910390fd5b6000815111620001f45760405162461bcd60e51b815260206004820152603760248201527f41737365744d696e7465723a207175616e74697469657342794173736574547960448201527f70654964206c656e6774682063616e6e6f742062652030000000000000000000606482015260840162000172565b60005b82518161ffff1610156200026f57828161ffff16815181106200022a57634e487b7160e01b600052603260045260246000fd5b602002602001015160046000836001620002459190620005ec565b61ffff16815260208101919091526040016000205580620002668162000615565b915050620001f7565b5060005b81518161ffff161015620002eb57818161ffff1681518110620002a657634e487b7160e01b600052603260045260246000fd5b602002602001015160056000836001620002c19190620005ec565b61ffff16815260208101919091526040016000205580620002e28162000615565b91505062000273565b50505050505050506200067f565b6000620003106200044660201b620011f41760201c565b90505b90565b62000320620002f9565b6001600160a01b03166200033c6001546001600160a01b031690565b6001600160a01b031614620003945760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000172565b6001600160a01b038116620003fb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000172565b6001546040516001600160a01b038084169216906000805160206200322383398151915290600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b03163314156200046b575060131936013560601c62000313565b503362000313565b600082601f83011262000484578081fd5b815160206001600160401b0380831115620004a357620004a362000650565b818302604051601f19603f83011681018181108482111715620004ca57620004ca62000650565b60405284815283810192508684018288018501891015620004e9578687fd5b8692505b858310156200050d578051845292840192600192909201918401620004ed565b50979650505050505050565b600080600080600080600060e0888a03121562000534578283fd5b8751620005418162000666565b6020890151909750620005548162000666565b6040890151909650620005678162000666565b60608901519095506200057a8162000666565b60808901519094506200058d8162000666565b60a08901519093506001600160401b0380821115620005aa578384fd5b620005b88b838c0162000473565b935060c08a0151915080821115620005ce578283fd5b50620005dd8a828b0162000473565b91505092959891949750929550565b600061ffff8083168185168083038211156200060c576200060c6200063a565b01949350505050565b600061ffff808316818114156200063057620006306200063a565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200067c57600080fd5b50565b60805160601c60a05160601c60c05160601c612b2c620006f7600039600081816113d7015281816114bc015281816118ed01528181611d9501528181611edf01528181611f190152611fb201526000818161073e015281816109770152611b94015260008181610b0a0152611c5d0152612b2c6000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c80638da5cb5b116100e3578063d04213a31161008c578063ef03d96e11610066578063ef03d96e146103c1578063f2fde38b146103d4578063f8efa8d0146103e757610198565b8063d04213a314610378578063d49d1b981461039b578063da742228146103ae57610198565b8063b7215597116100bd578063b721559714610341578063bfb87f0a14610354578063ce1b815f1461036757610198565b80638da5cb5b146102fb578063a8338df11461031b578063b50aae1a1461032e57610198565b80635a1dce1f11610145578063759688091161011f57806375968809146102bf5780637f2e1814146102c857806384c4fb3a146102db57610198565b80635a1dce1f1461027857806360fd0e0e146102a4578063715018a6146102b757610198565b806337a694461161017657806337a69446146101f85780633a91fda914610235578063572b6c051461025557610198565b8063048b33be1461019d57806307b7810c146101b25780630854f447146101c5575b600080fd5b6101b06101ab36600461269b565b6103f0565b005b6101b06101c03660046122ab565b6104b3565b6101e56101d3366004612628565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b6001546102209074010000000000000000000000000000000000000000900463ffffffff1681565b60405163ffffffff90911681526020016101ef565b6101e5610243366004612628565b60056020526000908152604090205481565b61026861026336600461228a565b610594565b60405190151581526020016101ef565b600154610220907801000000000000000000000000000000000000000000000000900463ffffffff1681565b6101b06102b2366004612642565b6105ab565b6101b0610631565b6101e560025481565b6101e56102d63660046124ec565b6106f7565b6102ee6102e936600461237a565b610822565b6040516101ef91906128d0565b610303610c22565b6040516001600160a01b0390911681526020016101ef565b6101b061032936600461269b565b610c32565b6101e561033c3660046125ac565b610cf4565b6101b061034f36600461266b565b610e1b565b6101e5610362366004612538565b610e8f565b6000546001600160a01b0316610303565b61026861038636600461228a565b60066020526000908152604090205460ff1681565b6101b06103a9366004612642565b610ee2565b6101b06103bc36600461228a565b610f68565b6101b06103cf36600461266b565b61102c565b6101b06103e236600461228a565b6110a0565b6101e560035481565b6103f8611238565b6001600160a01b0316610409610c22565b6001600160a01b0316146104645760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001805463ffffffff90921674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b6104bb611238565b6001600160a01b03166104cc610c22565b6001600160a01b0316146105225760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b6001600160a01b03821660008181526006602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917fb14c967f784f0ac8e6e62b391fbd48f1be9e9d64871ca240b416da9bbb9a9fb491a35050565b6000546001600160a01b038281169116145b919050565b6105b3611238565b6001600160a01b03166105c4610c22565b6001600160a01b03161461061a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b61ffff909116600090815260046020526040902055565b610639611238565b6001600160a01b031661064a610c22565b6001600160a01b0316146106a05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36001805473ffffffffffffffffffffffffffffffffffffffff19169055565b61ffff81166000908152600560209081526040822054906107349061071e9086018661228a565b8261072f604088016020890161228a565b611247565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c50a4eb9610770602087018761228a565b61078060608801604089016126bf565b606088013585600061079860408c0160208d0161228a565b6107a560808d018d61296d565b6040518963ffffffff1660e01b81526004016107c8989796959493929190612873565b602060405180830381600087803b1580156107e257600080fd5b505af11580156107f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081a9190612683565b949350505050565b60608151600014156108765760405162461bcd60e51b815260206004820152601060248201527f494e56414c49445f305f41535345545300000000000000000000000000000000604482015260640161045b565b6000610888604085016020860161228a565b6001600160a01b031614156108df5760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f544f5f5a45524f5f41444452455353000000000000000000604482015260640161045b565b6108ec602084018461228a565b6001600160a01b03166108fd611238565b6001600160a01b0316146109535760405162461bcd60e51b815260206004820152601260248201527f415554485f4143434553535f44454e4945440000000000000000000000000000604482015260640161045b565b600061096b610965602086018661228a565b8461137d565b90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f0bc00d86109a9602087018761228a565b6109b960608801604089016126bf565b6060880135856109cf60408b0160208c0161228a565b6109dc60808c018c61296d565b6040518863ffffffff1660e01b81526004016109fe9796959493929190612802565b600060405180830381600087803b158015610a1857600080fd5b505af1158015610a2c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a5491908101906122e5565b915060005b8251811015610c1a57838181518110610a8257634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff1660001415610b085760405162461bcd60e51b815260206004820152602260248201527f41737365744d696e7465723a20636174616c79737449442063616e277420626560448201527f2030000000000000000000000000000000000000000000000000000000000000606482015260840161045b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663676181bf848381518110610b5757634e487b7160e01b600052603260045260246000fd5b6020026020010151868481518110610b7f57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151878581518110610bab57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516040518463ffffffff1660e01b8152600401610bd593929190612941565b600060405180830381600087803b158015610bef57600080fd5b505af1158015610c03573d6000803e3d6000fd5b505050508080610c1290612aaf565b915050610a59565b505092915050565b6001546001600160a01b03165b90565b610c3a611238565b6001600160a01b0316610c4b610c22565b6001600160a01b031614610ca15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b6001805463ffffffff9092167801000000000000000000000000000000000000000000000000027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b600060066000610d02611238565b6001600160a01b0316815260208101919091526040016000205460ff16151560011480610d4e5750610d32610c22565b6001600160a01b0316610d43611238565b6001600160a01b0316145b610dc05760405162461bcd60e51b815260206004820152602960248201527f4173736574794d696e7465723a20637573746f6d206d696e74696e6720756e6160448201527f7574686f72697a65640000000000000000000000000000000000000000000000606482015260840161045b565b610e11610dd0602088018861228a565b610de06060890160408a016126bf565b8860600135888888888d6020016020810190610dfc919061228a565b8e8060800190610e0c919061296d565b611adb565b9695505050505050565b610e23611238565b6001600160a01b0316610e34610c22565b6001600160a01b031614610e8a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b600355565b61ffff8316600090815260046020908152604082205490610e1190610eb69088018861228a565b610ec66060890160408a016126bf565b8860600135888888878d6020016020810190610dfc919061228a565b610eea611238565b6001600160a01b0316610efb610c22565b6001600160a01b031614610f515760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b61ffff909116600090815260056020526040902055565b610f70611238565b6001600160a01b0316610f81610c22565b6001600160a01b031614610fd75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038316908117825560405190917f871264f4293af7d2865ae7eae628b228f4991c57cb45b39c99f0b774ebe2901891a250565b611034611238565b6001600160a01b0316611045610c22565b6001600160a01b03161461109b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b600255565b6110a8611238565b6001600160a01b03166110b9610c22565b6001600160a01b03161461110f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b6001600160a01b03811661118b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161045b565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006111ff33610594565b1561123157507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610c2f565b5033610c2f565b60006112426111f4565b905090565b6001600160a01b03811661129d5760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f544f5f5a45524f5f41444452455353000000000000000000604482015260640161045b565b826001600160a01b03166112af611238565b6001600160a01b0316146113055760405162461bcd60e51b815260206004820152601260248201527f415554485f4143434553535f44454e4945440000000000000000000000000000604482015260640161045b565b816113785760405162461bcd60e51b815260206004820152602160248201527f41737365744d696e7465723a207175616e746974792063616e6e6f742062652060448201527f3000000000000000000000000000000000000000000000000000000000000000606482015260840161045b565b505050565b6060815167ffffffffffffffff8111156113a757634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156113d0578160200160208202803683370190505b50905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663645c5f9e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561142e57600080fd5b505afa158015611442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114669190612683565b67ffffffffffffffff81111561148c57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156114b5578160200160208202803683370190505b50905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c4d91ed6040518163ffffffff1660e01b815260040160206040518083038186803b15801561151357600080fd5b505afa158015611527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154b9190612683565b67ffffffffffffffff81111561157157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561159a578160200160208202803683370190505b50905060005b8451811015611ac65760008582815181106115cb57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff161180156116185750825185828151811061160557634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff1611155b6116895760405162461bcd60e51b8152602060048201526024808201527f41737365744d696e7465723a20636174616c7973744944206f7574206f66206260448201527f6f756e6400000000000000000000000000000000000000000000000000000000606482015260840161045b565b8260018683815181106116ac57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516116c29190612a6a565b61ffff16815181106116e457634e487b7160e01b600052603260045260246000fd5b6020026020010180518091906116f990612aaf565b90525060005b85828151811061171f57634e487b7160e01b600052603260045260246000fd5b602002602001015160000151518110156118e857600086838151811061175557634e487b7160e01b600052603260045260246000fd5b602002602001015160000151828151811061178057634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff161180156117f0575082518683815181106117b657634e487b7160e01b600052603260045260246000fd5b60200260200101516000015182815181106117e157634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1611155b61183c5760405162461bcd60e51b815260206004820152601f60248201527f41737365744d696e7465723a2067656d4964206f7574206f6620626f756e6400604482015260640161045b565b82600187848151811061185f57634e487b7160e01b600052603260045260246000fd5b602002602001015160000151838151811061188a57634e487b7160e01b600052603260045260246000fd5b602002602001015161189c9190612a6a565b61ffff16815181106118be57634e487b7160e01b600052603260045260246000fd5b6020026020010180518091906118d390612aaf565b905250806118e081612aaf565b9150506116ff565b5060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166378bc8a1987848151811061193a57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040518263ffffffff1660e01b815260040161196c919061ffff91909116815260200190565b60206040518083038186803b15801561198457600080fd5b505afa158015611998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bc91906126e4565b60ff1690508061ffff168683815181106119e657634e487b7160e01b600052603260045260246000fd5b602002602001015160000151511115611a415760405162461bcd60e51b815260206004820152601a60248201527f41737365744d696e7465723a20746f6f206d616e792067656d73000000000000604482015260640161045b565b60046000878481518110611a6557634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff1661ffff16815260200190815260200160002054858381518110611aa857634e487b7160e01b600052603260045260246000fd5b60209081029190910101525080611abe81612aaf565b9150506115a0565b50611ad18583611cd8565b610c1a8582611e22565b6000611ae88b8686611247565b611b058b89600160189054906101000a900463ffffffff16611f17565b611b648b8888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060015474010000000000000000000000000000000000000000900463ffffffff169150611fb09050565b6040517fc50a4eb90000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c50a4eb990611bd8908e908e908e908b906000908c908c908c90600401612873565b602060405180830381600087803b158015611bf257600080fd5b505af1158015611c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2a9190612683565b6040517f676181bf0000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063676181bf90611c989084908c908c908c906004016128e3565b600060405180830381600087803b158015611cb257600080fd5b505af1158015611cc6573d6000803e3d6000fd5b505050509a9950505050505050505050565b6000815167ffffffffffffffff811115611d0257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d2b578160200160208202803683370190505b50905060005b81518161ffff161015611d9257611d49816001612a25565b828261ffff1681518110611d6d57634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015280611d8a81612a8d565b915050611d31565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166352eea0308483611dcd86612013565b6040518463ffffffff1660e01b8152600401611deb9392919061279c565b600060405180830381600087803b158015611e0557600080fd5b505af1158015611e19573d6000803e3d6000fd5b50505050505050565b6000815167ffffffffffffffff811115611e4c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611e75578160200160208202803683370190505b50905060005b81518161ffff161015611edc57611e93816001612a25565b828261ffff1681518110611eb757634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015280611ed481612a8d565b915050611e7b565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663362e7e8c8483611dcd86612110565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632a6a645184846003548563ffffffff16611f5c9190612a4b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03909316600484015261ffff90911660248301526044820152606401611deb565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636d91683984846002548563ffffffff16611ff59190612a4b565b6040518463ffffffff1660e01b8152600401611deb939291906127d0565b6060815167ffffffffffffffff81111561203d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612066578160200160208202803683370190505b50905060005b825181101561210a57600160189054906101000a900463ffffffff1663ffffffff166003548483815181106120b157634e487b7160e01b600052603260045260246000fd5b60200260200101516120c39190612a4b565b6120cd9190612a4b565b8282815181106120ed57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061210281612aaf565b91505061206c565b50919050565b6060815167ffffffffffffffff81111561213a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612163578160200160208202803683370190505b50905060005b825181101561210a57600160149054906101000a900463ffffffff1663ffffffff166002548483815181106121ae57634e487b7160e01b600052603260045260246000fd5b60200260200101516121c09190612a4b565b6121ca9190612a4b565b8282815181106121ea57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806121ff81612aaf565b915050612169565b80356001600160a01b03811681146105a657600080fd5b60008083601f84011261222f578182fd5b50813567ffffffffffffffff811115612246578182fd5b602083019150836020808302850101111561226057600080fd5b9250929050565b600060a0828403121561210a578081fd5b803561ffff811681146105a657600080fd5b60006020828403121561229b578081fd5b6122a482612207565b9392505050565b600080604083850312156122bd578081fd5b6122c683612207565b9150602083013580151581146122da578182fd5b809150509250929050565b600060208083850312156122f7578182fd5b825167ffffffffffffffff81111561230d578283fd5b8301601f8101851361231d578283fd5b805161233061232b82612a01565b6129d0565b818152838101908385018584028501860189101561234c578687fd5b8694505b8385101561236e578051835260019490940193918501918501612350565b50979650505050505050565b6000806040838503121561238c578182fd5b67ffffffffffffffff833511156123a1578182fd5b6123ae8484358501612267565b915067ffffffffffffffff602084013511156123c8578081fd5b6020830135830184601f8201126123dd578182fd5b6123ea61232b8235612a01565b81358152602080820191908301845b84358110156124de57813585016040601f19828c03011215612419578687fd5b61242360406129d0565b67ffffffffffffffff6020830135111561243b578788fd5b602082013582018b603f820112612450578889fd5b602081013561246161232b82612a01565b80828252602082019150604084018f6040602086028701011115612483578c8dfd5b8c94505b838510156124ad5761249881612278565b83526001949094019360209283019201612487565b508452506124c091505060408301612278565b602082810191909152908652948501949290920191506001016123f9565b509497909650945050505050565b600080604083850312156124fe578182fd5b823567ffffffffffffffff811115612514578283fd5b61252085828601612267565b92505061252f60208401612278565b90509250929050565b6000806000806060858703121561254d578182fd5b843567ffffffffffffffff80821115612564578384fd5b61257088838901612267565b955061257e60208801612278565b94506040870135915080821115612593578384fd5b506125a08782880161221e565b95989497509550505050565b6000806000806000608086880312156125c3578081fd5b853567ffffffffffffffff808211156125da578283fd5b6125e689838a01612267565b96506125f460208901612278565b95506040880135915080821115612609578283fd5b506126168882890161221e565b96999598509660600135949350505050565b600060208284031215612639578081fd5b6122a482612278565b60008060408385031215612654578182fd5b61265d83612278565b946020939093013593505050565b60006020828403121561267c578081fd5b5035919050565b600060208284031215612694578081fd5b5051919050565b6000602082840312156126ac578081fd5b813563ffffffff811681146122a4578182fd5b6000602082840312156126d0578081fd5b813564ffffffffff811681146122a4578182fd5b6000602082840312156126f5578081fd5b815160ff811681146122a4578182fd5b6000815180845260208085019450808401835b8381101561273857815161ffff1687529582019590820190600101612718565b509495945050505050565b6000815180845260208085019450808401835b8381101561273857815187529582019590820190600101612756565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60006001600160a01b0385168252606060208301526127be6060830185612705565b8281036040840152610e118185612743565b60006001600160a01b0385168252606060208301526127f26060830185612705565b9050826040830152949350505050565b60006001600160a01b03808a16835264ffffffffff8916602084015287604084015260e0606084015261283860e0840188612743565b83810380608086015283825282881660a08601526020810160c086015250612864602082018688612772565b9b9a5050505050505050505050565b60006001600160a01b03808b16835264ffffffffff8a16602084015288604084015287606084015260ff8716608084015280861660a08401525060e060c08301526128c260e083018486612772565b9a9950505050505050505050565b6000602082526122a46020830184612743565b600060608201868352602061ffff808816828601526060604086015282868452608086019050879350845b87811015612933578261292086612278565b168252938301939083019060010161290e565b509998505050505050505050565b600084825261ffff84166020830152606060408301526129646060830184612705565b95945050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126129a1578283fd5b83018035915067ffffffffffffffff8211156129bb578283fd5b60200191503681900382131561226057600080fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156129f9576129f9612ae0565b604052919050565b600067ffffffffffffffff821115612a1b57612a1b612ae0565b5060209081020190565b600061ffff808316818516808303821115612a4257612a42612aca565b01949350505050565b6000816000190483118215151615612a6557612a65612aca565b500290565b600061ffff83811690831681811015612a8557612a85612aca565b039392505050565b600061ffff80831681811415612aa557612aa5612aca565b6001019392505050565b6000600019821415612ac357612ac3612aca565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c81bd1e54410e1eba13763e787d17bd38fbef62c56e03567ca500551450e503a64736f6c634300080200338be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101985760003560e01c80638da5cb5b116100e3578063d04213a31161008c578063ef03d96e11610066578063ef03d96e146103c1578063f2fde38b146103d4578063f8efa8d0146103e757610198565b8063d04213a314610378578063d49d1b981461039b578063da742228146103ae57610198565b8063b7215597116100bd578063b721559714610341578063bfb87f0a14610354578063ce1b815f1461036757610198565b80638da5cb5b146102fb578063a8338df11461031b578063b50aae1a1461032e57610198565b80635a1dce1f11610145578063759688091161011f57806375968809146102bf5780637f2e1814146102c857806384c4fb3a146102db57610198565b80635a1dce1f1461027857806360fd0e0e146102a4578063715018a6146102b757610198565b806337a694461161017657806337a69446146101f85780633a91fda914610235578063572b6c051461025557610198565b8063048b33be1461019d57806307b7810c146101b25780630854f447146101c5575b600080fd5b6101b06101ab36600461269b565b6103f0565b005b6101b06101c03660046122ab565b6104b3565b6101e56101d3366004612628565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b6001546102209074010000000000000000000000000000000000000000900463ffffffff1681565b60405163ffffffff90911681526020016101ef565b6101e5610243366004612628565b60056020526000908152604090205481565b61026861026336600461228a565b610594565b60405190151581526020016101ef565b600154610220907801000000000000000000000000000000000000000000000000900463ffffffff1681565b6101b06102b2366004612642565b6105ab565b6101b0610631565b6101e560025481565b6101e56102d63660046124ec565b6106f7565b6102ee6102e936600461237a565b610822565b6040516101ef91906128d0565b610303610c22565b6040516001600160a01b0390911681526020016101ef565b6101b061032936600461269b565b610c32565b6101e561033c3660046125ac565b610cf4565b6101b061034f36600461266b565b610e1b565b6101e5610362366004612538565b610e8f565b6000546001600160a01b0316610303565b61026861038636600461228a565b60066020526000908152604090205460ff1681565b6101b06103a9366004612642565b610ee2565b6101b06103bc36600461228a565b610f68565b6101b06103cf36600461266b565b61102c565b6101b06103e236600461228a565b6110a0565b6101e560035481565b6103f8611238565b6001600160a01b0316610409610c22565b6001600160a01b0316146104645760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001805463ffffffff90921674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b6104bb611238565b6001600160a01b03166104cc610c22565b6001600160a01b0316146105225760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b6001600160a01b03821660008181526006602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917fb14c967f784f0ac8e6e62b391fbd48f1be9e9d64871ca240b416da9bbb9a9fb491a35050565b6000546001600160a01b038281169116145b919050565b6105b3611238565b6001600160a01b03166105c4610c22565b6001600160a01b03161461061a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b61ffff909116600090815260046020526040902055565b610639611238565b6001600160a01b031661064a610c22565b6001600160a01b0316146106a05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36001805473ffffffffffffffffffffffffffffffffffffffff19169055565b61ffff81166000908152600560209081526040822054906107349061071e9086018661228a565b8261072f604088016020890161228a565b611247565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c50a4eb9610770602087018761228a565b61078060608801604089016126bf565b606088013585600061079860408c0160208d0161228a565b6107a560808d018d61296d565b6040518963ffffffff1660e01b81526004016107c8989796959493929190612873565b602060405180830381600087803b1580156107e257600080fd5b505af11580156107f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081a9190612683565b949350505050565b60608151600014156108765760405162461bcd60e51b815260206004820152601060248201527f494e56414c49445f305f41535345545300000000000000000000000000000000604482015260640161045b565b6000610888604085016020860161228a565b6001600160a01b031614156108df5760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f544f5f5a45524f5f41444452455353000000000000000000604482015260640161045b565b6108ec602084018461228a565b6001600160a01b03166108fd611238565b6001600160a01b0316146109535760405162461bcd60e51b815260206004820152601260248201527f415554485f4143434553535f44454e4945440000000000000000000000000000604482015260640161045b565b600061096b610965602086018661228a565b8461137d565b90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f0bc00d86109a9602087018761228a565b6109b960608801604089016126bf565b6060880135856109cf60408b0160208c0161228a565b6109dc60808c018c61296d565b6040518863ffffffff1660e01b81526004016109fe9796959493929190612802565b600060405180830381600087803b158015610a1857600080fd5b505af1158015610a2c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a5491908101906122e5565b915060005b8251811015610c1a57838181518110610a8257634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff1660001415610b085760405162461bcd60e51b815260206004820152602260248201527f41737365744d696e7465723a20636174616c79737449442063616e277420626560448201527f2030000000000000000000000000000000000000000000000000000000000000606482015260840161045b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663676181bf848381518110610b5757634e487b7160e01b600052603260045260246000fd5b6020026020010151868481518110610b7f57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151878581518110610bab57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516040518463ffffffff1660e01b8152600401610bd593929190612941565b600060405180830381600087803b158015610bef57600080fd5b505af1158015610c03573d6000803e3d6000fd5b505050508080610c1290612aaf565b915050610a59565b505092915050565b6001546001600160a01b03165b90565b610c3a611238565b6001600160a01b0316610c4b610c22565b6001600160a01b031614610ca15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b6001805463ffffffff9092167801000000000000000000000000000000000000000000000000027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b600060066000610d02611238565b6001600160a01b0316815260208101919091526040016000205460ff16151560011480610d4e5750610d32610c22565b6001600160a01b0316610d43611238565b6001600160a01b0316145b610dc05760405162461bcd60e51b815260206004820152602960248201527f4173736574794d696e7465723a20637573746f6d206d696e74696e6720756e6160448201527f7574686f72697a65640000000000000000000000000000000000000000000000606482015260840161045b565b610e11610dd0602088018861228a565b610de06060890160408a016126bf565b8860600135888888888d6020016020810190610dfc919061228a565b8e8060800190610e0c919061296d565b611adb565b9695505050505050565b610e23611238565b6001600160a01b0316610e34610c22565b6001600160a01b031614610e8a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b600355565b61ffff8316600090815260046020908152604082205490610e1190610eb69088018861228a565b610ec66060890160408a016126bf565b8860600135888888878d6020016020810190610dfc919061228a565b610eea611238565b6001600160a01b0316610efb610c22565b6001600160a01b031614610f515760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b61ffff909116600090815260056020526040902055565b610f70611238565b6001600160a01b0316610f81610c22565b6001600160a01b031614610fd75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038316908117825560405190917f871264f4293af7d2865ae7eae628b228f4991c57cb45b39c99f0b774ebe2901891a250565b611034611238565b6001600160a01b0316611045610c22565b6001600160a01b03161461109b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b600255565b6110a8611238565b6001600160a01b03166110b9610c22565b6001600160a01b03161461110f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045b565b6001600160a01b03811661118b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161045b565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006111ff33610594565b1561123157507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610c2f565b5033610c2f565b60006112426111f4565b905090565b6001600160a01b03811661129d5760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f544f5f5a45524f5f41444452455353000000000000000000604482015260640161045b565b826001600160a01b03166112af611238565b6001600160a01b0316146113055760405162461bcd60e51b815260206004820152601260248201527f415554485f4143434553535f44454e4945440000000000000000000000000000604482015260640161045b565b816113785760405162461bcd60e51b815260206004820152602160248201527f41737365744d696e7465723a207175616e746974792063616e6e6f742062652060448201527f3000000000000000000000000000000000000000000000000000000000000000606482015260840161045b565b505050565b6060815167ffffffffffffffff8111156113a757634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156113d0578160200160208202803683370190505b50905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663645c5f9e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561142e57600080fd5b505afa158015611442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114669190612683565b67ffffffffffffffff81111561148c57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156114b5578160200160208202803683370190505b50905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c4d91ed6040518163ffffffff1660e01b815260040160206040518083038186803b15801561151357600080fd5b505afa158015611527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154b9190612683565b67ffffffffffffffff81111561157157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561159a578160200160208202803683370190505b50905060005b8451811015611ac65760008582815181106115cb57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff161180156116185750825185828151811061160557634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff1611155b6116895760405162461bcd60e51b8152602060048201526024808201527f41737365744d696e7465723a20636174616c7973744944206f7574206f66206260448201527f6f756e6400000000000000000000000000000000000000000000000000000000606482015260840161045b565b8260018683815181106116ac57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516116c29190612a6a565b61ffff16815181106116e457634e487b7160e01b600052603260045260246000fd5b6020026020010180518091906116f990612aaf565b90525060005b85828151811061171f57634e487b7160e01b600052603260045260246000fd5b602002602001015160000151518110156118e857600086838151811061175557634e487b7160e01b600052603260045260246000fd5b602002602001015160000151828151811061178057634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff161180156117f0575082518683815181106117b657634e487b7160e01b600052603260045260246000fd5b60200260200101516000015182815181106117e157634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1611155b61183c5760405162461bcd60e51b815260206004820152601f60248201527f41737365744d696e7465723a2067656d4964206f7574206f6620626f756e6400604482015260640161045b565b82600187848151811061185f57634e487b7160e01b600052603260045260246000fd5b602002602001015160000151838151811061188a57634e487b7160e01b600052603260045260246000fd5b602002602001015161189c9190612a6a565b61ffff16815181106118be57634e487b7160e01b600052603260045260246000fd5b6020026020010180518091906118d390612aaf565b905250806118e081612aaf565b9150506116ff565b5060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166378bc8a1987848151811061193a57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040518263ffffffff1660e01b815260040161196c919061ffff91909116815260200190565b60206040518083038186803b15801561198457600080fd5b505afa158015611998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bc91906126e4565b60ff1690508061ffff168683815181106119e657634e487b7160e01b600052603260045260246000fd5b602002602001015160000151511115611a415760405162461bcd60e51b815260206004820152601a60248201527f41737365744d696e7465723a20746f6f206d616e792067656d73000000000000604482015260640161045b565b60046000878481518110611a6557634e487b7160e01b600052603260045260246000fd5b60200260200101516020015161ffff1661ffff16815260200190815260200160002054858381518110611aa857634e487b7160e01b600052603260045260246000fd5b60209081029190910101525080611abe81612aaf565b9150506115a0565b50611ad18583611cd8565b610c1a8582611e22565b6000611ae88b8686611247565b611b058b89600160189054906101000a900463ffffffff16611f17565b611b648b8888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060015474010000000000000000000000000000000000000000900463ffffffff169150611fb09050565b6040517fc50a4eb90000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c50a4eb990611bd8908e908e908e908b906000908c908c908c90600401612873565b602060405180830381600087803b158015611bf257600080fd5b505af1158015611c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2a9190612683565b6040517f676181bf0000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063676181bf90611c989084908c908c908c906004016128e3565b600060405180830381600087803b158015611cb257600080fd5b505af1158015611cc6573d6000803e3d6000fd5b505050509a9950505050505050505050565b6000815167ffffffffffffffff811115611d0257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d2b578160200160208202803683370190505b50905060005b81518161ffff161015611d9257611d49816001612a25565b828261ffff1681518110611d6d57634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015280611d8a81612a8d565b915050611d31565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166352eea0308483611dcd86612013565b6040518463ffffffff1660e01b8152600401611deb9392919061279c565b600060405180830381600087803b158015611e0557600080fd5b505af1158015611e19573d6000803e3d6000fd5b50505050505050565b6000815167ffffffffffffffff811115611e4c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611e75578160200160208202803683370190505b50905060005b81518161ffff161015611edc57611e93816001612a25565b828261ffff1681518110611eb757634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015280611ed481612a8d565b915050611e7b565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663362e7e8c8483611dcd86612110565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632a6a645184846003548563ffffffff16611f5c9190612a4b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03909316600484015261ffff90911660248301526044820152606401611deb565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636d91683984846002548563ffffffff16611ff59190612a4b565b6040518463ffffffff1660e01b8152600401611deb939291906127d0565b6060815167ffffffffffffffff81111561203d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612066578160200160208202803683370190505b50905060005b825181101561210a57600160189054906101000a900463ffffffff1663ffffffff166003548483815181106120b157634e487b7160e01b600052603260045260246000fd5b60200260200101516120c39190612a4b565b6120cd9190612a4b565b8282815181106120ed57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061210281612aaf565b91505061206c565b50919050565b6060815167ffffffffffffffff81111561213a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612163578160200160208202803683370190505b50905060005b825181101561210a57600160149054906101000a900463ffffffff1663ffffffff166002548483815181106121ae57634e487b7160e01b600052603260045260246000fd5b60200260200101516121c09190612a4b565b6121ca9190612a4b565b8282815181106121ea57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806121ff81612aaf565b915050612169565b80356001600160a01b03811681146105a657600080fd5b60008083601f84011261222f578182fd5b50813567ffffffffffffffff811115612246578182fd5b602083019150836020808302850101111561226057600080fd5b9250929050565b600060a0828403121561210a578081fd5b803561ffff811681146105a657600080fd5b60006020828403121561229b578081fd5b6122a482612207565b9392505050565b600080604083850312156122bd578081fd5b6122c683612207565b9150602083013580151581146122da578182fd5b809150509250929050565b600060208083850312156122f7578182fd5b825167ffffffffffffffff81111561230d578283fd5b8301601f8101851361231d578283fd5b805161233061232b82612a01565b6129d0565b818152838101908385018584028501860189101561234c578687fd5b8694505b8385101561236e578051835260019490940193918501918501612350565b50979650505050505050565b6000806040838503121561238c578182fd5b67ffffffffffffffff833511156123a1578182fd5b6123ae8484358501612267565b915067ffffffffffffffff602084013511156123c8578081fd5b6020830135830184601f8201126123dd578182fd5b6123ea61232b8235612a01565b81358152602080820191908301845b84358110156124de57813585016040601f19828c03011215612419578687fd5b61242360406129d0565b67ffffffffffffffff6020830135111561243b578788fd5b602082013582018b603f820112612450578889fd5b602081013561246161232b82612a01565b80828252602082019150604084018f6040602086028701011115612483578c8dfd5b8c94505b838510156124ad5761249881612278565b83526001949094019360209283019201612487565b508452506124c091505060408301612278565b602082810191909152908652948501949290920191506001016123f9565b509497909650945050505050565b600080604083850312156124fe578182fd5b823567ffffffffffffffff811115612514578283fd5b61252085828601612267565b92505061252f60208401612278565b90509250929050565b6000806000806060858703121561254d578182fd5b843567ffffffffffffffff80821115612564578384fd5b61257088838901612267565b955061257e60208801612278565b94506040870135915080821115612593578384fd5b506125a08782880161221e565b95989497509550505050565b6000806000806000608086880312156125c3578081fd5b853567ffffffffffffffff808211156125da578283fd5b6125e689838a01612267565b96506125f460208901612278565b95506040880135915080821115612609578283fd5b506126168882890161221e565b96999598509660600135949350505050565b600060208284031215612639578081fd5b6122a482612278565b60008060408385031215612654578182fd5b61265d83612278565b946020939093013593505050565b60006020828403121561267c578081fd5b5035919050565b600060208284031215612694578081fd5b5051919050565b6000602082840312156126ac578081fd5b813563ffffffff811681146122a4578182fd5b6000602082840312156126d0578081fd5b813564ffffffffff811681146122a4578182fd5b6000602082840312156126f5578081fd5b815160ff811681146122a4578182fd5b6000815180845260208085019450808401835b8381101561273857815161ffff1687529582019590820190600101612718565b509495945050505050565b6000815180845260208085019450808401835b8381101561273857815187529582019590820190600101612756565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60006001600160a01b0385168252606060208301526127be6060830185612705565b8281036040840152610e118185612743565b60006001600160a01b0385168252606060208301526127f26060830185612705565b9050826040830152949350505050565b60006001600160a01b03808a16835264ffffffffff8916602084015287604084015260e0606084015261283860e0840188612743565b83810380608086015283825282881660a08601526020810160c086015250612864602082018688612772565b9b9a5050505050505050505050565b60006001600160a01b03808b16835264ffffffffff8a16602084015288604084015287606084015260ff8716608084015280861660a08401525060e060c08301526128c260e083018486612772565b9a9950505050505050505050565b6000602082526122a46020830184612743565b600060608201868352602061ffff808816828601526060604086015282868452608086019050879350845b87811015612933578261292086612278565b168252938301939083019060010161290e565b509998505050505050505050565b600084825261ffff84166020830152606060408301526129646060830184612705565b95945050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126129a1578283fd5b83018035915067ffffffffffffffff8211156129bb578283fd5b60200191503681900382131561226057600080fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156129f9576129f9612ae0565b604052919050565b600067ffffffffffffffff821115612a1b57612a1b612ae0565b5060209081020190565b600061ffff808316818516808303821115612a4257612a42612aca565b01949350505050565b6000816000190483118215151615612a6557612a65612aca565b500290565b600061ffff83811690831681811015612a8557612a85612aca565b039392505050565b600061ffff80831681811415612aa557612aa5612aca565b6001019392505050565b6000600019821415612ac357612ac3612aca565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c81bd1e54410e1eba13763e787d17bd38fbef62c56e03567ca500551450e503a64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "asset": ": Asset Token Contract (dual ERC1155/ERC721)",
          "gemsCatalystsRegistry": ": that track the canonical catalyst and gems and provide batch burning facility",
          "registry": ": AssetAttributesRegistry for recording catalyst and gems used",
          "trustedForwarder": ": address of the trusted forwarder (used for metaTX)"
        }
      },
      "mintCustomNumberWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[],uint256)": {
        "params": {
          "catalystId": "Id of the Catalyst ERC20 token to burn (1, 2, 3 or 4).",
          "gemIds": "list of gem ids to burn in the catalyst.",
          "mintData": "(-from address creating the Asset, need to be the tx sender or meta tx signer.  -packId unused packId that will let you predict the resulting tokenId. - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata. - to destination address receiving the minted tokens. - data extra data)",
          "quantity": "number of token to mint"
        },
        "returns": {
          "assetId": "The new token Id."
        }
      },
      "mintMultipleWithCatalyst((address,address,uint40,bytes32,bytes),(uint16[],uint16)[])": {
        "params": {
          "assets": "data (gems and catalyst data)",
          "mintData": "contains (-from address creating the Asset, need to be the tx sender or meta tx signer -packId unused packId that will let you predict the resulting tokenId -metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata)"
        }
      },
      "mintWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[])": {
        "params": {
          "catalystId": "Id of the Catalyst ERC20 token to burn (1, 2, 3 or 4).",
          "gemIds": "list of gem ids to burn in the catalyst.",
          "mintData": ": (-from address creating the Asset, need to be the tx sender or meta tx signer.  -packId unused packId that will let you predict the resulting tokenId. - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata. - to destination address receiving the minted tokens. - data extra data)"
        },
        "returns": {
          "assetId": "The new token Id."
        }
      },
      "mintWithoutCatalyst((address,address,uint40,bytes32,bytes),uint16)": {
        "params": {
          "mintData": ": (-from address creating the Asset, need to be the tx sender or meta tx signer.  -packId unused packId that will let you predict the resulting tokenId. - metadataHash cidv1 ipfs hash of the folder where 0.json file contains the metadata. - to destination address receiving the minted tokens. - data extra data)",
          "typeAsset1Based": "(art, prop...) decide how many asset will be minted (start at 1)"
        },
        "returns": {
          "assetId": "The new token Id."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "AssetMinter depends on"
      },
      "mintCustomNumberWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[],uint256)": {
        "notice": "mint \"quantity\" number of Asset token using one catalyst."
      },
      "mintMultipleWithCatalyst((address,address,uint40,bytes32,bytes),(uint16[],uint16)[])": {
        "notice": "mint multiple Asset tokens."
      },
      "mintWithCatalyst((address,address,uint40,bytes32,bytes),uint16,uint16[])": {
        "notice": "mint multiple Asset tokens using one catalyst."
      },
      "mintWithoutCatalyst((address,address,uint40,bytes32,bytes),uint16)": {
        "notice": "mint one Asset token with no catalyst."
      }
    },
    "notice": "Allow to mint Asset with Catalyst, Gems and Sand, giving the assets attributes through AssetAttributeRegistry",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21371,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9104,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "numberOfGemsBurnPerAsset",
        "offset": 20,
        "slot": "1",
        "type": "t_uint32"
      },
      {
        "astId": 9107,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "numberOfCatalystBurnPerAsset",
        "offset": 24,
        "slot": "1",
        "type": "t_uint32"
      },
      {
        "astId": 9110,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "gemsFactor",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 9113,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "catalystsFactor",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 9126,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "quantitiesByCatalystId",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 9130,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "quantitiesByAssetTypeId",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 9134,
        "contract": "src/solc_0.8/asset/AssetMinter.sol:AssetMinter",
        "label": "customMinterAllowance",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}