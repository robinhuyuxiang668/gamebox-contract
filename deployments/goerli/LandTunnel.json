{
  "address": "0xe65AE4cCe46241FeAB02BF15F2329bC329188E85",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_checkpointManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fxRoot",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rootToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE_EVENT_SIG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "sizes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "xs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ys",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferQuadToL2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointManager",
      "outputs": [
        {
          "internalType": "contract ICheckpointManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChildTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRoot",
      "outputs": [
        {
          "internalType": "contract IFxStateSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedExits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChildTunnel",
          "type": "address"
        }
      ],
      "name": "setFxChildTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6bbd5ddac57c8f2c75bbcdc52cc8de009d2810ae77f7abfb482ae2a130fe3fba",
  "receipt": {
    "to": null,
    "from": "0xA796AE911621E00809E0E7C8f0AD6BF118E5139e",
    "contractAddress": "0xe65AE4cCe46241FeAB02BF15F2329bC329188E85",
    "transactionIndex": 9,
    "gasUsed": "2765975",
    "logsBloom": "0x
    "blockHash": "0x36f8475d267ede76bdfc4fdd8b62b131af0c5471798909438b53fa07e039cab5",
    "transactionHash": "0x6bbd5ddac57c8f2c75bbcdc52cc8de009d2810ae77f7abfb482ae2a130fe3fba",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 6431102,
        "transactionHash": "0x6bbd5ddac57c8f2c75bbcdc52cc8de009d2810ae77f7abfb482ae2a130fe3fba",
        "address": "0xe65AE4cCe46241FeAB02BF15F2329bC329188E85",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a796ae911621e00809e0e7c8f0ad6bf118e5139e"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0x36f8475d267ede76bdfc4fdd8b62b131af0c5471798909438b53fa07e039cab5"
      }
    ],
    "blockNumber": 6431102,
    "cumulativeGasUsed": "4402109",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2890bA17EfE978480615e330ecB65333b880928e",
    "0x3d1d3E34f7fB6D26245E6640E1c50710eFFf15bA",
    "0xa4C4A09cA320AfBaE81659982dE88CC63466bB51",
    "0x96E8789B195713B279c163847A7a0A107CDf6FCf"
  ],
  "solcInputHash": "6f191e5899c5ce1d8acc38c6e857427d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxRoot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rootToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"sizes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"xs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ys\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferQuadToL2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"receiveMessage(bytes)\":{\"details\":\"This function verifies if the transaction actually happened on child chain\",\"params\":{\"inputData\":\"RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"LAND bridge on L1\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveMessage(bytes)\":{\"notice\":\"receive message from  L2 to L1, validated by proof\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/root/land/LandTunnel.sol\":\"LandTunnel\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"fx-portal/contracts/lib/ExitPayloadReader.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { RLPReader } from \\\"./RLPReader.sol\\\";\\n\\nlibrary ExitPayloadReader {\\n  using RLPReader for bytes;\\n  using RLPReader for RLPReader.RLPItem;\\n\\n  uint8 constant WORD_SIZE = 32;\\n\\n  struct ExitPayload {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  struct Receipt {\\n    RLPReader.RLPItem[] data;\\n    bytes raw;\\n    uint256 logIndex;\\n  }\\n\\n  struct Log {\\n    RLPReader.RLPItem data;\\n    RLPReader.RLPItem[] list;\\n  }\\n\\n  struct LogTopics {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  // copy paste of private copy() from RLPReader to avoid changing of existing contracts\\n  function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n  function toExitPayload(bytes memory data)\\n        internal\\n        pure\\n        returns (ExitPayload memory)\\n    {\\n        RLPReader.RLPItem[] memory payloadData = data\\n            .toRlpItem()\\n            .toList();\\n\\n        return ExitPayload(payloadData);\\n    }\\n\\n    function getHeaderNumber(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[0].toUint();\\n    }\\n\\n    function getBlockProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[1].toBytes();\\n    }\\n\\n    function getBlockNumber(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[2].toUint();\\n    }\\n\\n    function getBlockTime(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[3].toUint();\\n    }\\n\\n    function getTxRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\n      return bytes32(payload.data[4].toUint());\\n    }\\n\\n    function getReceiptRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\n      return bytes32(payload.data[5].toUint());\\n    }\\n\\n    function getReceipt(ExitPayload memory payload) internal pure returns(Receipt memory receipt) {\\n      receipt.raw = payload.data[6].toBytes();\\n      RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\\n\\n      if (receiptItem.isList()) {\\n          // legacy tx\\n          receipt.data = receiptItem.toList();\\n      } else {\\n          // pop first byte before parsting receipt\\n          bytes memory typedBytes = receipt.raw;\\n          bytes memory result = new bytes(typedBytes.length - 1);\\n          uint256 srcPtr;\\n          uint256 destPtr;\\n          assembly {\\n              srcPtr := add(33, typedBytes)\\n              destPtr := add(0x20, result)\\n          }\\n\\n          copy(srcPtr, destPtr, result.length);\\n          receipt.data = result.toRlpItem().toList();\\n      }\\n\\n      receipt.logIndex = getReceiptLogIndex(payload);\\n      return receipt;\\n    }\\n\\n    function getReceiptProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[7].toBytes();\\n    }\\n\\n    function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[8].toBytes();\\n    }\\n\\n    function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[8].toUint();\\n    }\\n\\n    function getReceiptLogIndex(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[9].toUint();\\n    }\\n    \\n    // Receipt methods\\n    function toBytes(Receipt memory receipt) internal pure returns(bytes memory) {\\n        return receipt.raw;\\n    }\\n\\n    function getLog(Receipt memory receipt) internal pure returns(Log memory) {\\n        RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\\n        return Log(logData, logData.toList());\\n    }\\n\\n    // Log methods\\n    function getEmitter(Log memory log) internal pure returns(address) {\\n      return RLPReader.toAddress(log.list[0]);\\n    }\\n\\n    function getTopics(Log memory log) internal pure returns(LogTopics memory) {\\n        return LogTopics(log.list[1].toList());\\n    }\\n\\n    function getData(Log memory log) internal pure returns(bytes memory) {\\n        return log.list[2].toBytes();\\n    }\\n\\n    function toRlpBytes(Log memory log) internal pure returns(bytes memory) {\\n      return log.data.toRlpBytes();\\n    }\\n\\n    // LogTopics methods\\n    function getField(LogTopics memory topics, uint256 index) internal pure returns(RLPReader.RLPItem memory) {\\n      return topics.data[index];\\n    }\\n}\\n\",\"keccak256\":\"0xdb3cbd2e895069e17db4cdb8a7fcde127bf598f1c8b3c6f272d0e89727af3aca\"},\"fx-portal/contracts/lib/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Merkle {\\n    function checkMembership(\\n        bytes32 leaf,\\n        uint256 index,\\n        bytes32 rootHash,\\n        bytes memory proof\\n    ) internal pure returns (bool) {\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n        uint256 proofHeight = proof.length / 32;\\n        // Proof of size n means, height of the tree is n+1.\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\n        require(index < 2 ** proofHeight, \\\"Leaf index is too big\\\");\\n\\n        bytes32 proofElement;\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            assembly {\\n                proofElement := mload(add(proof, i))\\n            }\\n\\n            if (index % 2 == 0) {\\n                computedHash = keccak256(\\n                    abi.encodePacked(computedHash, proofElement)\\n                );\\n            } else {\\n                computedHash = keccak256(\\n                    abi.encodePacked(proofElement, computedHash)\\n                );\\n            }\\n\\n            index = index / 2;\\n        }\\n        return computedHash == rootHash;\\n    }\\n}\\n\",\"keccak256\":\"0x20a3e580bfbdf11e27fba2b2cef7e2a4533c694b2d5b47d0107fc9bc716a37e9\",\"license\":\"MIT\"},\"fx-portal/contracts/lib/MerklePatriciaProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MerklePatriciaProof {\\n    /*\\n     * @dev Verifies a merkle patricia proof.\\n     * @param value The terminating value in the trie.\\n     * @param encodedPath The path in the trie leading to value.\\n     * @param rlpParentNodes The rlp encoded stack of nodes.\\n     * @param root The root hash of the trie.\\n     * @return The boolean validity of the proof.\\n     */\\n    function verify(\\n        bytes memory value,\\n        bytes memory encodedPath,\\n        bytes memory rlpParentNodes,\\n        bytes32 root\\n    ) internal pure returns (bool) {\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\n\\n        bytes memory currentNode;\\n        RLPReader.RLPItem[] memory currentNodeList;\\n\\n        bytes32 nodeKey = root;\\n        uint256 pathPtr = 0;\\n\\n        bytes memory path = _getNibbleArray(encodedPath);\\n        if (path.length == 0) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < parentNodes.length; i++) {\\n            if (pathPtr > path.length) {\\n                return false;\\n            }\\n\\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\n            if (nodeKey != keccak256(currentNode)) {\\n                return false;\\n            }\\n            currentNodeList = RLPReader.toList(parentNodes[i]);\\n\\n            if (currentNodeList.length == 17) {\\n                if (pathPtr == path.length) {\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[16])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                uint8 nextPathNibble = uint8(path[pathPtr]);\\n                if (nextPathNibble > 16) {\\n                    return false;\\n                }\\n                nodeKey = bytes32(\\n                    RLPReader.toUintStrict(currentNodeList[nextPathNibble])\\n                );\\n                pathPtr += 1;\\n            } else if (currentNodeList.length == 2) {\\n                uint256 traversed = _nibblesToTraverse(\\n                    RLPReader.toBytes(currentNodeList[0]),\\n                    path,\\n                    pathPtr\\n                );\\n                if (pathPtr + traversed == path.length) {\\n                    //leaf node\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[1])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                //extension node\\n                if (traversed == 0) {\\n                    return false;\\n                }\\n\\n                pathPtr += traversed;\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\n            } else {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    function _nibblesToTraverse(\\n        bytes memory encodedPartialPath,\\n        bytes memory path,\\n        uint256 pathPtr\\n    ) private pure returns (uint256) {\\n        uint256 len = 0;\\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\n        // and slicedPath have elements that are each one hex character (1 nibble)\\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\n        bytes memory slicedPath = new bytes(partialPath.length);\\n\\n        // pathPtr counts nibbles in path\\n        // partialPath.length is a number of nibbles\\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\n            bytes1 pathNibble = path[i];\\n            slicedPath[i - pathPtr] = pathNibble;\\n        }\\n\\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\\n            len = partialPath.length;\\n        } else {\\n            len = 0;\\n        }\\n        return len;\\n    }\\n\\n    // bytes b must be hp encoded\\n    function _getNibbleArray(bytes memory b)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory nibbles = \\\"\\\";\\n        if (b.length > 0) {\\n            uint8 offset;\\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\n            if (hpNibble == 1 || hpNibble == 3) {\\n                nibbles = new bytes(b.length * 2 - 1);\\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\n                nibbles[0] = oddNibble;\\n                offset = 1;\\n            } else {\\n                nibbles = new bytes(b.length * 2 - 2);\\n                offset = 0;\\n            }\\n\\n            for (uint256 i = offset; i < nibbles.length; i++) {\\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\n            }\\n        }\\n        return nibbles;\\n    }\\n\\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str)\\n        private\\n        pure\\n        returns (bytes1)\\n    {\\n        return\\n            bytes1(\\n                n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10\\n            );\\n    }\\n}\",\"keccak256\":\"0xdfbc8f6ea9a4c2b46bd902bbbfae049a2b8afe839fc8634257c9551ab6f74d66\",\"license\":\"MIT\"},\"fx-portal/contracts/lib/RLPReader.sol\":{\"content\":\"/*\\n* @author Hamdi Allam hamdi.allam97@gmail.com\\n* Please reach out with any questions or concerns\\n*/\\npragma solidity ^0.8.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START  = 0xb8;\\n    uint8 constant LIST_SHORT_START   = 0xc0;\\n    uint8 constant LIST_LONG_START    = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint len;\\n        uint memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item;   // Item that's being iterated over.\\n        uint nextPtr;   // Position of the next item in the list.\\n    }\\n\\n    /*\\n    * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n    * @param self The iterator.\\n    * @return The next element in the iteration.\\n    */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint ptr = self.nextPtr;\\n        uint itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n    * @dev Returns true if the iteration has more elements.\\n    * @param self The iterator.\\n    * @return true if the iteration has more elements.\\n    */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n    * @dev Create an iterator. Reverts if item is not a list.\\n    * @param self The RLP item.\\n    * @return An 'Iterator' over the item.\\n    */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len;\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len - _payloadOffset(item.memPtr);\\n    }\\n\\n    /*\\n    * @param item RLP encoded list in bytes\\n    */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint dataLen;\\n        for (uint i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr); \\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START)\\n            return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint, uint) {\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint memPtr = item.memPtr + offset;\\n        uint len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint memPtr, uint len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n        \\n        uint ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint result;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        return result == 0 ? false : true;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset;\\n\\n        uint result;\\n        uint memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint result;\\n        uint memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset; // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n    * Private Helpers\\n    */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint) {\\n        if (item.len == 0) return 0;\\n\\n        uint count = 0;\\n        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n           currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n           count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint memPtr) private pure returns (uint) {\\n        uint itemLen;\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START)\\n            itemLen = 1;\\n        \\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } \\n\\n        else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint memPtr) private pure returns (uint) {\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) \\n            return 0;\\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START))\\n            return 1;\\n        else if (byte0 < LIST_SHORT_START)  // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n    * @param src Pointer to source\\n    * @param dest Pointer to destination\\n    * @param len Amount of memory to copy from the source\\n    */\\n    function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len == 0) return;\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\n\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x606985ec75fb803aae741a9890b635a5bcf60ba6df1921fdb1aaaaea80cec904\"},\"fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nimport {RLPReader} from \\\"../lib/RLPReader.sol\\\";\\nimport {MerklePatriciaProof} from \\\"../lib/MerklePatriciaProof.sol\\\";\\nimport {Merkle} from \\\"../lib/Merkle.sol\\\";\\nimport \\\"../lib/ExitPayloadReader.sol\\\";\\n\\n\\ninterface IFxStateSender {\\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\\n}\\n\\ncontract ICheckpointManager {\\n    struct HeaderBlock {\\n        bytes32 root;\\n        uint256 start;\\n        uint256 end;\\n        uint256 createdAt;\\n        address proposer;\\n    }\\n\\n    /**\\n     * @notice mapping of checkpoint header numbers to block details\\n     * @dev These checkpoints are submited by plasma contracts\\n     */\\n    mapping(uint256 => HeaderBlock) public headerBlocks;\\n}\\n\\nabstract contract FxBaseRootTunnel {\\n    using RLPReader for RLPReader.RLPItem;\\n    using Merkle for bytes32;\\n    using ExitPayloadReader for bytes;\\n    using ExitPayloadReader for ExitPayloadReader.ExitPayload;\\n    using ExitPayloadReader for ExitPayloadReader.Log;\\n    using ExitPayloadReader for ExitPayloadReader.LogTopics;\\n    using ExitPayloadReader for ExitPayloadReader.Receipt;\\n\\n    // keccak256(MessageSent(bytes))\\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\n\\n    // state sender contract\\n    IFxStateSender public fxRoot;\\n    // root chain manager\\n    ICheckpointManager public checkpointManager;\\n    // child tunnel contract which receives and sends messages \\n    address public fxChildTunnel;\\n\\n    // storage to avoid duplicate exits\\n    mapping(bytes32 => bool) public processedExits;\\n\\n    constructor(address _checkpointManager, address _fxRoot) {\\n        checkpointManager = ICheckpointManager(_checkpointManager);\\n        fxRoot = IFxStateSender(_fxRoot);\\n    }\\n\\n    // set fxChildTunnel if not set already\\n    function setFxChildTunnel(address _fxChildTunnel) public {\\n        require(fxChildTunnel == address(0x0), \\\"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\\\");\\n        fxChildTunnel = _fxChildTunnel;\\n    }\\n\\n    /**\\n     * @notice Send bytes message to Child Tunnel\\n     * @param message bytes message that will be sent to Child Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToChild(bytes memory message) internal {\\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\\n    }\\n\\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\n        ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\\n\\n        bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\\n        uint256 blockNumber = payload.getBlockNumber();\\n        // checking if exit has already been processed\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n        bytes32 exitHash = keccak256(\\n            abi.encodePacked(\\n                blockNumber,\\n                // first 2 nibbles are dropped while generating nibble array\\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n                // so converting to nibble array and then hashing it\\n                MerklePatriciaProof._getNibbleArray(branchMaskBytes),\\n                payload.getReceiptLogIndex()\\n            )\\n        );\\n        require(\\n            processedExits[exitHash] == false,\\n            \\\"FxRootTunnel: EXIT_ALREADY_PROCESSED\\\"\\n        );\\n        processedExits[exitHash] = true;\\n\\n        ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\\n        ExitPayloadReader.Log memory log = receipt.getLog();\\n\\n        // check child tunnel\\n        require(fxChildTunnel == log.getEmitter(), \\\"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\\\");\\n\\n        bytes32 receiptRoot = payload.getReceiptRoot();\\n        // verify receipt inclusion\\n        require(\\n            MerklePatriciaProof.verify(\\n                receipt.toBytes(), \\n                branchMaskBytes, \\n                payload.getReceiptProof(), \\n                receiptRoot\\n            ),\\n            \\\"FxRootTunnel: INVALID_RECEIPT_PROOF\\\"\\n        );\\n\\n        // verify checkpoint inclusion\\n        _checkBlockMembershipInCheckpoint(\\n            blockNumber,\\n            payload.getBlockTime(),\\n            payload.getTxRoot(),\\n            receiptRoot,\\n            payload.getHeaderNumber(),\\n            payload.getBlockProof()\\n        );\\n\\n        ExitPayloadReader.LogTopics memory topics = log.getTopics();\\n\\n        require(\\n            bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\n            \\\"FxRootTunnel: INVALID_SIGNATURE\\\"\\n        );\\n\\n        // received message data\\n        (bytes memory message) = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\\n        return message;\\n    }\\n\\n    function _checkBlockMembershipInCheckpoint(\\n        uint256 blockNumber,\\n        uint256 blockTime,\\n        bytes32 txRoot,\\n        bytes32 receiptRoot,\\n        uint256 headerNumber,\\n        bytes memory blockProof\\n    ) private view returns (uint256) {\\n        (\\n            bytes32 headerRoot,\\n            uint256 startBlock,\\n            ,\\n            uint256 createdAt,\\n\\n        ) = checkpointManager.headerBlocks(headerNumber);\\n\\n        require(\\n            keccak256(\\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\\n            )\\n                .checkMembership(\\n                blockNumber-startBlock,\\n                headerRoot,\\n                blockProof\\n            ),\\n            \\\"FxRootTunnel: INVALID_HEADER\\\"\\n        );\\n        return createdAt;\\n    }\\n\\n    /**\\n     * @notice receive message from  L2 to L1, validated by proof\\n     * @dev This function verifies if the transaction actually happened on child chain\\n     *\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\n     *  3 - blockTime - Reference tx block time\\n     *  4 - txRoot - Transactions root of block\\n     *  5 - receiptRoot - Receipts root of block\\n     *  6 - receipt - Receipt of the reference transaction\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\n     */\\n    function receiveMessage(bytes memory inputData) public virtual {\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        _processMessageFromChild(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Child Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param message bytes message that was sent from Child Tunnel\\n     */\\n    function _processMessageFromChild(bytes memory message) virtual internal;\\n}\\n\",\"keccak256\":\"0x0cd588c3f7c6bb2a450e094e92b899db8c3ea3f5cfedd132efd1eccbddacbe82\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down.\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\n\\ncontract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b78a86fc419fc78e618cb6c7892c2c66c4d4a9cac7848d33d91d68aab755caa\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721MandatoryTokenReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5e8bf644.\\ninterface IERC721MandatoryTokenReceiver {\\n    function onERC721BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x4b808c46\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x150b7a02\\n\\n    // needs to implements EIP-165\\n    // function supportsInterface(bytes4 interfaceId)\\n    //     external\\n    //     view\\n    //     returns (bool);\\n}\\n\",\"keccak256\":\"0xb2a8c2fcf496f383bedc0f2925fb9ff51e7a725828fcc73a22fd24f66c57c857\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/ILandToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface LandToken {\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external;\\n\\n    function transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x981419231715d0c076889d219f4b0b27870ed17718f3be8c489b2634cb5b9db6\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/root/land/LandTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\\\";\\nimport \\\"../../../common/interfaces/ILandToken.sol\\\";\\nimport \\\"../../../common/interfaces/IERC721MandatoryTokenReceiver.sol\\\";\\nimport \\\"../../../common/BaseWithStorage/ERC2771Handler.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\n\\n/// @title LAND bridge on L1\\ncontract LandTunnel is FxBaseRootTunnel, IERC721MandatoryTokenReceiver, ERC2771Handler, Ownable {\\n    address public rootToken;\\n\\n    event Deposit(address user, uint256 size, uint256 x, uint256 y, bytes data);\\n    event Withdraw(address user, uint256 size, uint256 x, uint256 y, bytes data);\\n\\n    constructor(\\n        address _checkpointManager,\\n        address _fxRoot,\\n        address _rootToken,\\n        address _trustedForwarder\\n    ) FxBaseRootTunnel(_checkpointManager, _fxRoot) {\\n        rootToken = _rootToken;\\n        __ERC2771Handler_initialize(_trustedForwarder);\\n    }\\n\\n    function onERC721Received(\\n        address, /* operator */\\n        address, /* from */\\n        uint256, /* tokenId */\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function onERC721BatchReceived(\\n        address, /* operator */\\n        address, /* from */\\n        uint256[] calldata, /* ids */\\n        bytes calldata /* data */\\n    ) external pure override returns (bytes4) {\\n        return this.onERC721BatchReceived.selector;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\\n        return interfaceId == 0x5e8bf644 || interfaceId == 0x01ffc9a7;\\n    }\\n\\n    function batchTransferQuadToL2(\\n        address to,\\n        uint256[] memory sizes,\\n        uint256[] memory xs,\\n        uint256[] memory ys,\\n        bytes memory data\\n    ) public {\\n        require(sizes.length == xs.length && xs.length == ys.length, \\\"l2: invalid data\\\");\\n        LandToken(rootToken).batchTransferQuad(_msgSender(), address(this), sizes, xs, ys, data);\\n\\n        for (uint256 index = 0; index < sizes.length; index++) {\\n            bytes memory message = abi.encode(to, sizes[index], xs[index], ys[index], data);\\n            _sendMessageToChild(message);\\n            emit Deposit(to, sizes[index], xs[index], ys[index], data);\\n        }\\n    }\\n\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyOwner {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function _processMessageFromChild(bytes memory message) internal override {\\n        (address to, uint256[] memory size, uint256[] memory x, uint256[] memory y, bytes memory data) =\\n            abi.decode(message, (address, uint256[], uint256[], uint256[], bytes));\\n        for (uint256 index = 0; index < x.length; index++) {\\n            LandToken(rootToken).transferQuad(address(this), to, size[index], x[index], y[index], data);\\n            emit Withdraw(to, size[index], x[index], y[index], data);\\n        }\\n    }\\n\\n    function _msgSender() internal view override(Context, ERC2771Handler) returns (address sender) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    function _msgData() internal view override(Context, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xb477dd07cc5f19b6ba72ceac4d649f3553b1286127ab9eb2736c1469e1e1d779\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620030f5380380620030f583398101604081905262000034916200018d565b600180546001600160a01b038087166001600160a01b03199283161790925560008054928616929091169190911790556200007862000072620000c4565b620000e1565b600680546001600160a01b0319166001600160a01b038416179055620000ba81600480546001600160a01b0319166001600160a01b0392909216919091179055565b50505050620001e9565b6000620000db6200013360201b620009411760201c565b90505b90565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600062000140336200015e565b1562000156575060131936013560601c620000de565b5033620000de565b6004546001600160a01b038281169116145b919050565b80516001600160a01b03811681146200017057600080fd5b60008060008060808587031215620001a3578384fd5b620001ae8562000175565b9350620001be6020860162000175565b9250620001ce6040860162000175565b9150620001de6060860162000175565b905092959194509250565b612efc80620001f96000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c8063972c4928116100b2578063ce1b815f11610081578063de9b771f11610066578063de9b771f1461032c578063f2fde38b1461033f578063f953cec71461035257610136565b8063ce1b815f14610308578063da7422281461031957610136565b8063972c4928146102bc578063aea4e49e146102cf578063c0857ba0146102e2578063c4d168d6146102f557610136565b80634b808c4611610109578063607f2d42116100ee578063607f2d4214610287578063715018a6146102aa5780638da5cb5b146102b457610136565b80634b808c461461022c578063572b6c051461026557610136565b806301ffc9a71461013b5780630e387de614610163578063150b7a02146101985780631f2d006514610201575b600080fd5b61014e61014936600461296c565b610365565b60405190151581526020015b60405180910390f35b61018a7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b60405190815260200161015a565b6101d06101a63660046127e9565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161015a565b600654610214906001600160a01b031681565b6040516001600160a01b03909116815260200161015a565b6101d061023a36600461272a565b7f4b808c46000000000000000000000000000000000000000000000000000000009695505050505050565b61014e610273366004612652565b6004546001600160a01b0390811691161490565b61014e610295366004612908565b60036020526000908152604090205460ff1681565b6102b2610400565b005b610214610480565b600254610214906001600160a01b031681565b6102b26102dd366004612652565b610490565b600154610214906001600160a01b031681565b6102b261030336600461285a565b61053e565b6004546001600160a01b0316610214565b6102b2610327366004612652565b610792565b600054610214906001600160a01b031681565b6102b261034d366004612652565b610830565b6102b26103603660046129ac565b610927565b60007f5e8bf644000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806103f857507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b90505b919050565b61040861098b565b6001600160a01b0316610419610480565b6001600160a01b0316146104745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61047e600061099a565b565b6005546001600160a01b03165b90565b6002546001600160a01b03161561050f5760405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201527f4c52454144595f53455400000000000000000000000000000000000000000000606482015260840161046b565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b82518451148015610550575081518351145b61059c5760405162461bcd60e51b815260206004820152601060248201527f6c323a20696e76616c6964206461746100000000000000000000000000000000604482015260640161046b565b6006546001600160a01b031663eaa5e0676105b561098b565b30878787876040518763ffffffff1660e01b81526004016105db96959493929190612aa5565b600060405180830381600087803b1580156105f557600080fd5b505af1158015610609573d6000803e3d6000fd5b5050505060005b845181101561078a5760008686838151811061063c57634e487b7160e01b600052603260045260246000fd5b602002602001015186848151811061066457634e487b7160e01b600052603260045260246000fd5b602002602001015186858151811061068c57634e487b7160e01b600052603260045260246000fd5b6020026020010151866040516020016106a9959493929190612b77565b60405160208183030381529060405290506106c3816109f9565b7f86beac9ed9e1aa4efb77b948567a4c352c177bb58b134f4c9d0d92c2c8ffbfb18787848151811061070557634e487b7160e01b600052603260045260246000fd5b602002602001015187858151811061072d57634e487b7160e01b600052603260045260246000fd5b602002602001015187868151811061075557634e487b7160e01b600052603260045260246000fd5b60200260200101518760405161076f959493929190612b77565b60405180910390a1508061078281612e1e565b915050610610565b505050505050565b61079a61098b565b6001600160a01b03166107ab610480565b6001600160a01b0316146108015760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046b565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61083861098b565b6001600160a01b0316610849610480565b6001600160a01b03161461089f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046b565b6001600160a01b03811661091b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161046b565b6109248161099a565b50565b600061093282610a7d565b905061093d81610dcc565b5050565b6004546000906001600160a01b031633141561098457507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c61048d565b503361048d565b6000610995610941565b905090565b600580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000546002546040517fb47204770000000000000000000000000000000000000000000000000000000081526001600160a01b039283169263b472047792610a48929116908590600401612b55565b600060405180830381600087803b158015610a6257600080fd5b505af1158015610a76573d6000803e3d6000fd5b5050505050565b60606000610a8a83610fb4565b90506000610a9782611013565b90506000610aa48361104a565b9050600081610ab284611081565b610abb866112a7565b604051602001610acd93929190612a78565b60408051601f1981840301815291815281516020928301206000818152600390935291205490915060ff1615610b6a5760405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201527f5353454400000000000000000000000000000000000000000000000000000000606482015260840161046b565b600081815260036020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610baa856112d1565b90506000610bb782611437565b9050610bc2816114e3565b6002546001600160a01b03908116911614610c455760405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f5460448201527f554e4e454c000000000000000000000000000000000000000000000000000000606482015260840161046b565b6000610c508761151a565b9050610c70610c60846020015190565b87610c6a8a611544565b8461156e565b610ce25760405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201527f4f4f460000000000000000000000000000000000000000000000000000000000606482015260840161046b565b610d1085610cef89611895565b610cf88a6118bf565b84610d028c6118e9565b610d0b8d611913565b61193d565b506000610d1c83611a8b565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036610d52610d4d836000611ad5565b611b1b565b14610d9f5760405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e415455524500604482015260640161046b565b6000610daa84611b96565b806020019051810190610dbd91906129df565b9b9a5050505050505050505050565b600080600080600085806020019051810190610de8919061266e565b9450945094509450945060005b8351811015610fab5760065485516001600160a01b03909116906338bb305a9030908990899086908110610e3957634e487b7160e01b600052603260045260246000fd5b6020026020010151888681518110610e6157634e487b7160e01b600052603260045260246000fd5b6020026020010151888781518110610e8957634e487b7160e01b600052603260045260246000fd5b6020026020010151886040518763ffffffff1660e01b8152600401610eb396959493929190612b0b565b600060405180830381600087803b158015610ecd57600080fd5b505af1158015610ee1573d6000803e3d6000fd5b505050507f91ee42a3ae048785d7370790775b6bf02c58c5d7bfb5de80f6d7cb27e46a207e86868381518110610f2757634e487b7160e01b600052603260045260246000fd5b6020026020010151868481518110610f4f57634e487b7160e01b600052603260045260246000fd5b6020026020010151868581518110610f7757634e487b7160e01b600052603260045260246000fd5b602002602001015186604051610f91959493929190612b77565b60405180910390a180610fa381612e1e565b915050610df5565b50505050505050565b6040805160208101909152606081526000610ffe610ff98460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b611bc0565b60408051602081019091529081529392505050565b60606103f8826000015160088151811061103d57634e487b7160e01b600052603260045260246000fd5b6020026020010151611cf2565b60006103f8826000015160028151811061107457634e487b7160e01b600052603260045260246000fd5b6020026020010151611b1b565b604080516020810190915260008152815160609190156103f8576000806110a9600086611d9d565b60f81c905060018114806110c057508060ff166003145b1561119c576001855160026110d59190612d95565b6110df9190612db4565b67ffffffffffffffff81111561110557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561112f576020820181803683370190505b509250600061113f600187611d9d565b9050808460008151811061116357634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600192505061120e565b6002855160026111ac9190612d95565b6111b69190612db4565b67ffffffffffffffff8111156111dc57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611206576020820181803683370190505b509250600091505b60ff82165b835181101561129e5761123d61122c60ff851683612db4565b611237906002612c33565b87611d9d565b84828151811061125d57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061129681612e1e565b915050611213565b50505092915050565b60006103f8826000015160098151811061107457634e487b7160e01b600052603260045260246000fd5b6112f560405180606001604052806060815260200160608152602001600081525090565b61131d826000015160068151811061103d57634e487b7160e01b600052603260045260246000fd5b60208281018290526040805180820182526000808252908301528051808201909152825181529181019082015261135381611e3a565b156113685761136181611bc0565b8252611423565b6020820151805160009061137e90600190612db4565b67ffffffffffffffff8111156113a457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156113ce576020820181803683370190505b5090506000808360210191508260200190506113ec82828551611e74565b60408051808201825260008082526020918201528151808301909252845182528085019082015261141c90610ff9565b8652505050505b61142c836112a7565b604083015250919050565b604080516080810182526000918101828152606080830193909352815260208101919091526000611493836000015160038151811061148657634e487b7160e01b600052603260045260246000fd5b6020026020010151611bc0565b8360400151815181106114b657634e487b7160e01b600052603260045260246000fd5b6020026020010151905060405180604001604052808281526020016114da83611bc0565b90529392505050565b60006103f8826020015160008151811061150d57634e487b7160e01b600052603260045260246000fd5b6020026020010151611eee565b60006103f8826000015160058151811061107457634e487b7160e01b600052603260045260246000fd5b60606103f8826000015160078151811061103d57634e487b7160e01b600052603260045260246000fd5b6000806115a28460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b905060006115af82611bc0565b9050606080856000806115c18b611081565b90508051600014156115dd57600097505050505050505061188d565b60005b86518110156118845781518311156116035760009850505050505050505061188d565b61163387828151811061162657634e487b7160e01b600052603260045260246000fd5b6020026020010151611f08565b9550858051906020012084146116545760009850505050505050505061188d565b61167787828151811061148657634e487b7160e01b600052603260045260246000fd5b94508451601114156117765781518314156116e7578c805190602001206116b88660108151811061103d57634e487b7160e01b600052603260045260246000fd5b8051906020012014156116d65760019850505050505050505061188d565b60009850505050505050505061188d565b600082848151811061170957634e487b7160e01b600052603260045260246000fd5b016020015160f81c9050601081111561172e576000995050505050505050505061188d565b611761868260ff168151811061175457634e487b7160e01b600052603260045260246000fd5b6020026020010151611f97565b945061176e600185612c33565b935050611872565b8451600214156116d65760006117b06117a98760008151811061103d57634e487b7160e01b600052603260045260246000fd5b8486611fc5565b83519091506117bf8286612c33565b1415611822578d805190602001206117f18760018151811061103d57634e487b7160e01b600052603260045260246000fd5b805190602001201415611810576001995050505050505050505061188d565b6000995050505050505050505061188d565b80611839576000995050505050505050505061188d565b6118438185612c33565b93506118698660018151811061175457634e487b7160e01b600052603260045260246000fd5b94506118729050565b8061187c81612e1e565b9150506115e0565b50505050505050505b949350505050565b60006103f8826000015160038151811061107457634e487b7160e01b600052603260045260246000fd5b60006103f8826000015160048151811061107457634e487b7160e01b600052603260045260246000fd5b60006103f8826000015160008151811061107457634e487b7160e01b600052603260045260246000fd5b60606103f8826000015160018151811061103d57634e487b7160e01b600052603260045260246000fd5b6001546040517f41539d4a000000000000000000000000000000000000000000000000000000008152600481018490526000918291829182916001600160a01b03909116906341539d4a9060240160a06040518083038186803b1580156119a357600080fd5b505afa1580156119b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119db9190612920565b5093505092509250611a32828b6119f29190612db4565b6040805160208082018f90528183018e9052606082018d905260808083018d90528351808403909101815260a0909201909252805191012090858861212a565b611a7e5760405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f48454144455200000000604482015260640161046b565b9998505050505050505050565b6040805160208101909152606081526040518060200160405280611acd846020015160018151811061148657634e487b7160e01b600052603260045260246000fd5b905292915050565b60408051808201909152600080825260208201528251805183908110611b0b57634e487b7160e01b600052603260045260246000fd5b6020026020010151905092915050565b805160009015801590611b3057508151602110155b611b3957600080fd5b6000611b4883602001516122a0565b90506000818460000151611b5c9190612db4565b9050600080838660200151611b719190612c33565b9050805191506020831015611b8d57826020036101000a820491505b50949350505050565b60606103f8826020015160028151811061103d57634e487b7160e01b600052603260045260246000fd5b6060611bcb82611e3a565b611bd457600080fd5b6000611bdf83612325565b905060008167ffffffffffffffff811115611c0a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611c4f57816020015b6040805180820190915260008082526020820152815260200190600190039081611c285790505b5090506000611c6185602001516122a0565b8560200151611c709190612c33565b90506000805b84811015611ce757611c87836123a8565b9150604051806040016040528083815260200184815250848281518110611cbe57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152611cd38284612c33565b925080611cdf81612e1e565b915050611c76565b509195945050505050565b8051606090611d0057600080fd5b6000611d0f83602001516122a0565b90506000818460000151611d239190612db4565b905060008167ffffffffffffffff811115611d4e57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d78576020820181803683370190505b5090506000816020019050611b8d848760200151611d969190612c33565b828561246a565b6000611daa600284612e39565b15611df257601082611dbd600286612c4b565b81518110611ddb57634e487b7160e01b600052603260045260246000fd5b0160200151611ded919060f81c612e4d565b611e30565b601082611e00600286612c4b565b81518110611e1e57634e487b7160e01b600052603260045260246000fd5b0160200151611e30919060f81c612c5f565b60f81b9392505050565b8051600090611e4b575060006103fb565b6020820151805160001a9060c0821015611e6a576000925050506103fb565b5060019392505050565b80611e7e57611ee9565b60208110611eb65782518252611e95602084612c33565b9250611ea2602083612c33565b9150611eaf602082612db4565b9050611e7e565b60006001611ec5836020612db4565b611ed190610100612cc7565b611edb9190612db4565b845184518216911916178352505b505050565b8051600090601514611eff57600080fd5b6103f882611b1b565b60606000826000015167ffffffffffffffff811115611f3757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611f61576020820181803683370190505b509050805160001415611f755790506103fb565b6000816020019050611f90846020015182866000015161246a565b5092915050565b8051600090602114611fa857600080fd5b60008083602001516001611fbc9190612c33565b51949350505050565b60008080611fd286611081565b90506000815167ffffffffffffffff811115611ffe57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612028576020820181803683370190505b509050845b82516120399087612c33565b8110156120f857600087828151811061206257634e487b7160e01b600052603260045260246000fd5b01602001517fff0000000000000000000000000000000000000000000000000000000000000016905080836120978985612db4565b815181106120b557634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505080806120f090612e1e565b91505061202d565b50808051906020012082805190602001201415612118578151925061211d565b600092505b50909150505b9392505050565b60006020825161213a9190612e39565b156121875760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642070726f6f66206c656e677468000000000000000000000000604482015260640161046b565b6000602083516121979190612c4b565b90506121a4816002612cc7565b85106121f25760405162461bcd60e51b815260206004820152601560248201527f4c65616620696e64657820697320746f6f206269670000000000000000000000604482015260640161046b565b60008660205b8551811161229257858101519250612211600289612e39565b612246576040805160208101849052908101849052606001604051602081830303815290604052805190602001209150612273565b60408051602081018590529081018390526060016040516020818303038152906040528051906020012091505b61227e600289612c4b565b975061228b602082612c33565b90506121f8565b509094149695505050505050565b8051600090811a60808110156122ba5760009150506103fb565b60b88110806122d5575060c081108015906122d5575060f881105b156122e45760019150506103fb565b60c0811015612319576122f9600160b8612dcb565b6123069060ff1682612db4565b612311906001612c33565b9150506103fb565b6122f9600160f8612dcb565b8051600090612336575060006103fb565b60008061234684602001516122a0565b84602001516123559190612c33565b905060008460000151856020015161236d9190612c33565b90505b8082101561239f57612381826123a8565b61238b9083612c33565b91508261239781612e1e565b935050612370565b50909392505050565b80516000908190811a60808110156123c35760019150611f90565b60b88110156123e9576123d7608082612db4565b6123e2906001612c33565b9150611f90565b60c08110156124165760b78103600185019450806020036101000a85510460018201810193505050611f90565b60f881101561242a576123d760c082612db4565b60019390930151602084900360f7016101000a90049092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a0192915050565b8061247457611ee9565b602081106124ac578251825261248b602084612c33565b9250612498602083612c33565b91506124a5602082612db4565b9050612474565b80611eb657611ee9565b600082601f8301126124c6578081fd5b813560206124db6124d683612be7565b612bb6565b82815281810190858301838502870184018810156124f7578586fd5b855b85811015612515578135845292840192908401906001016124f9565b5090979650505050505050565b600082601f830112612532578081fd5b815160206125426124d683612be7565b828152818101908583018385028701840188101561255e578586fd5b855b8581101561251557815184529284019290840190600101612560565b60008083601f84011261258d578182fd5b50813567ffffffffffffffff8111156125a4578182fd5b6020830191508360208285010111156125bc57600080fd5b9250929050565b600082601f8301126125d3578081fd5b81356125e16124d682612c0b565b8181528460208386010111156125f5578283fd5b816020850160208301379081016020019190915292915050565b600082601f83011261261f578081fd5b815161262d6124d682612c0b565b818152846020838601011115612641578283fd5b61188d826020830160208701612dee565b600060208284031215612663578081fd5b813561212381612eb1565b600080600080600060a08688031215612685578081fd5b855161269081612eb1565b602087015190955067ffffffffffffffff808211156126ad578283fd5b6126b989838a01612522565b955060408801519150808211156126ce578283fd5b6126da89838a01612522565b945060608801519150808211156126ef578283fd5b6126fb89838a01612522565b93506080880151915080821115612710578283fd5b5061271d8882890161260f565b9150509295509295909350565b60008060008060008060808789031215612742578081fd5b863561274d81612eb1565b9550602087013561275d81612eb1565b9450604087013567ffffffffffffffff80821115612779578283fd5b818901915089601f83011261278c578283fd5b81358181111561279a578384fd5b8a602080830285010111156127ad578384fd5b6020830196508095505060608901359150808211156127ca578283fd5b506127d789828a0161257c565b979a9699509497509295939492505050565b600080600080600060808688031215612800578081fd5b853561280b81612eb1565b9450602086013561281b81612eb1565b935060408601359250606086013567ffffffffffffffff81111561283d578182fd5b6128498882890161257c565b969995985093965092949392505050565b600080600080600060a08688031215612871578283fd5b853561287c81612eb1565b9450602086013567ffffffffffffffff80821115612898578485fd5b6128a489838a016124b6565b955060408801359150808211156128b9578485fd5b6128c589838a016124b6565b945060608801359150808211156128da578283fd5b6128e689838a016124b6565b935060808801359150808211156128fb578283fd5b5061271d888289016125c3565b600060208284031215612919578081fd5b5035919050565b600080600080600060a08688031215612937578283fd5b85519450602086015193506040860151925060608601519150608086015161295e81612eb1565b809150509295509295909350565b60006020828403121561297d578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114612123578182fd5b6000602082840312156129bd578081fd5b813567ffffffffffffffff8111156129d3578182fd5b61188d848285016125c3565b6000602082840312156129f0578081fd5b815167ffffffffffffffff811115612a06578182fd5b61188d8482850161260f565b6000815180845260208085019450808401835b83811015612a4157815187529582019590820190600101612a25565b509495945050505050565b60008151808452612a64816020860160208601612dee565b601f01601f19169290920160200192915050565b60008482528351612a90816020850160208801612dee565b60209201918201929092526040019392505050565b60006001600160a01b03808916835280881660208401525060c06040830152612ad160c0830187612a12565b8281036060840152612ae38187612a12565b90508281036080840152612af78186612a12565b905082810360a0840152611a7e8185612a4c565b60006001600160a01b03808916835280881660208401525085604083015284606083015283608083015260c060a0830152612b4960c0830184612a4c565b98975050505050505050565b60006001600160a01b03841682526040602083015261188d6040830184612a4c565b60006001600160a01b038716825285602083015284604083015283606083015260a06080830152612bab60a0830184612a4c565b979650505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612bdf57612bdf612e9b565b604052919050565b600067ffffffffffffffff821115612c0157612c01612e9b565b5060209081020190565b600067ffffffffffffffff821115612c2557612c25612e9b565b50601f01601f191660200190565b60008219821115612c4657612c46612e6f565b500190565b600082612c5a57612c5a612e85565b500490565b600060ff831680612c7257612c72612e85565b8060ff84160491505092915050565b80825b6001808611612c935750612cbe565b818704821115612ca557612ca5612e6f565b80861615612cb257918102915b9490941c938002612c84565b94509492505050565b60006121236000198484600082612ce057506001612123565b81612ced57506000612123565b8160018114612d035760028114612d0d57612d3a565b6001915050612123565b60ff841115612d1e57612d1e612e6f565b6001841b915084821115612d3457612d34612e6f565b50612123565b5060208310610133831016604e8410600b8410161715612d6d575081810a83811115612d6857612d68612e6f565b612123565b612d7a8484846001612c81565b808604821115612d8c57612d8c612e6f565b02949350505050565b6000816000190483118215151615612daf57612daf612e6f565b500290565b600082821015612dc657612dc6612e6f565b500390565b600060ff821660ff841680821015612de557612de5612e6f565b90039392505050565b60005b83811015612e09578181015183820152602001612df1565b83811115612e18576000848401525b50505050565b6000600019821415612e3257612e32612e6f565b5060010190565b600082612e4857612e48612e85565b500690565b600060ff831680612e6057612e60612e85565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461092457600080fdfea2646970667358221220a37356616366b7cb71d14d9522658cf5eeb5947ec7f54231322eaa13002a995664736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c8063972c4928116100b2578063ce1b815f11610081578063de9b771f11610066578063de9b771f1461032c578063f2fde38b1461033f578063f953cec71461035257610136565b8063ce1b815f14610308578063da7422281461031957610136565b8063972c4928146102bc578063aea4e49e146102cf578063c0857ba0146102e2578063c4d168d6146102f557610136565b80634b808c4611610109578063607f2d42116100ee578063607f2d4214610287578063715018a6146102aa5780638da5cb5b146102b457610136565b80634b808c461461022c578063572b6c051461026557610136565b806301ffc9a71461013b5780630e387de614610163578063150b7a02146101985780631f2d006514610201575b600080fd5b61014e61014936600461296c565b610365565b60405190151581526020015b60405180910390f35b61018a7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b60405190815260200161015a565b6101d06101a63660046127e9565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161015a565b600654610214906001600160a01b031681565b6040516001600160a01b03909116815260200161015a565b6101d061023a36600461272a565b7f4b808c46000000000000000000000000000000000000000000000000000000009695505050505050565b61014e610273366004612652565b6004546001600160a01b0390811691161490565b61014e610295366004612908565b60036020526000908152604090205460ff1681565b6102b2610400565b005b610214610480565b600254610214906001600160a01b031681565b6102b26102dd366004612652565b610490565b600154610214906001600160a01b031681565b6102b261030336600461285a565b61053e565b6004546001600160a01b0316610214565b6102b2610327366004612652565b610792565b600054610214906001600160a01b031681565b6102b261034d366004612652565b610830565b6102b26103603660046129ac565b610927565b60007f5e8bf644000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806103f857507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b90505b919050565b61040861098b565b6001600160a01b0316610419610480565b6001600160a01b0316146104745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61047e600061099a565b565b6005546001600160a01b03165b90565b6002546001600160a01b03161561050f5760405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201527f4c52454144595f53455400000000000000000000000000000000000000000000606482015260840161046b565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b82518451148015610550575081518351145b61059c5760405162461bcd60e51b815260206004820152601060248201527f6c323a20696e76616c6964206461746100000000000000000000000000000000604482015260640161046b565b6006546001600160a01b031663eaa5e0676105b561098b565b30878787876040518763ffffffff1660e01b81526004016105db96959493929190612aa5565b600060405180830381600087803b1580156105f557600080fd5b505af1158015610609573d6000803e3d6000fd5b5050505060005b845181101561078a5760008686838151811061063c57634e487b7160e01b600052603260045260246000fd5b602002602001015186848151811061066457634e487b7160e01b600052603260045260246000fd5b602002602001015186858151811061068c57634e487b7160e01b600052603260045260246000fd5b6020026020010151866040516020016106a9959493929190612b77565b60405160208183030381529060405290506106c3816109f9565b7f86beac9ed9e1aa4efb77b948567a4c352c177bb58b134f4c9d0d92c2c8ffbfb18787848151811061070557634e487b7160e01b600052603260045260246000fd5b602002602001015187858151811061072d57634e487b7160e01b600052603260045260246000fd5b602002602001015187868151811061075557634e487b7160e01b600052603260045260246000fd5b60200260200101518760405161076f959493929190612b77565b60405180910390a1508061078281612e1e565b915050610610565b505050505050565b61079a61098b565b6001600160a01b03166107ab610480565b6001600160a01b0316146108015760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046b565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61083861098b565b6001600160a01b0316610849610480565b6001600160a01b03161461089f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046b565b6001600160a01b03811661091b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161046b565b6109248161099a565b50565b600061093282610a7d565b905061093d81610dcc565b5050565b6004546000906001600160a01b031633141561098457507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c61048d565b503361048d565b6000610995610941565b905090565b600580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000546002546040517fb47204770000000000000000000000000000000000000000000000000000000081526001600160a01b039283169263b472047792610a48929116908590600401612b55565b600060405180830381600087803b158015610a6257600080fd5b505af1158015610a76573d6000803e3d6000fd5b5050505050565b60606000610a8a83610fb4565b90506000610a9782611013565b90506000610aa48361104a565b9050600081610ab284611081565b610abb866112a7565b604051602001610acd93929190612a78565b60408051601f1981840301815291815281516020928301206000818152600390935291205490915060ff1615610b6a5760405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201527f5353454400000000000000000000000000000000000000000000000000000000606482015260840161046b565b600081815260036020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610baa856112d1565b90506000610bb782611437565b9050610bc2816114e3565b6002546001600160a01b03908116911614610c455760405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f5460448201527f554e4e454c000000000000000000000000000000000000000000000000000000606482015260840161046b565b6000610c508761151a565b9050610c70610c60846020015190565b87610c6a8a611544565b8461156e565b610ce25760405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201527f4f4f460000000000000000000000000000000000000000000000000000000000606482015260840161046b565b610d1085610cef89611895565b610cf88a6118bf565b84610d028c6118e9565b610d0b8d611913565b61193d565b506000610d1c83611a8b565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036610d52610d4d836000611ad5565b611b1b565b14610d9f5760405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e415455524500604482015260640161046b565b6000610daa84611b96565b806020019051810190610dbd91906129df565b9b9a5050505050505050505050565b600080600080600085806020019051810190610de8919061266e565b9450945094509450945060005b8351811015610fab5760065485516001600160a01b03909116906338bb305a9030908990899086908110610e3957634e487b7160e01b600052603260045260246000fd5b6020026020010151888681518110610e6157634e487b7160e01b600052603260045260246000fd5b6020026020010151888781518110610e8957634e487b7160e01b600052603260045260246000fd5b6020026020010151886040518763ffffffff1660e01b8152600401610eb396959493929190612b0b565b600060405180830381600087803b158015610ecd57600080fd5b505af1158015610ee1573d6000803e3d6000fd5b505050507f91ee42a3ae048785d7370790775b6bf02c58c5d7bfb5de80f6d7cb27e46a207e86868381518110610f2757634e487b7160e01b600052603260045260246000fd5b6020026020010151868481518110610f4f57634e487b7160e01b600052603260045260246000fd5b6020026020010151868581518110610f7757634e487b7160e01b600052603260045260246000fd5b602002602001015186604051610f91959493929190612b77565b60405180910390a180610fa381612e1e565b915050610df5565b50505050505050565b6040805160208101909152606081526000610ffe610ff98460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b611bc0565b60408051602081019091529081529392505050565b60606103f8826000015160088151811061103d57634e487b7160e01b600052603260045260246000fd5b6020026020010151611cf2565b60006103f8826000015160028151811061107457634e487b7160e01b600052603260045260246000fd5b6020026020010151611b1b565b604080516020810190915260008152815160609190156103f8576000806110a9600086611d9d565b60f81c905060018114806110c057508060ff166003145b1561119c576001855160026110d59190612d95565b6110df9190612db4565b67ffffffffffffffff81111561110557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561112f576020820181803683370190505b509250600061113f600187611d9d565b9050808460008151811061116357634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600192505061120e565b6002855160026111ac9190612d95565b6111b69190612db4565b67ffffffffffffffff8111156111dc57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611206576020820181803683370190505b509250600091505b60ff82165b835181101561129e5761123d61122c60ff851683612db4565b611237906002612c33565b87611d9d565b84828151811061125d57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061129681612e1e565b915050611213565b50505092915050565b60006103f8826000015160098151811061107457634e487b7160e01b600052603260045260246000fd5b6112f560405180606001604052806060815260200160608152602001600081525090565b61131d826000015160068151811061103d57634e487b7160e01b600052603260045260246000fd5b60208281018290526040805180820182526000808252908301528051808201909152825181529181019082015261135381611e3a565b156113685761136181611bc0565b8252611423565b6020820151805160009061137e90600190612db4565b67ffffffffffffffff8111156113a457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156113ce576020820181803683370190505b5090506000808360210191508260200190506113ec82828551611e74565b60408051808201825260008082526020918201528151808301909252845182528085019082015261141c90610ff9565b8652505050505b61142c836112a7565b604083015250919050565b604080516080810182526000918101828152606080830193909352815260208101919091526000611493836000015160038151811061148657634e487b7160e01b600052603260045260246000fd5b6020026020010151611bc0565b8360400151815181106114b657634e487b7160e01b600052603260045260246000fd5b6020026020010151905060405180604001604052808281526020016114da83611bc0565b90529392505050565b60006103f8826020015160008151811061150d57634e487b7160e01b600052603260045260246000fd5b6020026020010151611eee565b60006103f8826000015160058151811061107457634e487b7160e01b600052603260045260246000fd5b60606103f8826000015160078151811061103d57634e487b7160e01b600052603260045260246000fd5b6000806115a28460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b905060006115af82611bc0565b9050606080856000806115c18b611081565b90508051600014156115dd57600097505050505050505061188d565b60005b86518110156118845781518311156116035760009850505050505050505061188d565b61163387828151811061162657634e487b7160e01b600052603260045260246000fd5b6020026020010151611f08565b9550858051906020012084146116545760009850505050505050505061188d565b61167787828151811061148657634e487b7160e01b600052603260045260246000fd5b94508451601114156117765781518314156116e7578c805190602001206116b88660108151811061103d57634e487b7160e01b600052603260045260246000fd5b8051906020012014156116d65760019850505050505050505061188d565b60009850505050505050505061188d565b600082848151811061170957634e487b7160e01b600052603260045260246000fd5b016020015160f81c9050601081111561172e576000995050505050505050505061188d565b611761868260ff168151811061175457634e487b7160e01b600052603260045260246000fd5b6020026020010151611f97565b945061176e600185612c33565b935050611872565b8451600214156116d65760006117b06117a98760008151811061103d57634e487b7160e01b600052603260045260246000fd5b8486611fc5565b83519091506117bf8286612c33565b1415611822578d805190602001206117f18760018151811061103d57634e487b7160e01b600052603260045260246000fd5b805190602001201415611810576001995050505050505050505061188d565b6000995050505050505050505061188d565b80611839576000995050505050505050505061188d565b6118438185612c33565b93506118698660018151811061175457634e487b7160e01b600052603260045260246000fd5b94506118729050565b8061187c81612e1e565b9150506115e0565b50505050505050505b949350505050565b60006103f8826000015160038151811061107457634e487b7160e01b600052603260045260246000fd5b60006103f8826000015160048151811061107457634e487b7160e01b600052603260045260246000fd5b60006103f8826000015160008151811061107457634e487b7160e01b600052603260045260246000fd5b60606103f8826000015160018151811061103d57634e487b7160e01b600052603260045260246000fd5b6001546040517f41539d4a000000000000000000000000000000000000000000000000000000008152600481018490526000918291829182916001600160a01b03909116906341539d4a9060240160a06040518083038186803b1580156119a357600080fd5b505afa1580156119b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119db9190612920565b5093505092509250611a32828b6119f29190612db4565b6040805160208082018f90528183018e9052606082018d905260808083018d90528351808403909101815260a0909201909252805191012090858861212a565b611a7e5760405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f48454144455200000000604482015260640161046b565b9998505050505050505050565b6040805160208101909152606081526040518060200160405280611acd846020015160018151811061148657634e487b7160e01b600052603260045260246000fd5b905292915050565b60408051808201909152600080825260208201528251805183908110611b0b57634e487b7160e01b600052603260045260246000fd5b6020026020010151905092915050565b805160009015801590611b3057508151602110155b611b3957600080fd5b6000611b4883602001516122a0565b90506000818460000151611b5c9190612db4565b9050600080838660200151611b719190612c33565b9050805191506020831015611b8d57826020036101000a820491505b50949350505050565b60606103f8826020015160028151811061103d57634e487b7160e01b600052603260045260246000fd5b6060611bcb82611e3a565b611bd457600080fd5b6000611bdf83612325565b905060008167ffffffffffffffff811115611c0a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611c4f57816020015b6040805180820190915260008082526020820152815260200190600190039081611c285790505b5090506000611c6185602001516122a0565b8560200151611c709190612c33565b90506000805b84811015611ce757611c87836123a8565b9150604051806040016040528083815260200184815250848281518110611cbe57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152611cd38284612c33565b925080611cdf81612e1e565b915050611c76565b509195945050505050565b8051606090611d0057600080fd5b6000611d0f83602001516122a0565b90506000818460000151611d239190612db4565b905060008167ffffffffffffffff811115611d4e57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d78576020820181803683370190505b5090506000816020019050611b8d848760200151611d969190612c33565b828561246a565b6000611daa600284612e39565b15611df257601082611dbd600286612c4b565b81518110611ddb57634e487b7160e01b600052603260045260246000fd5b0160200151611ded919060f81c612e4d565b611e30565b601082611e00600286612c4b565b81518110611e1e57634e487b7160e01b600052603260045260246000fd5b0160200151611e30919060f81c612c5f565b60f81b9392505050565b8051600090611e4b575060006103fb565b6020820151805160001a9060c0821015611e6a576000925050506103fb565b5060019392505050565b80611e7e57611ee9565b60208110611eb65782518252611e95602084612c33565b9250611ea2602083612c33565b9150611eaf602082612db4565b9050611e7e565b60006001611ec5836020612db4565b611ed190610100612cc7565b611edb9190612db4565b845184518216911916178352505b505050565b8051600090601514611eff57600080fd5b6103f882611b1b565b60606000826000015167ffffffffffffffff811115611f3757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611f61576020820181803683370190505b509050805160001415611f755790506103fb565b6000816020019050611f90846020015182866000015161246a565b5092915050565b8051600090602114611fa857600080fd5b60008083602001516001611fbc9190612c33565b51949350505050565b60008080611fd286611081565b90506000815167ffffffffffffffff811115611ffe57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612028576020820181803683370190505b509050845b82516120399087612c33565b8110156120f857600087828151811061206257634e487b7160e01b600052603260045260246000fd5b01602001517fff0000000000000000000000000000000000000000000000000000000000000016905080836120978985612db4565b815181106120b557634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505080806120f090612e1e565b91505061202d565b50808051906020012082805190602001201415612118578151925061211d565b600092505b50909150505b9392505050565b60006020825161213a9190612e39565b156121875760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642070726f6f66206c656e677468000000000000000000000000604482015260640161046b565b6000602083516121979190612c4b565b90506121a4816002612cc7565b85106121f25760405162461bcd60e51b815260206004820152601560248201527f4c65616620696e64657820697320746f6f206269670000000000000000000000604482015260640161046b565b60008660205b8551811161229257858101519250612211600289612e39565b612246576040805160208101849052908101849052606001604051602081830303815290604052805190602001209150612273565b60408051602081018590529081018390526060016040516020818303038152906040528051906020012091505b61227e600289612c4b565b975061228b602082612c33565b90506121f8565b509094149695505050505050565b8051600090811a60808110156122ba5760009150506103fb565b60b88110806122d5575060c081108015906122d5575060f881105b156122e45760019150506103fb565b60c0811015612319576122f9600160b8612dcb565b6123069060ff1682612db4565b612311906001612c33565b9150506103fb565b6122f9600160f8612dcb565b8051600090612336575060006103fb565b60008061234684602001516122a0565b84602001516123559190612c33565b905060008460000151856020015161236d9190612c33565b90505b8082101561239f57612381826123a8565b61238b9083612c33565b91508261239781612e1e565b935050612370565b50909392505050565b80516000908190811a60808110156123c35760019150611f90565b60b88110156123e9576123d7608082612db4565b6123e2906001612c33565b9150611f90565b60c08110156124165760b78103600185019450806020036101000a85510460018201810193505050611f90565b60f881101561242a576123d760c082612db4565b60019390930151602084900360f7016101000a90049092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a0192915050565b8061247457611ee9565b602081106124ac578251825261248b602084612c33565b9250612498602083612c33565b91506124a5602082612db4565b9050612474565b80611eb657611ee9565b600082601f8301126124c6578081fd5b813560206124db6124d683612be7565b612bb6565b82815281810190858301838502870184018810156124f7578586fd5b855b85811015612515578135845292840192908401906001016124f9565b5090979650505050505050565b600082601f830112612532578081fd5b815160206125426124d683612be7565b828152818101908583018385028701840188101561255e578586fd5b855b8581101561251557815184529284019290840190600101612560565b60008083601f84011261258d578182fd5b50813567ffffffffffffffff8111156125a4578182fd5b6020830191508360208285010111156125bc57600080fd5b9250929050565b600082601f8301126125d3578081fd5b81356125e16124d682612c0b565b8181528460208386010111156125f5578283fd5b816020850160208301379081016020019190915292915050565b600082601f83011261261f578081fd5b815161262d6124d682612c0b565b818152846020838601011115612641578283fd5b61188d826020830160208701612dee565b600060208284031215612663578081fd5b813561212381612eb1565b600080600080600060a08688031215612685578081fd5b855161269081612eb1565b602087015190955067ffffffffffffffff808211156126ad578283fd5b6126b989838a01612522565b955060408801519150808211156126ce578283fd5b6126da89838a01612522565b945060608801519150808211156126ef578283fd5b6126fb89838a01612522565b93506080880151915080821115612710578283fd5b5061271d8882890161260f565b9150509295509295909350565b60008060008060008060808789031215612742578081fd5b863561274d81612eb1565b9550602087013561275d81612eb1565b9450604087013567ffffffffffffffff80821115612779578283fd5b818901915089601f83011261278c578283fd5b81358181111561279a578384fd5b8a602080830285010111156127ad578384fd5b6020830196508095505060608901359150808211156127ca578283fd5b506127d789828a0161257c565b979a9699509497509295939492505050565b600080600080600060808688031215612800578081fd5b853561280b81612eb1565b9450602086013561281b81612eb1565b935060408601359250606086013567ffffffffffffffff81111561283d578182fd5b6128498882890161257c565b969995985093965092949392505050565b600080600080600060a08688031215612871578283fd5b853561287c81612eb1565b9450602086013567ffffffffffffffff80821115612898578485fd5b6128a489838a016124b6565b955060408801359150808211156128b9578485fd5b6128c589838a016124b6565b945060608801359150808211156128da578283fd5b6128e689838a016124b6565b935060808801359150808211156128fb578283fd5b5061271d888289016125c3565b600060208284031215612919578081fd5b5035919050565b600080600080600060a08688031215612937578283fd5b85519450602086015193506040860151925060608601519150608086015161295e81612eb1565b809150509295509295909350565b60006020828403121561297d578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114612123578182fd5b6000602082840312156129bd578081fd5b813567ffffffffffffffff8111156129d3578182fd5b61188d848285016125c3565b6000602082840312156129f0578081fd5b815167ffffffffffffffff811115612a06578182fd5b61188d8482850161260f565b6000815180845260208085019450808401835b83811015612a4157815187529582019590820190600101612a25565b509495945050505050565b60008151808452612a64816020860160208601612dee565b601f01601f19169290920160200192915050565b60008482528351612a90816020850160208801612dee565b60209201918201929092526040019392505050565b60006001600160a01b03808916835280881660208401525060c06040830152612ad160c0830187612a12565b8281036060840152612ae38187612a12565b90508281036080840152612af78186612a12565b905082810360a0840152611a7e8185612a4c565b60006001600160a01b03808916835280881660208401525085604083015284606083015283608083015260c060a0830152612b4960c0830184612a4c565b98975050505050505050565b60006001600160a01b03841682526040602083015261188d6040830184612a4c565b60006001600160a01b038716825285602083015284604083015283606083015260a06080830152612bab60a0830184612a4c565b979650505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612bdf57612bdf612e9b565b604052919050565b600067ffffffffffffffff821115612c0157612c01612e9b565b5060209081020190565b600067ffffffffffffffff821115612c2557612c25612e9b565b50601f01601f191660200190565b60008219821115612c4657612c46612e6f565b500190565b600082612c5a57612c5a612e85565b500490565b600060ff831680612c7257612c72612e85565b8060ff84160491505092915050565b80825b6001808611612c935750612cbe565b818704821115612ca557612ca5612e6f565b80861615612cb257918102915b9490941c938002612c84565b94509492505050565b60006121236000198484600082612ce057506001612123565b81612ced57506000612123565b8160018114612d035760028114612d0d57612d3a565b6001915050612123565b60ff841115612d1e57612d1e612e6f565b6001841b915084821115612d3457612d34612e6f565b50612123565b5060208310610133831016604e8410600b8410161715612d6d575081810a83811115612d6857612d68612e6f565b612123565b612d7a8484846001612c81565b808604821115612d8c57612d8c612e6f565b02949350505050565b6000816000190483118215151615612daf57612daf612e6f565b500290565b600082821015612dc657612dc6612e6f565b500390565b600060ff821660ff841680821015612de557612de5612e6f565b90039392505050565b60005b83811015612e09578181015183820152602001612df1565b83811115612e18576000848401525b50505050565b6000600019821415612e3257612e32612e6f565b5060010190565b600082612e4857612e48612e85565b500690565b600060ff831680612e6057612e60612e85565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461092457600080fdfea2646970667358221220a37356616366b7cb71d14d9522658cf5eeb5947ec7f54231322eaa13002a995664736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "receiveMessage(bytes)": {
        "details": "This function verifies if the transaction actually happened on child chain",
        "params": {
          "inputData": "RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "LAND bridge on L1",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "receiveMessage(bytes)": {
        "notice": "receive message from  L2 to L1, validated by proof"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8327,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "fxRoot",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IFxStateSender)8277"
      },
      {
        "astId": 8330,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "checkpointManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICheckpointManager)8295"
      },
      {
        "astId": 8332,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "fxChildTunnel",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 8336,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "processedExits",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 23959,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 389,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 36874,
        "contract": "src/solc_0.8/polygon/root/land/LandTunnel.sol:LandTunnel",
        "label": "rootToken",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICheckpointManager)8295": {
        "encoding": "inplace",
        "label": "contract ICheckpointManager",
        "numberOfBytes": "20"
      },
      "t_contract(IFxStateSender)8277": {
        "encoding": "inplace",
        "label": "contract IFxStateSender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}