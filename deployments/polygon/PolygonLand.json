{
  "address": "0x4ebcFb9F8b4df38ce149C655541D591aFb6a03BD",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SuperOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approveFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "sizes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "xs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ys",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isSuperOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAllFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setSuperOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferQuad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5bdc1b151a4ee7b5f93b4644824de39bff0512d27c8a23991058d500f77fd496",
  "receipt": {
    "to": null,
    "from": "0x7074BB056C53ACC0b6091dd3FAe591aa3A4acC88",
    "contractAddress": "0x4ebcFb9F8b4df38ce149C655541D591aFb6a03BD",
    "transactionIndex": 46,
    "gasUsed": "3511171",
    "logsBloom": "0x0000000000000000000000000000000000000000000000000000000040000040000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000800000000000400000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000000000000000000000000800000000000000000000100000",
    "blockHash": "0xc6f4733661eb675db957caaff36da6c05acd098ce74dead892e6fdefb9b2c4ec",
    "transactionHash": "0x5bdc1b151a4ee7b5f93b4644824de39bff0512d27c8a23991058d500f77fd496",
    "logs": [
      {
        "transactionIndex": 46,
        "blockNumber": 21748008,
        "transactionHash": "0x5bdc1b151a4ee7b5f93b4644824de39bff0512d27c8a23991058d500f77fd496",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007074bb056c53acc0b6091dd3fae591aa3a4acc88",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000231569d2d07860000000000000000000000000000000000000000000000000567148bae5da1be000000000000000000000000000000000000000000000040444b0c7242cc814ab700000000000000000000000000000000000000000000000564e33511309a38000000000000000000000000000000000000000000000040444d3dc8dff988d0b7",
        "logIndex": 412,
        "blockHash": "0xc6f4733661eb675db957caaff36da6c05acd098ce74dead892e6fdefb9b2c4ec"
      }
    ],
    "blockNumber": 21748008,
    "cumulativeGasUsed": "12570304",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c1c22d112d07281693ec17f3dd56208d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SuperOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approveFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"sizes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"xs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ys\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isSuperOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSuperOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferQuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"id\":\"The id of the token.\",\"operator\":\"The address receiving the approval.\"}},\"approveFor(address,address,uint256)\":{\"params\":{\"id\":\"The id of the token.\",\"operator\":\"The address receiving the approval.\",\"sender\":\"The address giving the approval.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address to look for.\"},\"returns\":{\"_0\":\"The number of tokens owned by the address.\"}},\"batchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"ids\":\"The ids of the tokens.\",\"to\":\"The recipient of the token.\"}},\"burn(uint256)\":{\"params\":{\"id\":\"The token which will be burnt.\"}},\"burnFrom(address,uint256)\":{\"params\":{\"from\":\"address whose token is to be burnt.\",\"id\":\"The token which will be burnt.\"}},\"changeAdmin(address)\":{\"details\":\"Change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"The address of the new administrator.\"}},\"getAdmin()\":{\"details\":\"Get the current administrator of this contract.\",\"returns\":{\"_0\":\"The current administrator of this contract.\"}},\"getApproved(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"_0\":\"The address of the operator.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address of the operator.\",\"owner\":\"The address of the owner.\"},\"returns\":{\"isOperator\":\"The status of the approval.\"}},\"isSuperOperator(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has superOperator rights.\"}},\"name()\":{\"returns\":{\"_0\":\"The name of the token contract\"}},\"ownerOf(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"owner\":\"The address of the token owner.\"}},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"ids\":\"The ids of the tokens.\",\"to\":\"The recipient of the token.\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The send of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"The determination of the approval.\",\"operator\":\"The address receiving the approval.\"}},\"setApprovalForAllFor(address,address,bool)\":{\"params\":{\"approved\":\"The determination of the approval.\",\"operator\":\"The address receiving the approval.\",\"sender\":\"The address giving the approval.\"}},\"setSuperOperator(address,bool)\":{\"params\":{\"enabled\":\"set whether the superOperator is enabled or disabled.\",\"superOperator\":\"address that will be given/removed superOperator right.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"id\":\"The id of the interface\"},\"returns\":{\"_0\":\"True if the interface is supported\"}},\"symbol()\":{\"returns\":{\"_0\":\"The symbol of the token contract\"}},\"tokenURI(uint256)\":{\"params\":{\"id\":\"The id of the token\"},\"returns\":{\"_0\":\"The URI of the token\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The sender of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the senders behalf.\"},\"approveFor(address,address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the sender behalf.\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens owned by an address.\"},\"batchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses.\"},\"burn(uint256)\":{\"notice\":\"Burns token `id`.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burn token`id` from `from`.\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved operator for a specific token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Check if the sender approved the operator.\"},\"isSuperOperator(address)\":{\"notice\":\"check whether address `who` is given superOperator rights.\"},\"name()\":{\"notice\":\"Return the name of the token contract\"},\"ownerOf(uint256)\":{\"notice\":\"Get the owner of a token.\"},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses, while ensuring the receiving contract has a receiver method.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver know of the transfer.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender.\"},\"setApprovalForAllFor(address,address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender.\"},\"setSuperOperator(address,bool)\":{\"notice\":\"Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check if the contract supports an interface 0x01ffc9a7 is ERC-165 0x80ac58cd is ERC-721 0x5b5e139f is ERC-721 metadata\"},\"symbol()\":{\"notice\":\"Return the symbol of the token contract\"},\"tokenURI(uint256)\":{\"notice\":\"Return the URI of a specific token\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/child/land/PolygonLandBaseToken.sol\":\"PolygonLandBaseToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts-0.8/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down.\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\n\\ncontract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b78a86fc419fc78e618cb6c7892c2c66c4d4a9cac7848d33d91d68aab755caa\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC721BaseToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n/* solhint-disable func-order, code-complexity */\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"./WithSuperOperators.sol\\\";\\nimport \\\"../interfaces/IERC721MandatoryTokenReceiver.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC721/IERC721.sol\\\";\\nimport \\\"./ERC2771Handler.sol\\\";\\n\\ncontract ERC721BaseToken is IERC721, WithSuperOperators, ERC2771Handler {\\n    using Address for address;\\n\\n    bytes4 internal constant _ERC721_RECEIVED = 0x150b7a02;\\n    bytes4 internal constant _ERC721_BATCH_RECEIVED = 0x4b808c46;\\n\\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\\n    bytes4 internal constant ERC721_MANDATORY_RECEIVER = 0x5e8bf644;\\n\\n    uint256 internal constant NOT_ADDRESS = 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000;\\n    uint256 internal constant OPERATOR_FLAG = (2**255);\\n    uint256 internal constant NOT_OPERATOR_FLAG = OPERATOR_FLAG - 1;\\n    uint256 internal constant BURNED_FLAG = (2**160);\\n\\n    mapping(address => uint256) internal _numNFTPerAddress;\\n    mapping(uint256 => uint256) internal _owners;\\n    mapping(address => mapping(address => bool)) internal _operatorsForAll;\\n    mapping(uint256 => address) internal _operators;\\n\\n    /// @notice Approve an operator to spend tokens on the senders behalf.\\n    /// @param operator The address receiving the approval.\\n    /// @param id The id of the token.\\n    function approve(address operator, uint256 id) external override {\\n        uint256 ownerData = _owners[_storageId(id)];\\n        address owner = address(uint160(ownerData));\\n        address msgSender = _msgSender();\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(\\n            owner == msgSender || _superOperators[msgSender] || _operatorsForAll[owner][msgSender],\\n            \\\"UNAUTHORIZED_APPROVAL\\\"\\n        );\\n        _approveFor(ownerData, operator, id);\\n    }\\n\\n    /// @notice Approve an operator to spend tokens on the sender behalf.\\n    /// @param sender The address giving the approval.\\n    /// @param operator The address receiving the approval.\\n    /// @param id The id of the token.\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) external {\\n        uint256 ownerData = _owners[_storageId(id)];\\n        address msgSender = _msgSender();\\n        require(sender != address(0), \\\"ZERO_ADDRESS_SENDER\\\");\\n        require(\\n            msgSender == sender || _superOperators[msgSender] || _operatorsForAll[sender][msgSender],\\n            \\\"UNAUTHORIZED_APPROVAL\\\"\\n        );\\n        require(address(uint160(ownerData)) == sender, \\\"OWNER_NOT_SENDER\\\");\\n        _approveFor(ownerData, operator, id);\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external override {\\n        _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            require(_checkOnERC721Received(_msgSender(), from, to, id, \\\"\\\"), \\\"ERC721_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver know of the transfer.\\n    /// @param from The send of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external override {\\n        safeTransferFrom(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @notice Transfer many tokens between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external {\\n        _batchTransferFrom(from, to, ids, data, false);\\n    }\\n\\n    /// @notice Transfer many tokens between 2 addresses, while\\n    /// ensuring the receiving contract has a receiver method.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external {\\n        _batchTransferFrom(from, to, ids, data, true);\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param sender The address giving the approval.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external {\\n        require(sender != address(0), \\\"Invalid sender address\\\");\\n        address msgSender = _msgSender();\\n        require(msgSender == sender || _superOperators[msgSender], \\\"UNAUTHORIZED_APPROVE_FOR_ALL\\\");\\n\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAll(address operator, bool approved) external override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @notice Burns token `id`.\\n    /// @param id The token which will be burnt.\\n    function burn(uint256 id) external virtual {\\n        _burn(_msgSender(), _ownerOf(id), id);\\n    }\\n\\n    /// @notice Burn token`id` from `from`.\\n    /// @param from address whose token is to be burnt.\\n    /// @param id The token which will be burnt.\\n    function burnFrom(address from, uint256 id) external virtual {\\n        require(from != address(0), \\\"NOT_FROM_ZEROADDRESS\\\");\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        address msgSender = _msgSender();\\n        require(\\n            msgSender == from ||\\n                (operatorEnabled && _operators[id] == msgSender) ||\\n                _superOperators[msgSender] ||\\n                _operatorsForAll[from][msgSender],\\n            \\\"UNAUTHORIZED_BURN\\\"\\n        );\\n        _burn(from, owner, id);\\n    }\\n\\n    /// @notice Get the number of tokens owned by an address.\\n    /// @param owner The address to look for.\\n    /// @return The number of tokens owned by the address.\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS_OWNER\\\");\\n        return _numNFTPerAddress[owner];\\n    }\\n\\n    /// @notice Get the owner of a token.\\n    /// @param id The id of the token.\\n    /// @return owner The address of the token owner.\\n    function ownerOf(uint256 id) external view override returns (address owner) {\\n        owner = _ownerOf(id);\\n        require(owner != address(0), \\\"NONEXISTANT_TOKEN\\\");\\n    }\\n\\n    /// @notice Get the approved operator for a specific token.\\n    /// @param id The id of the token.\\n    /// @return The address of the operator.\\n    function getApproved(uint256 id) external view override returns (address) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        if (operatorEnabled) {\\n            return _operators[id];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Check if the sender approved the operator.\\n    /// @param owner The address of the owner.\\n    /// @param operator The address of the operator.\\n    /// @return isOperator The status of the approval.\\n    function isApprovedForAll(address owner, address operator) external view override returns (bool isOperator) {\\n        return _operatorsForAll[owner][operator] || _superOperators[operator];\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    /// @param data Additional data.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public override {\\n        _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract()) {\\n            require(_checkOnERC721Received(_msgSender(), from, to, id, data), \\\"ERC721_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @notice Check if the contract supports an interface.\\n    /// 0x01ffc9a7 is ERC-165.\\n    /// 0x80ac58cd is ERC-721\\n    /// @param id The id of the interface.\\n    /// @return Whether the interface is supported.\\n    function supportsInterface(bytes4 id) public pure virtual override returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd;\\n    }\\n\\n    /// @dev By overriding this function in an implementation which inherits this contract, you can enable versioned tokenIds without the extra overhead of writing to a new storage slot in _owners each time a version is incremented. See GameToken._storageId() for an example, where the storageId is the tokenId minus the version number.\\n    /// !!! Caution !!! Overriding this function without taking appropriate care could lead to\\n    /// ownerOf() returning an owner for non-existent tokens. Tests should be written to\\n    /// guard against introducing this bug.\\n    /// @param id The id of a token.\\n    /// @return The id used for storage mappings.\\n    function _storageId(uint256 id) internal view virtual returns (uint256) {\\n        return id;\\n    }\\n\\n    function _updateOwnerData(\\n        uint256 id,\\n        uint256 oldData,\\n        address newOwner,\\n        bool hasOperator\\n    ) internal virtual {\\n        if (hasOperator) {\\n            _owners[_storageId(id)] = (oldData & NOT_ADDRESS) | OPERATOR_FLAG | uint256(uint160(newOwner));\\n        } else {\\n            _owners[_storageId(id)] = ((oldData & NOT_ADDRESS) & NOT_OPERATOR_FLAG) | uint256(uint160(newOwner));\\n        }\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal {\\n        _numNFTPerAddress[from]--;\\n        _numNFTPerAddress[to]++;\\n        _updateOwnerData(id, _owners[_storageId(id)], to, false);\\n        emit Transfer(from, to, id);\\n    }\\n\\n    /// @dev See approveFor.\\n    function _approveFor(\\n        uint256 ownerData,\\n        address operator,\\n        uint256 id\\n    ) internal {\\n        address owner = address(uint160(ownerData));\\n        if (operator == address(0)) {\\n            _updateOwnerData(id, ownerData, owner, false);\\n        } else {\\n            _updateOwnerData(id, ownerData, owner, true);\\n            _operators[id] = operator;\\n        }\\n        emit Approval(owner, operator, id);\\n    }\\n\\n    /// @dev See batchTransferFrom.\\n    function _batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory data,\\n        bool safe\\n    ) internal {\\n        address msgSender = _msgSender();\\n        bool authorized = msgSender == from || _superOperators[msgSender] || _operatorsForAll[from][msgSender];\\n\\n        require(from != address(0), \\\"NOT_FROM_ZEROADDRESS\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n\\n        uint256 numTokens = ids.length;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            uint256 id = ids[i];\\n            (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n            require(owner == from, \\\"BATCHTRANSFERFROM_NOT_OWNER\\\");\\n            require(authorized || (operatorEnabled && _operators[id] == msgSender), \\\"NOT_AUTHORIZED\\\");\\n            _updateOwnerData(id, _owners[_storageId(id)], to, false);\\n            emit Transfer(from, to, id);\\n        }\\n        if (from != to) {\\n            _numNFTPerAddress[from] -= numTokens;\\n            _numNFTPerAddress[to] += numTokens;\\n        }\\n\\n        if (to.isContract() && (safe || _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER))) {\\n            require(_checkOnERC721BatchReceived(msgSender, from, to, ids, data), \\\"ERC721_BATCH_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @dev See setApprovalForAll.\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(!_superOperators[operator], \\\"INVALID_APPROVAL_CHANGE\\\");\\n        _operatorsForAll[sender][operator] = approved;\\n\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @dev See burn.\\n    function _burn(\\n        address from,\\n        address owner,\\n        uint256 id\\n    ) internal {\\n        require(from == owner, \\\"NOT_OWNER\\\");\\n        uint256 storageId = _storageId(id);\\n        _owners[storageId] = (_owners[storageId] & NOT_OPERATOR_FLAG) | BURNED_FLAG; // record as non owner but keep track of last owner\\n        _numNFTPerAddress[from]--;\\n        emit Transfer(from, address(0), id);\\n    }\\n\\n    /// @dev Check if receiving contract accepts erc721 transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The adddress we want to transfer to.\\n    /// @param tokenId The id of the token we would like to transfer.\\n    /// @param _data Any additional data to send with the transfer.\\n    /// @return Whether the expected value of 0x150b7a02 is returned.\\n    function _checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = IERC721Receiver(to).onERC721Received(operator, from, tokenId, _data);\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /// @dev Check if receiving contract accepts erc721 batch transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The adddress we want to transfer to.\\n    /// @param ids The ids of the tokens we would like to transfer.\\n    /// @param _data Any additional data to send with the transfer.\\n    /// @return Whether the expected value of 0x4b808c46 is returned.\\n    function _checkOnERC721BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = IERC721MandatoryTokenReceiver(to).onERC721BatchReceived(operator, from, ids, _data);\\n        return (retval == _ERC721_BATCH_RECEIVED);\\n    }\\n\\n    /// @dev See ownerOf\\n    function _ownerOf(uint256 id) internal view virtual returns (address) {\\n        uint256 data = _owners[_storageId(id)];\\n        if ((data & BURNED_FLAG) == BURNED_FLAG) {\\n            return address(0);\\n        }\\n        return address(uint160(data));\\n    }\\n\\n    /// @dev Get the owner and operatorEnabled status of a token.\\n    /// @param id The token to query.\\n    /// @return owner The owner of the token.\\n    /// @return operatorEnabled Whether or not operators are enabled for this token.\\n    function _ownerAndOperatorEnabledOf(uint256 id) internal view returns (address owner, bool operatorEnabled) {\\n        uint256 data = _owners[_storageId(id)];\\n        if ((data & BURNED_FLAG) == BURNED_FLAG) {\\n            owner = address(0);\\n        } else {\\n            owner = address(uint160(data));\\n        }\\n        operatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\\n    }\\n\\n    /// @dev Check whether a transfer is a meta Transaction or not.\\n    /// @param from The address who initiated the transfer (may differ from msg.sender).\\n    /// @param to The address recieving the token.\\n    /// @param id The token being transferred.\\n    /// @return isMetaTx Whether or not the transaction is a MetaTx.\\n    function _checkTransfer(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal view returns (bool isMetaTx) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        address msgSender = _msgSender();\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(owner == from, \\\"CHECKTRANSFER_NOT_OWNER\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(\\n            msgSender == owner ||\\n                _superOperators[msgSender] ||\\n                _operatorsForAll[from][msgSender] ||\\n                (operatorEnabled && _operators[id] == msgSender),\\n            \\\"UNAUTHORIZED_TRANSFER\\\"\\n        );\\n        return true;\\n    }\\n\\n    /// @dev Check if there was enough gas.\\n    /// @param _contract The address of the contract to check.\\n    /// @param interfaceId The id of the interface we want to test.\\n    /// @return Whether or not this check succeeded.\\n    function _checkInterfaceWith10000Gas(address _contract, bytes4 interfaceId) internal view returns (bool) {\\n        bool success;\\n        bool result;\\n        bytes memory callData = abi.encodeWithSelector(ERC165ID, interfaceId);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let call_ptr := add(0x20, callData)\\n            let call_size := mload(callData)\\n            let output := mload(0x40) // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(output, 0x0)\\n            success := staticcall(10000, _contract, call_ptr, call_size, output, 0x20) // 32 bytes\\n            result := mload(output)\\n        }\\n        // (10000 / 63) \\\"not enough for supportsInterface(...)\\\" // consume all gas, so caller can potentially know that there was not enough gas\\n        assert(gasleft() > 158);\\n        return success && result;\\n    }\\n}\\n\",\"keccak256\":\"0xe42b0e5f7f803d8a17d5b2cb67a0083184c31380bdbac288ee9ce3158245245d\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithAdmin.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\ncontract WithAdmin {\\n    address internal _admin;\\n\\n    /// @dev Emits when the contract administrator is changed.\\n    /// @param oldAdmin The address of the previous administrator.\\n    /// @param newAdmin The address of the new administrator.\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /// @dev Get the current administrator of this contract.\\n    /// @return The current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"ADMIN_ACCESS_DENIED\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n}\\n\",\"keccak256\":\"0xf2ce40f1b23052a50a5b2d5ad61fbc04ab6c9fb2e5b1dba17ccddf4507e4649f\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithSuperOperators.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport \\\"./WithAdmin.sol\\\";\\n\\ncontract WithSuperOperators is WithAdmin {\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address superOperator, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external {\\n        require(msg.sender == _admin, \\\"only admin is allowed to add super operators\\\");\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0xa0d9b0e08ccae5e6b1f56e41ef750a68686d8958bc398369ac283aa4440f87ab\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721MandatoryTokenReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5e8bf644.\\ninterface IERC721MandatoryTokenReceiver {\\n    function onERC721BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x4b808c46\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x150b7a02\\n\\n    // needs to implements EIP-165\\n    // function supportsInterface(bytes4 interfaceId)\\n    //     external\\n    //     view\\n    //     returns (bool);\\n}\\n\",\"keccak256\":\"0xb2a8c2fcf496f383bedc0f2925fb9ff51e7a725828fcc73a22fd24f66c57c857\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/child/land/PolygonLandBaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/Address.sol\\\";\\nimport \\\"../../../common/BaseWithStorage/ERC721BaseToken.sol\\\";\\n\\ncontract PolygonLandBaseToken is ERC721BaseToken {\\n    using Address for address;\\n\\n    uint256 internal constant GRID_SIZE = 408;\\n\\n    uint256 internal constant LAYER = 0xFF00000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_1x1 = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_3x3 = 0x0100000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_6x6 = 0x0200000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_12x12 = 0x0300000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant LAYER_24x24 = 0x0400000000000000000000000000000000000000000000000000000000000000;\\n\\n    /**\\n     * @notice Return the name of the token contract\\n     * @return The name of the token contract\\n     */\\n    function name() external pure returns (string memory) {\\n        return \\\"Sandbox's LANDs\\\";\\n    }\\n\\n    /**\\n     * @notice Return the symbol of the token contract\\n     * @return The symbol of the token contract\\n     */\\n    function symbol() external pure returns (string memory) {\\n        return \\\"LAND\\\";\\n    }\\n\\n    // solium-disable-next-line security/no-assign-params\\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /**\\n     * @notice Return the URI of a specific token\\n     * @param id The id of the token\\n     * @return The URI of the token\\n     */\\n    function tokenURI(uint256 id) public view returns (string memory) {\\n        require(_ownerOf(id) != address(0), \\\"Id does not exist\\\");\\n        return string(abi.encodePacked(\\\"https://api.sandbox.game/lands/\\\", uint2str(id), \\\"/metadata.json\\\"));\\n    }\\n\\n    /**\\n     * @notice Check if the contract supports an interface\\n     * 0x01ffc9a7 is ERC-165\\n     * 0x80ac58cd is ERC-721\\n     * 0x5b5e139f is ERC-721 metadata\\n     * @param id The id of the interface\\n     * @return True if the interface is supported\\n     */\\n    function supportsInterface(bytes4 id) public pure override returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd || id == 0x5b5e139f;\\n    }\\n\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        require(sizes.length == xs.length && xs.length == ys.length, \\\"invalid data\\\");\\n        bool metaTx = msg.sender != from && isTrustedForwarder(msg.sender);\\n        if (msg.sender != from && !metaTx) {\\n            require(\\n                _superOperators[msg.sender] || _operatorsForAll[from][msg.sender],\\n                \\\"not authorized to transferMultiQuads\\\"\\n            );\\n        }\\n        uint256 numTokensTransfered = 0;\\n        for (uint256 i = 0; i < sizes.length; i++) {\\n            uint256 size = sizes[i];\\n            _transferQuad(from, to, size, xs[i], ys[i]);\\n            numTokensTransfered += size * size;\\n        }\\n        _numNFTPerAddress[from] -= numTokensTransfered;\\n        _numNFTPerAddress[to] += numTokensTransfered;\\n\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory ids = new uint256[](numTokensTransfered);\\n            uint256 counter = 0;\\n            for (uint256 j = 0; j < sizes.length; j++) {\\n                uint256 size = sizes[j];\\n                for (uint256 i = 0; i < size * size; i++) {\\n                    ids[counter] = _idInPath(i, size, xs[j], ys[j]);\\n                    counter++;\\n                }\\n            }\\n            require(\\n                _checkOnERC721BatchReceived(metaTx ? from : msg.sender, from, to, ids, data),\\n                \\\"erc721 batch transfer rejected by to\\\"\\n            );\\n        }\\n    }\\n\\n    function transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external {\\n        require(from != address(0), \\\"from is zero address\\\");\\n        require(to != address(0), \\\"can't send to zero address\\\");\\n        bool metaTx = msg.sender != from && isTrustedForwarder(msg.sender);\\n        if (msg.sender != from && !metaTx) {\\n            require(\\n                _superOperators[msg.sender] || _operatorsForAll[from][msg.sender],\\n                \\\"not authorized to transferQuad\\\"\\n            );\\n        }\\n        _transferQuad(from, to, size, x, y);\\n        _numNFTPerAddress[from] -= size * size;\\n        _numNFTPerAddress[to] += size * size;\\n\\n        _checkBatchReceiverAcceptQuad(metaTx ? from : msg.sender, from, to, size, x, y, data);\\n    }\\n\\n    function _transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal {\\n        if (size == 1) {\\n            uint256 id1x1 = x + y * GRID_SIZE;\\n            address owner = _ownerOf(id1x1);\\n            require(owner != address(0), \\\"token does not exist\\\");\\n            require(owner == from, \\\"not owner in _transferQuad\\\");\\n            _owners[id1x1] = uint256(uint160(address(to)));\\n        } else {\\n            _regroup(from, to, size, x, y);\\n        }\\n        for (uint256 i = 0; i < size * size; i++) {\\n            emit Transfer(from, to, _idInPath(i, size, x, y));\\n        }\\n    }\\n\\n    function _idInPath(\\n        uint256 i,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256) {\\n        uint256 row = i / size;\\n        if (row % 2 == 0) {\\n            // alow ids to follow a path in a quad\\n            return (x + (i % size)) + ((y + row) * GRID_SIZE);\\n        } else {\\n            return ((x + size) - (1 + (i % size))) + ((y + row) * GRID_SIZE);\\n        }\\n    }\\n\\n    function _regroup(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y\\n    ) internal {\\n        require(x % size == 0 && y % size == 0, \\\"Invalid coordinates\\\");\\n        require(x <= GRID_SIZE - size && y <= GRID_SIZE - size, \\\"Out of bounds\\\");\\n\\n        if (size == 3) {\\n            _regroup3x3(from, to, x, y, true);\\n        } else if (size == 6) {\\n            _regroup6x6(from, to, x, y, true);\\n        } else if (size == 12) {\\n            _regroup12x12(from, to, x, y, true);\\n        } else if (size == 24) {\\n            _regroup24x24(from, to, x, y, true);\\n        } else {\\n            require(false, \\\"Invalid size\\\");\\n        }\\n    }\\n\\n    function _regroup3x3(\\n        address from,\\n        address to,\\n        uint256 x,\\n        uint256 y,\\n        bool set\\n    ) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_3x3 + id;\\n        bool ownerOfAll = true;\\n        for (uint256 xi = x; xi < x + 3; xi++) {\\n            for (uint256 yi = y; yi < y + 3; yi++) {\\n                ownerOfAll = _checkAndClear(from, xi + yi * GRID_SIZE) && ownerOfAll;\\n            }\\n        }\\n        if (set) {\\n            if (!ownerOfAll) {\\n                require(\\n                    _owners[quadId] == uint256(uint160(address(from))) ||\\n                        _owners[LAYER_6x6 + (x / 6) * 6 + ((y / 6) * 6) * GRID_SIZE] ==\\n                        uint256(uint160(address(from))) ||\\n                        _owners[LAYER_12x12 + (x / 12) * 12 + ((y / 12) * 12) * GRID_SIZE] ==\\n                        uint256(uint160(address(from))) ||\\n                        _owners[LAYER_24x24 + (x / 24) * 24 + ((y / 24) * 24) * GRID_SIZE] ==\\n                        uint256(uint160(address(from))),\\n                    \\\"not owner of all sub quads nor parent quads\\\"\\n                );\\n            }\\n            _owners[quadId] = uint256(uint160(address(to)));\\n            return true;\\n        }\\n        return ownerOfAll;\\n    }\\n\\n    function _regroup6x6(\\n        address from,\\n        address to,\\n        uint256 x,\\n        uint256 y,\\n        bool set\\n    ) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_6x6 + id;\\n        bool ownerOfAll = true;\\n        for (uint256 xi = x; xi < x + 6; xi += 3) {\\n            for (uint256 yi = y; yi < y + 6; yi += 3) {\\n                bool ownAllIndividual = _regroup3x3(from, to, xi, yi, false);\\n                uint256 id3x3 = LAYER_3x3 + xi + yi * GRID_SIZE;\\n                uint256 owner3x3 = _owners[id3x3];\\n                if (owner3x3 != 0) {\\n                    if (!ownAllIndividual) {\\n                        require(owner3x3 == uint256(uint160(address(from))), \\\"not owner of 3x3 quad\\\");\\n                    }\\n                    _owners[id3x3] = 0;\\n                }\\n                ownerOfAll = (ownAllIndividual || owner3x3 != 0) && ownerOfAll;\\n            }\\n        }\\n        if (set) {\\n            if (!ownerOfAll) {\\n                require(\\n                    _owners[quadId] == uint256(uint160(address(from))) ||\\n                        _owners[LAYER_12x12 + (x / 12) * 12 + ((y / 12) * 12) * GRID_SIZE] ==\\n                        uint256(uint160(address(from))) ||\\n                        _owners[LAYER_24x24 + (x / 24) * 24 + ((y / 24) * 24) * GRID_SIZE] ==\\n                        uint256(uint160(address(from))),\\n                    \\\"not owner of all sub quads nor parent quads\\\"\\n                );\\n            }\\n            _owners[quadId] = uint256(uint160(address(to)));\\n            return true;\\n        }\\n        return ownerOfAll;\\n    }\\n\\n    function _regroup12x12(\\n        address from,\\n        address to,\\n        uint256 x,\\n        uint256 y,\\n        bool set\\n    ) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_12x12 + id;\\n        bool ownerOfAll = true;\\n        for (uint256 xi = x; xi < x + 12; xi += 6) {\\n            for (uint256 yi = y; yi < y + 12; yi += 6) {\\n                bool ownAllIndividual = _regroup6x6(from, to, xi, yi, false);\\n                uint256 id6x6 = LAYER_6x6 + xi + yi * GRID_SIZE;\\n                uint256 owner6x6 = _owners[id6x6];\\n                if (owner6x6 != 0) {\\n                    if (!ownAllIndividual) {\\n                        require(owner6x6 == uint256(uint160(address(from))), \\\"not owner of 6x6 quad\\\");\\n                    }\\n                    _owners[id6x6] = 0;\\n                }\\n                ownerOfAll = (ownAllIndividual || owner6x6 != 0) && ownerOfAll;\\n            }\\n        }\\n        if (set) {\\n            if (!ownerOfAll) {\\n                require(\\n                    _owners[quadId] == uint256(uint160(address(from))) ||\\n                        _owners[LAYER_24x24 + (x / 24) * 24 + ((y / 24) * 24) * GRID_SIZE] ==\\n                        uint256(uint160(address(from))),\\n                    \\\"not owner of all sub quads nor parent quads\\\"\\n                );\\n            }\\n            _owners[quadId] = uint256(uint160(address(to)));\\n            return true;\\n        }\\n        return ownerOfAll;\\n    }\\n\\n    function _regroup24x24(\\n        address from,\\n        address to,\\n        uint256 x,\\n        uint256 y,\\n        bool set\\n    ) internal returns (bool) {\\n        uint256 id = x + y * GRID_SIZE;\\n        uint256 quadId = LAYER_24x24 + id;\\n        bool ownerOfAll = true;\\n        for (uint256 xi = x; xi < x + 24; xi += 12) {\\n            for (uint256 yi = y; yi < y + 24; yi += 12) {\\n                bool ownAllIndividual = _regroup12x12(from, to, xi, yi, false);\\n                uint256 id12x12 = LAYER_12x12 + xi + yi * GRID_SIZE;\\n                uint256 owner12x12 = _owners[id12x12];\\n                if (owner12x12 != 0) {\\n                    if (!ownAllIndividual) {\\n                        require(owner12x12 == uint256(uint160(address(from))), \\\"not owner of 12x12 quad\\\");\\n                    }\\n                    _owners[id12x12] = 0;\\n                }\\n                ownerOfAll = (ownAllIndividual || owner12x12 != 0) && ownerOfAll;\\n            }\\n        }\\n        if (set) {\\n            if (!ownerOfAll) {\\n                require(\\n                    _owners[quadId] == uint256(uint160(address(from))),\\n                    \\\"not owner of all sub quads not parent quad\\\"\\n                );\\n            }\\n            _owners[quadId] = uint256(uint160(address(to)));\\n            return true;\\n        }\\n        return ownerOfAll || _owners[quadId] == uint256(uint160(address(from)));\\n    }\\n\\n    function _ownerOf(uint256 id) internal view override returns (address) {\\n        require(id & LAYER == 0, \\\"Invalid token id\\\");\\n        uint256 x = id % GRID_SIZE;\\n        uint256 y = id / GRID_SIZE;\\n        uint256 owner1x1 = _owners[id];\\n\\n        if (owner1x1 != 0) {\\n            return address(uint160(owner1x1)); //we check if the quad exists as an 1x1 quad, then 3x3, and so on..\\n        } else {\\n            address owner3x3 = address(uint160(_owners[LAYER_3x3 + (x / 3) * 3 + ((y / 3) * 3) * GRID_SIZE]));\\n            if (owner3x3 != address(0)) {\\n                return owner3x3;\\n            } else {\\n                address owner6x6 = address(uint160(_owners[LAYER_6x6 + (x / 6) * 6 + ((y / 6) * 6) * GRID_SIZE]));\\n                if (owner6x6 != address(0)) {\\n                    return owner6x6;\\n                } else {\\n                    address owner12x12 =\\n                        address(uint160(_owners[LAYER_12x12 + (x / 12) * 12 + ((y / 12) * 12) * GRID_SIZE]));\\n                    if (owner12x12 != address(0)) {\\n                        return owner12x12;\\n                    } else {\\n                        return address(uint160(_owners[LAYER_24x24 + (x / 24) * 24 + ((y / 24) * 24) * GRID_SIZE]));\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _checkAndClear(address from, uint256 id) internal returns (bool) {\\n        uint256 owner = _owners[id];\\n        if (owner != 0) {\\n            require(address(uint160(owner)) == from, \\\"not owner\\\");\\n            _owners[id] = 0;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _checkBatchReceiverAcceptQuad(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes memory data\\n    ) internal {\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            uint256[] memory ids = new uint256[](size * size);\\n            for (uint256 i = 0; i < size * size; i++) {\\n                ids[i] = _idInPath(i, size, x, y);\\n            }\\n            require(_checkOnERC721BatchReceived(operator, from, to, ids, data), \\\"erc721 batch transfer rejected by to\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x77ba3a8d18afa2767deab8b3216b47bf62b23c69c175c1ce7c21d053423ffa1e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613ebe806100206000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c8063654b748a116100f9578063ac9fe42111610097578063ce1b815f11610071578063ce1b815f146103fe578063e985e9c51461040f578063eaa5e06714610422578063eeb5a5d114610435576101b9565b8063ac9fe421146103c5578063b88d4fde146103d8578063c87b56dd146103eb576101b9565b806379cc6790116100d357806379cc6790146103535780638f2839701461036657806395d89b4114610379578063a22cb465146103b2576101b9565b8063654b748a146102f55780636e9960c31461032157806370a0823114610332576101b9565b806328cfbd461161016657806342842e0e1161014057806342842e0e1461029a57806342966c68146102ad578063572b6c05146102c05780636352211e146102e2576101b9565b806328cfbd46146102615780632b9917461461027457806338bb305a14610287576101b9565b8063095ea7b311610197578063095ea7b31461022657806315ddc5351461023b57806323b872dd1461024e576101b9565b806301ffc9a7146101be57806306fdde03146101e6578063081812fc146101fb575b600080fd5b6101d16101cc366004613b9a565b610448565b60405190151581526020015b60405180910390f35b6101ee6104e7565b6040516101dd9190613d24565b61020e610209366004613bd9565b61051f565b6040516001600160a01b0390911681526020016101dd565b610239610234366004613b71565b6105be565b005b6102396102493660046138e8565b6106f6565b61023961025c3660046139b8565b610770565b61023961026f3660046138e8565b610825565b6102396102823660046139b8565b61089a565b610239610295366004613ac8565b610a2a565b6102396102a83660046139b8565b610c7e565b6102396102bb366004613bd9565b610c99565b6101d16102ce3660046137b9565b6002546001600160a01b0390811691161490565b61020e6102f0366004613bd9565b610cb6565b6101d16103033660046137b9565b6001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b031661020e565b6103456103403660046137b9565b610d19565b6040519081526020016101dd565b610239610361366004613b71565b610d8d565b6102396103743660046137b9565b610eea565b60408051808201909152600481527f4c414e440000000000000000000000000000000000000000000000000000000060208201526101ee565b6102396103c0366004613b48565b610fba565b6102396103d3366004613b48565b610fd0565b6102396103e63660046139f3565b6110b3565b6101ee6103f9366004613bd9565b611140565b6002546001600160a01b031661020e565b6101d161041d3660046137d3565b6111d3565b610239610430366004613805565b61122a565b610239610443366004613976565b61178e565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614806104ab57507f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b806104df57507f5b5e139f000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b60408051808201909152600f81527f53616e64626f782773204c414e4473000000000000000000000000000000000060208201525b90565b600080600061052d8461187f565b90925090506001600160a01b03821661058d5760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064015b60405180910390fd5b80156105b3575050506000818152600660205260409020546001600160a01b03166104e2565b6000925050506104e2565b6000818152600460205260408120549081906105d86118cd565b90506001600160a01b0382166106305760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e0000000000000000000000000000006044820152606401610584565b806001600160a01b0316826001600160a01b0316148061066857506001600160a01b03811660009081526001602052604090205460ff165b8061069857506001600160a01b0380831660009081526005602090815260408083209385168352929052205460ff165b6106e45760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c00000000000000000000006044820152606401610584565b6106ef838686611917565b5050505050565b610768868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a018190048102820181019092528881529250889150879081908401838280828437600092018290525092506119c1915050565b505050505050565b61077b838383611d7b565b50610787838383611f93565b6001600160a01b0382163b151580156107ac57506107ac826317a2fd9160e21b612051565b15610820576107d46107bc6118cd565b84848460405180602001604052806000815250612118565b6108205760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a454354454400000000000000006044820152606401610584565b505050565b610768868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a018190048102820181019092528881529250889150879081908401838280828437600092019190915250600192506119c1915050565b600081815260046020526040812054906108b26118cd565b90506001600160a01b03851661090a5760405162461bcd60e51b815260206004820152601360248201527f5a45524f5f414444524553535f53454e444552000000000000000000000000006044820152606401610584565b846001600160a01b0316816001600160a01b0316148061094257506001600160a01b03811660009081526001602052604090205460ff165b8061097257506001600160a01b0380861660009081526005602090815260408083209385168352929052205460ff165b6109be5760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c00000000000000000000006044820152606401610584565b846001600160a01b0316826001600160a01b031614610a1f5760405162461bcd60e51b815260206004820152601060248201527f4f574e45525f4e4f545f53454e444552000000000000000000000000000000006044820152606401610584565b6106ef828585611917565b6001600160a01b038716610a805760405162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f20616464726573730000000000000000000000006044820152606401610584565b6001600160a01b038616610ad65760405162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f20616464726573730000000000006044820152606401610584565b6000336001600160a01b03891614801590610afb57506002546001600160a01b031633145b9050336001600160a01b03891614801590610b14575080155b15610ba6573360009081526001602052604090205460ff1680610b5a57506001600160a01b038816600090815260056020908152604080832033845290915290205460ff165b610ba65760405162461bcd60e51b815260206004820152601e60248201527f6e6f7420617574686f72697a656420746f207472616e736665725175616400006044820152606401610584565b610bb388888888886121d8565b610bbd8680613d88565b6001600160a01b03891660009081526003602052604081208054909190610be5908490613da7565b90915550610bf590508680613d88565b6001600160a01b03881660009081526003602052604081208054909190610c1d908490613d37565b90915550610c74905081610c315733610c33565b885b898989898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235e92505050565b5050505050505050565b610820838383604051806020016040528060008152506110b3565b610cb3610ca46118cd565b610cad836124cb565b8361277a565b50565b6000610cc1826124cb565b90506001600160a01b0381166104e25760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354414e545f544f4b454e0000000000000000000000000000006044820152606401610584565b60006001600160a01b038216610d715760405162461bcd60e51b815260206004820152601260248201527f5a45524f5f414444524553535f4f574e455200000000000000000000000000006044820152606401610584565b506001600160a01b031660009081526003602052604090205490565b6001600160a01b038216610de35760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f414444524553530000000000000000000000006044820152606401610584565b600080610def8361187f565b915091506000610dfd6118cd565b9050846001600160a01b0316816001600160a01b03161480610e405750818015610e4057506000848152600660205260409020546001600160a01b038281169116145b80610e6357506001600160a01b03811660009081526001602052604090205460ff165b80610e9357506001600160a01b0380861660009081526005602090815260408083209385168352929052205460ff165b610edf5760405162461bcd60e51b815260206004820152601160248201527f554e415554484f52495a45445f4255524e0000000000000000000000000000006044820152606401610584565b6106ef85848661277a565b6000546001600160a01b03163314610f445760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e494544000000000000000000000000006044820152606401610584565b600054604080516001600160a01b03928316815291831660208301527f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f910160405180910390a16000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610fcc610fc56118cd565b8383612882565b5050565b6000546001600160a01b031633146110505760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f727300000000000000000000000000000000000000006064820152608401610584565b6001600160a01b038216600081815260016020908152604091829020805460ff19168515159081179091558251938452908301527f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d8910160405180910390a15050565b6110be848484611d7b565b506110ca848484611f93565b6001600160a01b0383163b1561113a576110ee6110e56118cd565b85858585612118565b61113a5760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a454354454400000000000000006044820152606401610584565b50505050565b6060600061114d836124cb565b6001600160a01b031614156111a45760405162461bcd60e51b815260206004820152601160248201527f496420646f6573206e6f742065786973740000000000000000000000000000006044820152606401610584565b6111ad82612958565b6040516020016111bd9190613c1d565b6040516020818303038152906040529050919050565b6001600160a01b03808316600090815260056020908152604080832093851683529290529081205460ff168061122157506001600160a01b03821660009081526001602052604090205460ff165b90505b92915050565b6001600160a01b038a166112805760405162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f20616464726573730000000000000000000000006044820152606401610584565b6001600160a01b0389166112d65760405162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f20616464726573730000000000006044820152606401610584565b86851480156112e457508483145b6113305760405162461bcd60e51b815260206004820152600c60248201527f696e76616c6964206461746100000000000000000000000000000000000000006044820152606401610584565b6000336001600160a01b038c161480159061135557506002546001600160a01b031633145b9050336001600160a01b038c161480159061136e575080155b15611425573360009081526001602052604090205460ff16806113b457506001600160a01b038b16600090815260056020908152604080832033845290915290205460ff165b6114255760405162461bcd60e51b8152602060048201526024808201527f6e6f7420617574686f72697a656420746f207472616e736665724d756c74695160448201527f75616473000000000000000000000000000000000000000000000000000000006064820152608401610584565b6000805b898110156114df5760008b8b8381811061145357634e487b7160e01b600052603260045260246000fd5b9050602002013590506114b58e8e838d8d8781811061148257634e487b7160e01b600052603260045260246000fd5b905060200201358c8c888181106114a957634e487b7160e01b600052603260045260246000fd5b905060200201356121d8565b6114bf8180613d88565b6114c99084613d37565b92505080806114d790613e01565b915050611429565b506001600160a01b038c1660009081526003602052604081208054839290611508908490613da7565b90915550506001600160a01b038b1660009081526003602052604081208054839290611535908490613d37565b90915550506001600160a01b038b163b1515801561155f575061155f8b6317a2fd9160e21b612051565b156117805760008167ffffffffffffffff81111561158d57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156115b6578160200160208202803683370190505b5090506000805b8b8110156116bc5760008d8d838181106115e757634e487b7160e01b600052603260045260246000fd5b90506020020135905060005b6115fd8280613d88565b8110156116a75761165c81838f8f8781811061162957634e487b7160e01b600052603260045260246000fd5b905060200201358e8e8881811061165057634e487b7160e01b600052603260045260246000fd5b90506020020135612ad2565b85858151811061167c57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528361169181613e01565b945050808061169f90613e01565b9150506115f3565b505080806116b490613e01565b9150506115bd565b5061170c846116cb57336116cd565b8e5b8f8f858a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612b7592505050565b61177d5760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a6563746564206260448201527f7920746f000000000000000000000000000000000000000000000000000000006064820152608401610584565b50505b505050505050505050505050565b6001600160a01b0383166117e45760405162461bcd60e51b815260206004820152601660248201527f496e76616c69642073656e6465722061646472657373000000000000000000006044820152606401610584565b60006117ee6118cd565b9050836001600160a01b0316816001600160a01b0316148061182857506001600160a01b03811660009081526001602052604090205460ff165b6118745760405162461bcd60e51b815260206004820152601c60248201527f554e415554484f52495a45445f415050524f56455f464f525f414c4c000000006044820152606401610584565b61113a848484612882565b60008181526004602052604081205481907401000000000000000000000000000000000000000080821614156118b857600092506118bc565b8092505b600160ff1b80821614915050915091565b6002546000906001600160a01b031633141561191057507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c61051c565b503361051c565b826001600160a01b038316611938576119338285836000612c34565b61197a565b6119458285836001612c34565b6000828152600660205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790555b81836001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a450505050565b60006119cb6118cd565b90506000866001600160a01b0316826001600160a01b03161480611a0757506001600160a01b03821660009081526001602052604090205460ff165b80611a3757506001600160a01b0380881660009081526005602090815260408083209386168352929052205460ff165b90506001600160a01b038716611a8f5760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f414444524553530000000000000000000000006044820152606401610584565b6001600160a01b038616611ae55760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f4144445245535300000000000000000000000000006044820152606401610584565b845160005b81811015611c7c576000878281518110611b1457634e487b7160e01b600052603260045260246000fd5b60200260200101519050600080611b2a8361187f565b915091508b6001600160a01b0316826001600160a01b031614611b8f5760405162461bcd60e51b815260206004820152601b60248201527f42415443485452414e5346455246524f4d5f4e4f545f4f574e455200000000006044820152606401610584565b8580611bbc5750808015611bbc57506000838152600660205260409020546001600160a01b038881169116145b611c085760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610584565b600083815260046020526040812054611c25918591908e90612c34565b828b6001600160a01b03168d6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050508080611c7490613e01565b915050611aea565b50866001600160a01b0316886001600160a01b031614611cf1576001600160a01b03881660009081526003602052604081208054839290611cbe908490613da7565b90915550506001600160a01b03871660009081526003602052604081208054839290611ceb908490613d37565b90915550505b6001600160a01b0387163b15158015611d1d57508380611d1d5750611d1d876317a2fd9160e21b612051565b15610c7457611d2f8389898989612b75565b610c745760405162461bcd60e51b815260206004820152601e60248201527f4552433732315f42415443485f5452414e534645525f52454a454354454400006044820152606401610584565b6000806000611d898461187f565b915091506000611d976118cd565b90506001600160a01b038316611def5760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e0000000000000000000000000000006044820152606401610584565b866001600160a01b0316836001600160a01b031614611e505760405162461bcd60e51b815260206004820152601760248201527f434845434b5452414e534645525f4e4f545f4f574e45520000000000000000006044820152606401610584565b6001600160a01b038616611ea65760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f4144445245535300000000000000000000000000006044820152606401610584565b826001600160a01b0316816001600160a01b03161480611ede57506001600160a01b03811660009081526001602052604090205460ff165b80611f0e57506001600160a01b0380881660009081526005602090815260408083209385168352929052205460ff165b80611f3a5750818015611f3a57506000858152600660205260409020546001600160a01b038281169116145b611f865760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e5346455200000000000000000000006044820152606401610584565b5060019695505050505050565b6001600160a01b0383166000908152600360205260408120805491611fb783613dea565b90915550506001600160a01b0382166000908152600360205260408120805491611fe083613e01565b919050555061200b8160046000611ff48590565b815260200190815260200160002054846000612c34565b80826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b604080516001600160e01b031983166024808301919091528251808303909101815260449091018252602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a7000000000000000000000000000000000000000000000000000000001781528251935160008082529485948594909392908183858c612710fa955080519450505050609e5a1161210457634e487b7160e01b600052600160045260246000fd5b82801561210e5750815b9695505050505050565b600080846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b815260040161214d9493929190613cf2565b602060405180830381600087803b15801561216757600080fd5b505af115801561217b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219f9190613bbd565b6001600160e01b0319167f150b7a0200000000000000000000000000000000000000000000000000000000149150505b95945050505050565b82600114156122df5760006121ef61019883613d88565b6121f99084613d37565b90506000612206826124cb565b90506001600160a01b03811661225e5760405162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f742065786973740000000000000000000000006044820152606401610584565b866001600160a01b0316816001600160a01b0316146122bf5760405162461bcd60e51b815260206004820152601a60248201527f6e6f74206f776e657220696e205f7472616e73666572517561640000000000006044820152606401610584565b5060009081526004602052604090206001600160a01b03851690556122ec565b6122ec8585858585612cc7565b60005b6122f98480613d88565b8110156107685761230c81858585612ad2565b856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a48061235681613e01565b9150506122ef565b6001600160a01b0385163b151580156123835750612383856317a2fd9160e21b612051565b156124c25760006123948580613d88565b67ffffffffffffffff8111156123ba57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156123e3578160200160208202803683370190505b50905060005b6123f38680613d88565b8110156124435761240681878787612ad2565b82828151811061242657634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061243b81613e01565b9150506123e9565b506124518888888486612b75565b610c745760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a6563746564206260448201527f7920746f000000000000000000000000000000000000000000000000000000006064820152608401610584565b50505050505050565b60007fff0000000000000000000000000000000000000000000000000000000000000082161561253d5760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e206964000000000000000000000000000000006044820152606401610584565b600061254b61019884613e1c565b9050600061255b61019885613d74565b600085815260046020526040902054909150801561257d5792506104e2915050565b6000600481610198612590600387613d74565b61259b906003613d88565b6125a59190613d88565b6125b0600388613d74565b6125bb906003613d88565b6125c990600160f81b613d37565b6125d39190613d37565b815260208101919091526040016000205490506001600160a01b038116156126005793506104e292505050565b6000600481610198612613600688613d74565b61261e906006613d88565b6126289190613d88565b612633600689613d74565b61263e906006613d88565b61264c90600160f91b613d37565b6126569190613d37565b815260208101919091526040016000205490506001600160a01b038116156126845794506104e29350505050565b6000600481610198612697600c89613d74565b6126a290600c613d88565b6126ac9190613d88565b6126b7600c8a613d74565b6126c290600c613d88565b6126d090600360f81b613d37565b6126da9190613d37565b815260208101919091526040016000205490506001600160a01b038116156127095795506104e2945050505050565b6004600061019861271b601889613d74565b612726906018613d88565b6127309190613d88565b61273b60188a613d74565b612746906018613d88565b61275490600160fa1b613d37565b61275e9190613d37565b81526020019081526020016000205496505050505050506104e2565b816001600160a01b0316836001600160a01b0316146127db5760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e455200000000000000000000000000000000000000000000006044820152606401610584565b80740100000000000000000000000000000000000000006128016001600160ff1b613da7565b6000838152600460209081526040808320805494909416949094179092556001600160a01b0387168152600390915290812080549161283f83613dea565b909155505060405182906000906001600160a01b038716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a450505050565b6001600160a01b03821660009081526001602052604090205460ff16156128eb5760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f415050524f56414c5f4348414e47450000000000000000006044820152606401610584565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b606081612999575060408051808201909152600181527f300000000000000000000000000000000000000000000000000000000000000060208201526104e2565b8160005b81156129c357806129ad81613e01565b91506129bc9050600a83613d74565b915061299d565b60008167ffffffffffffffff8111156129ec57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612a16576020820181803683370190505b509050815b8515612ac957612a2c600182613da7565b90506000612a3b600a88613d74565b612a4690600a613d88565b612a509088613da7565b612a5b906030613d4f565b905060008160f81b905080848481518110612a8657634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612ac0600a89613d74565b97505050612a1b565b50949350505050565b600080612adf8587613d74565b9050612aec600282613e1c565b612b2d57610198612afd8285613d37565b612b079190613d88565b612b118688613e1c565b612b1b9086613d37565b612b259190613d37565b915050612b6d565b610198612b3a8285613d37565b612b449190613d88565b612b4e8688613e1c565b612b59906001613d37565b612b638787613d37565b612b1b9190613da7565b949350505050565b600080846001600160a01b0316634b808c46888887876040518563ffffffff1660e01b8152600401612baa9493929190613c89565b602060405180830381600087803b158015612bc457600080fd5b505af1158015612bd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfc9190613bbd565b6001600160e01b0319167f4b808c46000000000000000000000000000000000000000000000000000000001491505095945050505050565b8015612c78576000848152600460205260409020600160ff1b6001600160a01b03841673ffffffffffffffffffffffffffffffffffffffff1986161717905561113a565b6001600160a01b038216612c916001600160ff1b613da7565b841673ffffffffffffffffffffffffffffffffffffffff1916176004600086815260208101919091526040016000205550505050565b612cd18383613e1c565b158015612ce55750612ce38382613e1c565b155b612d315760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e61746573000000000000000000000000006044820152606401610584565b612d3d83610198613da7565b8211158015612d575750612d5383610198613da7565b8111155b612da35760405162461bcd60e51b815260206004820152600d60248201527f4f7574206f6620626f756e6473000000000000000000000000000000000000006044820152606401610584565b8260031415612dc057612dba858584846001612e4d565b506106ef565b8260061415612dd757612dba85858484600161311e565b82600c1415612dee57612dba8585848460016132ba565b8260181415612e0557612dba858584846001613456565b60405162461bcd60e51b815260206004820152600c60248201527f496e76616c69642073697a6500000000000000000000000000000000000000006044820152606401610584565b600080612e5c61019885613d88565b612e669086613d37565b90506000612e7882600160f81b613d37565b90506001865b612e89886003613d37565b811015612ef357865b612e9d886003613d37565b811015612ee057612ec38b612eb461019884613d88565b612ebe9085613d37565b613671565b8015612ecc5750825b925080612ed881613e01565b915050612e92565b5080612eeb81613e01565b915050612e7e565b50841561311257806130ed576000828152600460205260409020546001600160a01b038a161480612f8f57506001600160a01b03891660046000610198612f3b60068b613d74565b612f46906006613d88565b612f509190613d88565b612f5b60068c613d74565b612f66906006613d88565b612f7490600160f91b613d37565b612f7e9190613d37565b815260200190815260200160002054145b8061300557506001600160a01b03891660046000610198612fb1600c8b613d74565b612fbc90600c613d88565b612fc69190613d88565b612fd1600c8c613d74565b612fdc90600c613d88565b612fea90600360f81b613d37565b612ff49190613d37565b815260200190815260200160002054145b8061307b57506001600160a01b0389166004600061019861302760188b613d74565b613032906018613d88565b61303c9190613d88565b61304760188c613d74565b613052906018613d88565b61306090600160fa1b613d37565b61306a9190613d37565b815260200190815260200160002054145b6130ed5760405162461bcd60e51b815260206004820152602b60248201527f6e6f74206f776e6572206f6620616c6c20737562207175616473206e6f72207060448201527f6172656e742071756164730000000000000000000000000000000000000000006064820152608401610584565b5060009081526004602052604090206001600160a01b038716905550600190506121cf565b98975050505050505050565b60008061312d61019885613d88565b6131379086613d37565b9050600061314982600160f91b613d37565b90506001865b61315a886006613d37565b81101561327257865b61316e886006613d37565b81101561325f5760006131858c8c85856000612e4d565b9050600061319561019884613d88565b6131a385600160f81b613d37565b6131ad9190613d37565b60008181526004602052604090205490915080156132325782613222578d6001600160a01b031681146132225760405162461bcd60e51b815260206004820152601560248201527f6e6f74206f776e6572206f6620337833207175616400000000000000000000006044820152606401610584565b6000828152600460205260408120555b828061323d57508015155b80156132465750855b95505050506003816132589190613d37565b9050613163565b5061326b600382613d37565b905061314f565b50841561311257806130ed576000828152600460205260409020546001600160a01b038a16148061300557506001600160a01b03891660046000610198612fb1600c8b613d74565b6000806132c961019885613d88565b6132d39086613d37565b905060006132e582600360f81b613d37565b90506001865b6132f688600c613d37565b81101561340e57865b61330a88600c613d37565b8110156133fb5760006133218c8c8585600061311e565b9050600061333161019884613d88565b61333f85600160f91b613d37565b6133499190613d37565b60008181526004602052604090205490915080156133ce57826133be578d6001600160a01b031681146133be5760405162461bcd60e51b815260206004820152601560248201527f6e6f74206f776e6572206f6620367836207175616400000000000000000000006044820152606401610584565b6000828152600460205260408120555b82806133d957508015155b80156133e25750855b95505050506006816133f49190613d37565b90506132ff565b50613407600682613d37565b90506132eb565b50841561311257806130ed576000828152600460205260409020546001600160a01b038a16148061307b57506001600160a01b0389166004600061019861302760188b613d74565b60008061346561019885613d88565b61346f9086613d37565b9050600061348182600160fa1b613d37565b90506001865b613492886018613d37565b8110156135aa57865b6134a6886018613d37565b8110156135975760006134bd8c8c858560006132ba565b905060006134cd61019884613d88565b6134db85600360f81b613d37565b6134e59190613d37565b600081815260046020526040902054909150801561356a578261355a578d6001600160a01b0316811461355a5760405162461bcd60e51b815260206004820152601760248201527f6e6f74206f776e6572206f6620313278313220717561640000000000000000006044820152606401610584565b6000828152600460205260408120555b828061357557508015155b801561357e5750855b9550505050600c816135909190613d37565b905061349b565b506135a3600c82613d37565b9050613487565b50841561364257806130ed576000828152600460205260409020546001600160a01b038a16146130ed5760405162461bcd60e51b815260206004820152602a60248201527f6e6f74206f776e6572206f6620616c6c20737562207175616473206e6f74207060448201527f6172656e742071756164000000000000000000000000000000000000000000006064820152608401610584565b808061366457506000828152600460205260409020546001600160a01b038a16145b9998505050505050505050565b60008181526004602052604081205480156136ff57836001600160a01b0316816001600160a01b0316146136e75760405162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e657200000000000000000000000000000000000000000000006044820152606401610584565b50506000818152600460205260408120556001611224565b5060009392505050565b80356001600160a01b03811681146104e257600080fd5b60008083601f840112613731578081fd5b50813567ffffffffffffffff811115613748578182fd5b602083019150836020808302850101111561376257600080fd5b9250929050565b803580151581146104e257600080fd5b60008083601f84011261378a578182fd5b50813567ffffffffffffffff8111156137a1578182fd5b60208301915083602082850101111561376257600080fd5b6000602082840312156137ca578081fd5b61122182613709565b600080604083850312156137e5578081fd5b6137ee83613709565b91506137fc60208401613709565b90509250929050565b60008060008060008060008060008060c08b8d031215613823578586fd5b61382c8b613709565b995061383a60208c01613709565b985060408b013567ffffffffffffffff80821115613856578788fd5b6138628e838f01613720565b909a50985060608d013591508082111561387a578788fd5b6138868e838f01613720565b909850965060808d013591508082111561389e578586fd5b6138aa8e838f01613720565b909650945060a08d01359150808211156138c2578384fd5b506138cf8d828e01613779565b915080935050809150509295989b9194979a5092959850565b60008060008060008060808789031215613900578182fd5b61390987613709565b955061391760208801613709565b9450604087013567ffffffffffffffff80821115613933578384fd5b61393f8a838b01613720565b90965094506060890135915080821115613957578384fd5b5061396489828a01613779565b979a9699509497509295939492505050565b60008060006060848603121561398a578283fd5b61399384613709565b92506139a160208501613709565b91506139af60408501613769565b90509250925092565b6000806000606084860312156139cc578283fd5b6139d584613709565b92506139e360208501613709565b9150604084013590509250925092565b60008060008060808587031215613a08578384fd5b613a1185613709565b9350613a1f60208601613709565b925060408501359150606085013567ffffffffffffffff80821115613a42578283fd5b818701915087601f830112613a55578283fd5b813581811115613a6757613a67613e5c565b604051601f8201601f19908116603f01168101908382118183101715613a8f57613a8f613e5c565b816040528281528a6020848701011115613aa7578586fd5b82602086016020830137918201602001949094529598949750929550505050565b600080600080600080600060c0888a031215613ae2578283fd5b613aeb88613709565b9650613af960208901613709565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff811115613b29578283fd5b613b358a828b01613779565b989b979a50959850939692959293505050565b60008060408385031215613b5a578182fd5b613b6383613709565b91506137fc60208401613769565b60008060408385031215613b83578182fd5b613b8c83613709565b946020939093013593505050565b600060208284031215613bab578081fd5b8135613bb681613e72565b9392505050565b600060208284031215613bce578081fd5b8151613bb681613e72565b600060208284031215613bea578081fd5b5035919050565b60008151808452613c09816020860160208601613dbe565b601f01601f19169290920160200192915050565b60007f68747470733a2f2f6170692e73616e64626f782e67616d652f6c616e64732f0082528251613c5581601f850160208701613dbe565b7f2f6d657461646174612e6a736f6e000000000000000000000000000000000000601f939091019283015250602d01919050565b6000608082016001600160a01b03808816845260208188168186015260806040860152829150865180845260a0860192508188019350845b81811015613cdd57845184529382019392820192600101613cc1565b50505083810360608501526131128186613bf1565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261210e6080830184613bf1565b6000602082526112216020830184613bf1565b60008219821115613d4a57613d4a613e30565b500190565b600060ff821660ff84168060ff03821115613d6c57613d6c613e30565b019392505050565b600082613d8357613d83613e46565b500490565b6000816000190483118215151615613da257613da2613e30565b500290565b600082821015613db957613db9613e30565b500390565b60005b83811015613dd9578181015183820152602001613dc1565b8381111561113a5750506000910152565b600081613df957613df9613e30565b506000190190565b6000600019821415613e1557613e15613e30565b5060010190565b600082613e2b57613e2b613e46565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610cb357600080fdfea2646970667358221220e32cc4cd99a801691de25a2d5e4e438f881f2245296f0472d5f527c4cb21dbe964736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101b95760003560e01c8063654b748a116100f9578063ac9fe42111610097578063ce1b815f11610071578063ce1b815f146103fe578063e985e9c51461040f578063eaa5e06714610422578063eeb5a5d114610435576101b9565b8063ac9fe421146103c5578063b88d4fde146103d8578063c87b56dd146103eb576101b9565b806379cc6790116100d357806379cc6790146103535780638f2839701461036657806395d89b4114610379578063a22cb465146103b2576101b9565b8063654b748a146102f55780636e9960c31461032157806370a0823114610332576101b9565b806328cfbd461161016657806342842e0e1161014057806342842e0e1461029a57806342966c68146102ad578063572b6c05146102c05780636352211e146102e2576101b9565b806328cfbd46146102615780632b9917461461027457806338bb305a14610287576101b9565b8063095ea7b311610197578063095ea7b31461022657806315ddc5351461023b57806323b872dd1461024e576101b9565b806301ffc9a7146101be57806306fdde03146101e6578063081812fc146101fb575b600080fd5b6101d16101cc366004613b9a565b610448565b60405190151581526020015b60405180910390f35b6101ee6104e7565b6040516101dd9190613d24565b61020e610209366004613bd9565b61051f565b6040516001600160a01b0390911681526020016101dd565b610239610234366004613b71565b6105be565b005b6102396102493660046138e8565b6106f6565b61023961025c3660046139b8565b610770565b61023961026f3660046138e8565b610825565b6102396102823660046139b8565b61089a565b610239610295366004613ac8565b610a2a565b6102396102a83660046139b8565b610c7e565b6102396102bb366004613bd9565b610c99565b6101d16102ce3660046137b9565b6002546001600160a01b0390811691161490565b61020e6102f0366004613bd9565b610cb6565b6101d16103033660046137b9565b6001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b031661020e565b6103456103403660046137b9565b610d19565b6040519081526020016101dd565b610239610361366004613b71565b610d8d565b6102396103743660046137b9565b610eea565b60408051808201909152600481527f4c414e440000000000000000000000000000000000000000000000000000000060208201526101ee565b6102396103c0366004613b48565b610fba565b6102396103d3366004613b48565b610fd0565b6102396103e63660046139f3565b6110b3565b6101ee6103f9366004613bd9565b611140565b6002546001600160a01b031661020e565b6101d161041d3660046137d3565b6111d3565b610239610430366004613805565b61122a565b610239610443366004613976565b61178e565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614806104ab57507f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b806104df57507f5b5e139f000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b60408051808201909152600f81527f53616e64626f782773204c414e4473000000000000000000000000000000000060208201525b90565b600080600061052d8461187f565b90925090506001600160a01b03821661058d5760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064015b60405180910390fd5b80156105b3575050506000818152600660205260409020546001600160a01b03166104e2565b6000925050506104e2565b6000818152600460205260408120549081906105d86118cd565b90506001600160a01b0382166106305760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e0000000000000000000000000000006044820152606401610584565b806001600160a01b0316826001600160a01b0316148061066857506001600160a01b03811660009081526001602052604090205460ff165b8061069857506001600160a01b0380831660009081526005602090815260408083209385168352929052205460ff165b6106e45760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c00000000000000000000006044820152606401610584565b6106ef838686611917565b5050505050565b610768868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a018190048102820181019092528881529250889150879081908401838280828437600092018290525092506119c1915050565b505050505050565b61077b838383611d7b565b50610787838383611f93565b6001600160a01b0382163b151580156107ac57506107ac826317a2fd9160e21b612051565b15610820576107d46107bc6118cd565b84848460405180602001604052806000815250612118565b6108205760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a454354454400000000000000006044820152606401610584565b505050565b610768868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a018190048102820181019092528881529250889150879081908401838280828437600092019190915250600192506119c1915050565b600081815260046020526040812054906108b26118cd565b90506001600160a01b03851661090a5760405162461bcd60e51b815260206004820152601360248201527f5a45524f5f414444524553535f53454e444552000000000000000000000000006044820152606401610584565b846001600160a01b0316816001600160a01b0316148061094257506001600160a01b03811660009081526001602052604090205460ff165b8061097257506001600160a01b0380861660009081526005602090815260408083209385168352929052205460ff165b6109be5760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c00000000000000000000006044820152606401610584565b846001600160a01b0316826001600160a01b031614610a1f5760405162461bcd60e51b815260206004820152601060248201527f4f574e45525f4e4f545f53454e444552000000000000000000000000000000006044820152606401610584565b6106ef828585611917565b6001600160a01b038716610a805760405162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f20616464726573730000000000000000000000006044820152606401610584565b6001600160a01b038616610ad65760405162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f20616464726573730000000000006044820152606401610584565b6000336001600160a01b03891614801590610afb57506002546001600160a01b031633145b9050336001600160a01b03891614801590610b14575080155b15610ba6573360009081526001602052604090205460ff1680610b5a57506001600160a01b038816600090815260056020908152604080832033845290915290205460ff165b610ba65760405162461bcd60e51b815260206004820152601e60248201527f6e6f7420617574686f72697a656420746f207472616e736665725175616400006044820152606401610584565b610bb388888888886121d8565b610bbd8680613d88565b6001600160a01b03891660009081526003602052604081208054909190610be5908490613da7565b90915550610bf590508680613d88565b6001600160a01b03881660009081526003602052604081208054909190610c1d908490613d37565b90915550610c74905081610c315733610c33565b885b898989898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061235e92505050565b5050505050505050565b610820838383604051806020016040528060008152506110b3565b610cb3610ca46118cd565b610cad836124cb565b8361277a565b50565b6000610cc1826124cb565b90506001600160a01b0381166104e25760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354414e545f544f4b454e0000000000000000000000000000006044820152606401610584565b60006001600160a01b038216610d715760405162461bcd60e51b815260206004820152601260248201527f5a45524f5f414444524553535f4f574e455200000000000000000000000000006044820152606401610584565b506001600160a01b031660009081526003602052604090205490565b6001600160a01b038216610de35760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f414444524553530000000000000000000000006044820152606401610584565b600080610def8361187f565b915091506000610dfd6118cd565b9050846001600160a01b0316816001600160a01b03161480610e405750818015610e4057506000848152600660205260409020546001600160a01b038281169116145b80610e6357506001600160a01b03811660009081526001602052604090205460ff165b80610e9357506001600160a01b0380861660009081526005602090815260408083209385168352929052205460ff165b610edf5760405162461bcd60e51b815260206004820152601160248201527f554e415554484f52495a45445f4255524e0000000000000000000000000000006044820152606401610584565b6106ef85848661277a565b6000546001600160a01b03163314610f445760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e494544000000000000000000000000006044820152606401610584565b600054604080516001600160a01b03928316815291831660208301527f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f910160405180910390a16000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610fcc610fc56118cd565b8383612882565b5050565b6000546001600160a01b031633146110505760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f727300000000000000000000000000000000000000006064820152608401610584565b6001600160a01b038216600081815260016020908152604091829020805460ff19168515159081179091558251938452908301527f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d8910160405180910390a15050565b6110be848484611d7b565b506110ca848484611f93565b6001600160a01b0383163b1561113a576110ee6110e56118cd565b85858585612118565b61113a5760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a454354454400000000000000006044820152606401610584565b50505050565b6060600061114d836124cb565b6001600160a01b031614156111a45760405162461bcd60e51b815260206004820152601160248201527f496420646f6573206e6f742065786973740000000000000000000000000000006044820152606401610584565b6111ad82612958565b6040516020016111bd9190613c1d565b6040516020818303038152906040529050919050565b6001600160a01b03808316600090815260056020908152604080832093851683529290529081205460ff168061122157506001600160a01b03821660009081526001602052604090205460ff165b90505b92915050565b6001600160a01b038a166112805760405162461bcd60e51b815260206004820152601460248201527f66726f6d206973207a65726f20616464726573730000000000000000000000006044820152606401610584565b6001600160a01b0389166112d65760405162461bcd60e51b815260206004820152601a60248201527f63616e27742073656e6420746f207a65726f20616464726573730000000000006044820152606401610584565b86851480156112e457508483145b6113305760405162461bcd60e51b815260206004820152600c60248201527f696e76616c6964206461746100000000000000000000000000000000000000006044820152606401610584565b6000336001600160a01b038c161480159061135557506002546001600160a01b031633145b9050336001600160a01b038c161480159061136e575080155b15611425573360009081526001602052604090205460ff16806113b457506001600160a01b038b16600090815260056020908152604080832033845290915290205460ff165b6114255760405162461bcd60e51b8152602060048201526024808201527f6e6f7420617574686f72697a656420746f207472616e736665724d756c74695160448201527f75616473000000000000000000000000000000000000000000000000000000006064820152608401610584565b6000805b898110156114df5760008b8b8381811061145357634e487b7160e01b600052603260045260246000fd5b9050602002013590506114b58e8e838d8d8781811061148257634e487b7160e01b600052603260045260246000fd5b905060200201358c8c888181106114a957634e487b7160e01b600052603260045260246000fd5b905060200201356121d8565b6114bf8180613d88565b6114c99084613d37565b92505080806114d790613e01565b915050611429565b506001600160a01b038c1660009081526003602052604081208054839290611508908490613da7565b90915550506001600160a01b038b1660009081526003602052604081208054839290611535908490613d37565b90915550506001600160a01b038b163b1515801561155f575061155f8b6317a2fd9160e21b612051565b156117805760008167ffffffffffffffff81111561158d57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156115b6578160200160208202803683370190505b5090506000805b8b8110156116bc5760008d8d838181106115e757634e487b7160e01b600052603260045260246000fd5b90506020020135905060005b6115fd8280613d88565b8110156116a75761165c81838f8f8781811061162957634e487b7160e01b600052603260045260246000fd5b905060200201358e8e8881811061165057634e487b7160e01b600052603260045260246000fd5b90506020020135612ad2565b85858151811061167c57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528361169181613e01565b945050808061169f90613e01565b9150506115f3565b505080806116b490613e01565b9150506115bd565b5061170c846116cb57336116cd565b8e5b8f8f858a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612b7592505050565b61177d5760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a6563746564206260448201527f7920746f000000000000000000000000000000000000000000000000000000006064820152608401610584565b50505b505050505050505050505050565b6001600160a01b0383166117e45760405162461bcd60e51b815260206004820152601660248201527f496e76616c69642073656e6465722061646472657373000000000000000000006044820152606401610584565b60006117ee6118cd565b9050836001600160a01b0316816001600160a01b0316148061182857506001600160a01b03811660009081526001602052604090205460ff165b6118745760405162461bcd60e51b815260206004820152601c60248201527f554e415554484f52495a45445f415050524f56455f464f525f414c4c000000006044820152606401610584565b61113a848484612882565b60008181526004602052604081205481907401000000000000000000000000000000000000000080821614156118b857600092506118bc565b8092505b600160ff1b80821614915050915091565b6002546000906001600160a01b031633141561191057507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c61051c565b503361051c565b826001600160a01b038316611938576119338285836000612c34565b61197a565b6119458285836001612c34565b6000828152600660205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790555b81836001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a450505050565b60006119cb6118cd565b90506000866001600160a01b0316826001600160a01b03161480611a0757506001600160a01b03821660009081526001602052604090205460ff165b80611a3757506001600160a01b0380881660009081526005602090815260408083209386168352929052205460ff165b90506001600160a01b038716611a8f5760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f414444524553530000000000000000000000006044820152606401610584565b6001600160a01b038616611ae55760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f4144445245535300000000000000000000000000006044820152606401610584565b845160005b81811015611c7c576000878281518110611b1457634e487b7160e01b600052603260045260246000fd5b60200260200101519050600080611b2a8361187f565b915091508b6001600160a01b0316826001600160a01b031614611b8f5760405162461bcd60e51b815260206004820152601b60248201527f42415443485452414e5346455246524f4d5f4e4f545f4f574e455200000000006044820152606401610584565b8580611bbc5750808015611bbc57506000838152600660205260409020546001600160a01b038881169116145b611c085760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610584565b600083815260046020526040812054611c25918591908e90612c34565b828b6001600160a01b03168d6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050508080611c7490613e01565b915050611aea565b50866001600160a01b0316886001600160a01b031614611cf1576001600160a01b03881660009081526003602052604081208054839290611cbe908490613da7565b90915550506001600160a01b03871660009081526003602052604081208054839290611ceb908490613d37565b90915550505b6001600160a01b0387163b15158015611d1d57508380611d1d5750611d1d876317a2fd9160e21b612051565b15610c7457611d2f8389898989612b75565b610c745760405162461bcd60e51b815260206004820152601e60248201527f4552433732315f42415443485f5452414e534645525f52454a454354454400006044820152606401610584565b6000806000611d898461187f565b915091506000611d976118cd565b90506001600160a01b038316611def5760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e0000000000000000000000000000006044820152606401610584565b866001600160a01b0316836001600160a01b031614611e505760405162461bcd60e51b815260206004820152601760248201527f434845434b5452414e534645525f4e4f545f4f574e45520000000000000000006044820152606401610584565b6001600160a01b038616611ea65760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f4144445245535300000000000000000000000000006044820152606401610584565b826001600160a01b0316816001600160a01b03161480611ede57506001600160a01b03811660009081526001602052604090205460ff165b80611f0e57506001600160a01b0380881660009081526005602090815260408083209385168352929052205460ff165b80611f3a5750818015611f3a57506000858152600660205260409020546001600160a01b038281169116145b611f865760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e5346455200000000000000000000006044820152606401610584565b5060019695505050505050565b6001600160a01b0383166000908152600360205260408120805491611fb783613dea565b90915550506001600160a01b0382166000908152600360205260408120805491611fe083613e01565b919050555061200b8160046000611ff48590565b815260200190815260200160002054846000612c34565b80826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b604080516001600160e01b031983166024808301919091528251808303909101815260449091018252602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a7000000000000000000000000000000000000000000000000000000001781528251935160008082529485948594909392908183858c612710fa955080519450505050609e5a1161210457634e487b7160e01b600052600160045260246000fd5b82801561210e5750815b9695505050505050565b600080846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b815260040161214d9493929190613cf2565b602060405180830381600087803b15801561216757600080fd5b505af115801561217b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219f9190613bbd565b6001600160e01b0319167f150b7a0200000000000000000000000000000000000000000000000000000000149150505b95945050505050565b82600114156122df5760006121ef61019883613d88565b6121f99084613d37565b90506000612206826124cb565b90506001600160a01b03811661225e5760405162461bcd60e51b815260206004820152601460248201527f746f6b656e20646f6573206e6f742065786973740000000000000000000000006044820152606401610584565b866001600160a01b0316816001600160a01b0316146122bf5760405162461bcd60e51b815260206004820152601a60248201527f6e6f74206f776e657220696e205f7472616e73666572517561640000000000006044820152606401610584565b5060009081526004602052604090206001600160a01b03851690556122ec565b6122ec8585858585612cc7565b60005b6122f98480613d88565b8110156107685761230c81858585612ad2565b856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a48061235681613e01565b9150506122ef565b6001600160a01b0385163b151580156123835750612383856317a2fd9160e21b612051565b156124c25760006123948580613d88565b67ffffffffffffffff8111156123ba57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156123e3578160200160208202803683370190505b50905060005b6123f38680613d88565b8110156124435761240681878787612ad2565b82828151811061242657634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061243b81613e01565b9150506123e9565b506124518888888486612b75565b610c745760405162461bcd60e51b8152602060048201526024808201527f657263373231206261746368207472616e736665722072656a6563746564206260448201527f7920746f000000000000000000000000000000000000000000000000000000006064820152608401610584565b50505050505050565b60007fff0000000000000000000000000000000000000000000000000000000000000082161561253d5760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e206964000000000000000000000000000000006044820152606401610584565b600061254b61019884613e1c565b9050600061255b61019885613d74565b600085815260046020526040902054909150801561257d5792506104e2915050565b6000600481610198612590600387613d74565b61259b906003613d88565b6125a59190613d88565b6125b0600388613d74565b6125bb906003613d88565b6125c990600160f81b613d37565b6125d39190613d37565b815260208101919091526040016000205490506001600160a01b038116156126005793506104e292505050565b6000600481610198612613600688613d74565b61261e906006613d88565b6126289190613d88565b612633600689613d74565b61263e906006613d88565b61264c90600160f91b613d37565b6126569190613d37565b815260208101919091526040016000205490506001600160a01b038116156126845794506104e29350505050565b6000600481610198612697600c89613d74565b6126a290600c613d88565b6126ac9190613d88565b6126b7600c8a613d74565b6126c290600c613d88565b6126d090600360f81b613d37565b6126da9190613d37565b815260208101919091526040016000205490506001600160a01b038116156127095795506104e2945050505050565b6004600061019861271b601889613d74565b612726906018613d88565b6127309190613d88565b61273b60188a613d74565b612746906018613d88565b61275490600160fa1b613d37565b61275e9190613d37565b81526020019081526020016000205496505050505050506104e2565b816001600160a01b0316836001600160a01b0316146127db5760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e455200000000000000000000000000000000000000000000006044820152606401610584565b80740100000000000000000000000000000000000000006128016001600160ff1b613da7565b6000838152600460209081526040808320805494909416949094179092556001600160a01b0387168152600390915290812080549161283f83613dea565b909155505060405182906000906001600160a01b038716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a450505050565b6001600160a01b03821660009081526001602052604090205460ff16156128eb5760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f415050524f56414c5f4348414e47450000000000000000006044820152606401610584565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b606081612999575060408051808201909152600181527f300000000000000000000000000000000000000000000000000000000000000060208201526104e2565b8160005b81156129c357806129ad81613e01565b91506129bc9050600a83613d74565b915061299d565b60008167ffffffffffffffff8111156129ec57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612a16576020820181803683370190505b509050815b8515612ac957612a2c600182613da7565b90506000612a3b600a88613d74565b612a4690600a613d88565b612a509088613da7565b612a5b906030613d4f565b905060008160f81b905080848481518110612a8657634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612ac0600a89613d74565b97505050612a1b565b50949350505050565b600080612adf8587613d74565b9050612aec600282613e1c565b612b2d57610198612afd8285613d37565b612b079190613d88565b612b118688613e1c565b612b1b9086613d37565b612b259190613d37565b915050612b6d565b610198612b3a8285613d37565b612b449190613d88565b612b4e8688613e1c565b612b59906001613d37565b612b638787613d37565b612b1b9190613da7565b949350505050565b600080846001600160a01b0316634b808c46888887876040518563ffffffff1660e01b8152600401612baa9493929190613c89565b602060405180830381600087803b158015612bc457600080fd5b505af1158015612bd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfc9190613bbd565b6001600160e01b0319167f4b808c46000000000000000000000000000000000000000000000000000000001491505095945050505050565b8015612c78576000848152600460205260409020600160ff1b6001600160a01b03841673ffffffffffffffffffffffffffffffffffffffff1986161717905561113a565b6001600160a01b038216612c916001600160ff1b613da7565b841673ffffffffffffffffffffffffffffffffffffffff1916176004600086815260208101919091526040016000205550505050565b612cd18383613e1c565b158015612ce55750612ce38382613e1c565b155b612d315760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420636f6f7264696e61746573000000000000000000000000006044820152606401610584565b612d3d83610198613da7565b8211158015612d575750612d5383610198613da7565b8111155b612da35760405162461bcd60e51b815260206004820152600d60248201527f4f7574206f6620626f756e6473000000000000000000000000000000000000006044820152606401610584565b8260031415612dc057612dba858584846001612e4d565b506106ef565b8260061415612dd757612dba85858484600161311e565b82600c1415612dee57612dba8585848460016132ba565b8260181415612e0557612dba858584846001613456565b60405162461bcd60e51b815260206004820152600c60248201527f496e76616c69642073697a6500000000000000000000000000000000000000006044820152606401610584565b600080612e5c61019885613d88565b612e669086613d37565b90506000612e7882600160f81b613d37565b90506001865b612e89886003613d37565b811015612ef357865b612e9d886003613d37565b811015612ee057612ec38b612eb461019884613d88565b612ebe9085613d37565b613671565b8015612ecc5750825b925080612ed881613e01565b915050612e92565b5080612eeb81613e01565b915050612e7e565b50841561311257806130ed576000828152600460205260409020546001600160a01b038a161480612f8f57506001600160a01b03891660046000610198612f3b60068b613d74565b612f46906006613d88565b612f509190613d88565b612f5b60068c613d74565b612f66906006613d88565b612f7490600160f91b613d37565b612f7e9190613d37565b815260200190815260200160002054145b8061300557506001600160a01b03891660046000610198612fb1600c8b613d74565b612fbc90600c613d88565b612fc69190613d88565b612fd1600c8c613d74565b612fdc90600c613d88565b612fea90600360f81b613d37565b612ff49190613d37565b815260200190815260200160002054145b8061307b57506001600160a01b0389166004600061019861302760188b613d74565b613032906018613d88565b61303c9190613d88565b61304760188c613d74565b613052906018613d88565b61306090600160fa1b613d37565b61306a9190613d37565b815260200190815260200160002054145b6130ed5760405162461bcd60e51b815260206004820152602b60248201527f6e6f74206f776e6572206f6620616c6c20737562207175616473206e6f72207060448201527f6172656e742071756164730000000000000000000000000000000000000000006064820152608401610584565b5060009081526004602052604090206001600160a01b038716905550600190506121cf565b98975050505050505050565b60008061312d61019885613d88565b6131379086613d37565b9050600061314982600160f91b613d37565b90506001865b61315a886006613d37565b81101561327257865b61316e886006613d37565b81101561325f5760006131858c8c85856000612e4d565b9050600061319561019884613d88565b6131a385600160f81b613d37565b6131ad9190613d37565b60008181526004602052604090205490915080156132325782613222578d6001600160a01b031681146132225760405162461bcd60e51b815260206004820152601560248201527f6e6f74206f776e6572206f6620337833207175616400000000000000000000006044820152606401610584565b6000828152600460205260408120555b828061323d57508015155b80156132465750855b95505050506003816132589190613d37565b9050613163565b5061326b600382613d37565b905061314f565b50841561311257806130ed576000828152600460205260409020546001600160a01b038a16148061300557506001600160a01b03891660046000610198612fb1600c8b613d74565b6000806132c961019885613d88565b6132d39086613d37565b905060006132e582600360f81b613d37565b90506001865b6132f688600c613d37565b81101561340e57865b61330a88600c613d37565b8110156133fb5760006133218c8c8585600061311e565b9050600061333161019884613d88565b61333f85600160f91b613d37565b6133499190613d37565b60008181526004602052604090205490915080156133ce57826133be578d6001600160a01b031681146133be5760405162461bcd60e51b815260206004820152601560248201527f6e6f74206f776e6572206f6620367836207175616400000000000000000000006044820152606401610584565b6000828152600460205260408120555b82806133d957508015155b80156133e25750855b95505050506006816133f49190613d37565b90506132ff565b50613407600682613d37565b90506132eb565b50841561311257806130ed576000828152600460205260409020546001600160a01b038a16148061307b57506001600160a01b0389166004600061019861302760188b613d74565b60008061346561019885613d88565b61346f9086613d37565b9050600061348182600160fa1b613d37565b90506001865b613492886018613d37565b8110156135aa57865b6134a6886018613d37565b8110156135975760006134bd8c8c858560006132ba565b905060006134cd61019884613d88565b6134db85600360f81b613d37565b6134e59190613d37565b600081815260046020526040902054909150801561356a578261355a578d6001600160a01b0316811461355a5760405162461bcd60e51b815260206004820152601760248201527f6e6f74206f776e6572206f6620313278313220717561640000000000000000006044820152606401610584565b6000828152600460205260408120555b828061357557508015155b801561357e5750855b9550505050600c816135909190613d37565b905061349b565b506135a3600c82613d37565b9050613487565b50841561364257806130ed576000828152600460205260409020546001600160a01b038a16146130ed5760405162461bcd60e51b815260206004820152602a60248201527f6e6f74206f776e6572206f6620616c6c20737562207175616473206e6f74207060448201527f6172656e742071756164000000000000000000000000000000000000000000006064820152608401610584565b808061366457506000828152600460205260409020546001600160a01b038a16145b9998505050505050505050565b60008181526004602052604081205480156136ff57836001600160a01b0316816001600160a01b0316146136e75760405162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e657200000000000000000000000000000000000000000000006044820152606401610584565b50506000818152600460205260408120556001611224565b5060009392505050565b80356001600160a01b03811681146104e257600080fd5b60008083601f840112613731578081fd5b50813567ffffffffffffffff811115613748578182fd5b602083019150836020808302850101111561376257600080fd5b9250929050565b803580151581146104e257600080fd5b60008083601f84011261378a578182fd5b50813567ffffffffffffffff8111156137a1578182fd5b60208301915083602082850101111561376257600080fd5b6000602082840312156137ca578081fd5b61122182613709565b600080604083850312156137e5578081fd5b6137ee83613709565b91506137fc60208401613709565b90509250929050565b60008060008060008060008060008060c08b8d031215613823578586fd5b61382c8b613709565b995061383a60208c01613709565b985060408b013567ffffffffffffffff80821115613856578788fd5b6138628e838f01613720565b909a50985060608d013591508082111561387a578788fd5b6138868e838f01613720565b909850965060808d013591508082111561389e578586fd5b6138aa8e838f01613720565b909650945060a08d01359150808211156138c2578384fd5b506138cf8d828e01613779565b915080935050809150509295989b9194979a5092959850565b60008060008060008060808789031215613900578182fd5b61390987613709565b955061391760208801613709565b9450604087013567ffffffffffffffff80821115613933578384fd5b61393f8a838b01613720565b90965094506060890135915080821115613957578384fd5b5061396489828a01613779565b979a9699509497509295939492505050565b60008060006060848603121561398a578283fd5b61399384613709565b92506139a160208501613709565b91506139af60408501613769565b90509250925092565b6000806000606084860312156139cc578283fd5b6139d584613709565b92506139e360208501613709565b9150604084013590509250925092565b60008060008060808587031215613a08578384fd5b613a1185613709565b9350613a1f60208601613709565b925060408501359150606085013567ffffffffffffffff80821115613a42578283fd5b818701915087601f830112613a55578283fd5b813581811115613a6757613a67613e5c565b604051601f8201601f19908116603f01168101908382118183101715613a8f57613a8f613e5c565b816040528281528a6020848701011115613aa7578586fd5b82602086016020830137918201602001949094529598949750929550505050565b600080600080600080600060c0888a031215613ae2578283fd5b613aeb88613709565b9650613af960208901613709565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff811115613b29578283fd5b613b358a828b01613779565b989b979a50959850939692959293505050565b60008060408385031215613b5a578182fd5b613b6383613709565b91506137fc60208401613769565b60008060408385031215613b83578182fd5b613b8c83613709565b946020939093013593505050565b600060208284031215613bab578081fd5b8135613bb681613e72565b9392505050565b600060208284031215613bce578081fd5b8151613bb681613e72565b600060208284031215613bea578081fd5b5035919050565b60008151808452613c09816020860160208601613dbe565b601f01601f19169290920160200192915050565b60007f68747470733a2f2f6170692e73616e64626f782e67616d652f6c616e64732f0082528251613c5581601f850160208701613dbe565b7f2f6d657461646174612e6a736f6e000000000000000000000000000000000000601f939091019283015250602d01919050565b6000608082016001600160a01b03808816845260208188168186015260806040860152829150865180845260a0860192508188019350845b81811015613cdd57845184529382019392820192600101613cc1565b50505083810360608501526131128186613bf1565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261210e6080830184613bf1565b6000602082526112216020830184613bf1565b60008219821115613d4a57613d4a613e30565b500190565b600060ff821660ff84168060ff03821115613d6c57613d6c613e30565b019392505050565b600082613d8357613d83613e46565b500490565b6000816000190483118215151615613da257613da2613e30565b500290565b600082821015613db957613db9613e30565b500390565b60005b83811015613dd9578181015183820152602001613dc1565b8381111561113a5750506000910152565b600081613df957613df9613e30565b506000190190565b6000600019821415613e1557613e15613e30565b5060010190565b600082613e2b57613e2b613e46565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610cb357600080fdfea2646970667358221220e32cc4cd99a801691de25a2d5e4e438f881f2245296f0472d5f527c4cb21dbe964736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "id": "The id of the token.",
          "operator": "The address receiving the approval."
        }
      },
      "approveFor(address,address,uint256)": {
        "params": {
          "id": "The id of the token.",
          "operator": "The address receiving the approval.",
          "sender": "The address giving the approval."
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address to look for."
        },
        "returns": {
          "_0": "The number of tokens owned by the address."
        }
      },
      "batchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "ids": "The ids of the tokens.",
          "to": "The recipient of the token."
        }
      },
      "burn(uint256)": {
        "params": {
          "id": "The token which will be burnt."
        }
      },
      "burnFrom(address,uint256)": {
        "params": {
          "from": "address whose token is to be burnt.",
          "id": "The token which will be burnt."
        }
      },
      "changeAdmin(address)": {
        "details": "Change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "The address of the new administrator."
        }
      },
      "getAdmin()": {
        "details": "Get the current administrator of this contract.",
        "returns": {
          "_0": "The current administrator of this contract."
        }
      },
      "getApproved(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "_0": "The address of the operator."
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "The address of the operator.",
          "owner": "The address of the owner."
        },
        "returns": {
          "isOperator": "The status of the approval."
        }
      },
      "isSuperOperator(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has superOperator rights."
        }
      },
      "name()": {
        "returns": {
          "_0": "The name of the token contract"
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "owner": "The address of the token owner."
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "ids": "The ids of the tokens.",
          "to": "The recipient of the token."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "The send of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "The determination of the approval.",
          "operator": "The address receiving the approval."
        }
      },
      "setApprovalForAllFor(address,address,bool)": {
        "params": {
          "approved": "The determination of the approval.",
          "operator": "The address receiving the approval.",
          "sender": "The address giving the approval."
        }
      },
      "setSuperOperator(address,bool)": {
        "params": {
          "enabled": "set whether the superOperator is enabled or disabled.",
          "superOperator": "address that will be given/removed superOperator right."
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "id": "The id of the interface"
        },
        "returns": {
          "_0": "True if the interface is supported"
        }
      },
      "symbol()": {
        "returns": {
          "_0": "The symbol of the token contract"
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "id": "The id of the token"
        },
        "returns": {
          "_0": "The URI of the token"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "The sender of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Approve an operator to spend tokens on the senders behalf."
      },
      "approveFor(address,address,uint256)": {
        "notice": "Approve an operator to spend tokens on the sender behalf."
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens owned by an address."
      },
      "batchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses."
      },
      "burn(uint256)": {
        "notice": "Burns token `id`."
      },
      "burnFrom(address,uint256)": {
        "notice": "Burn token`id` from `from`."
      },
      "getApproved(uint256)": {
        "notice": "Get the approved operator for a specific token."
      },
      "isApprovedForAll(address,address)": {
        "notice": "Check if the sender approved the operator."
      },
      "isSuperOperator(address)": {
        "notice": "check whether address `who` is given superOperator rights."
      },
      "name()": {
        "notice": "Return the name of the token contract"
      },
      "ownerOf(uint256)": {
        "notice": "Get the owner of a token."
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses, while ensuring the receiving contract has a receiver method."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses letting the receiver know of the transfer."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender."
      },
      "setApprovalForAllFor(address,address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender."
      },
      "setSuperOperator(address,bool)": {
        "notice": "Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights)."
      },
      "supportsInterface(bytes4)": {
        "notice": "Check if the contract supports an interface 0x01ffc9a7 is ERC-165 0x80ac58cd is ERC-721 0x5b5e139f is ERC-721 metadata"
      },
      "symbol()": {
        "notice": "Return the symbol of the token contract"
      },
      "tokenURI(uint256)": {
        "notice": "Return the URI of a specific token"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17297,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandBaseToken.sol:PolygonLandBaseToken",
        "label": "_admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17529,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandBaseToken.sol:PolygonLandBaseToken",
        "label": "_superOperators",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15474,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandBaseToken.sol:PolygonLandBaseToken",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 15658,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandBaseToken.sol:PolygonLandBaseToken",
        "label": "_numNFTPerAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15662,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandBaseToken.sol:PolygonLandBaseToken",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 15668,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandBaseToken.sol:PolygonLandBaseToken",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 15672,
        "contract": "src/solc_0.8/polygon/child/land/PolygonLandBaseToken.sol:PolygonLandBaseToken",
        "label": "_operators",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}